#!/usr/bin/env ruby

# <bitbar.title>Japan Weather</bitbar.title>
# <bitbar.version>1.0</bitbar.version>
# <bitbar.author.github>tsurezuregusa</bitbar.author.github>
# <bitbar.desc>Display local weather in Japan</bitbar.desc>
# <bitbar.dependencies>ruby >= 2.4; imagemagick; rubygems: activesupport, nokogiri, faraday, rmagick, nkf, mk_sunmoon</bitbar.dependencies>

require 'open-uri'
require 'faraday'
require 'time'
require 'json'
require 'nkf'
require 'base64'
require 'rubygems'
require 'active_support'
require 'active_support/core_ext/numeric'
require 'nokogiri'
require 'rmagick'
require 'mk_sunmoon'

$place = '東京都渋谷区' # 表示のみ
$latlon = [35.664167,139.698611]

# APIはひとつだけで充分だが、どれもない場合は気象庁のデータのみ使用
# 信頼度が低いようで、観測地点が曖昧なため、現在は補足的
# darkskyは終了する予定で、ほかのなかでclimacellが良さそう
$darkskyapi = nil
$openweatherapi = nil
$openweatherloc = '1850147' # 東京
$visualcrossingapi = nil
# $climacellapi = nil

# https://www.jma.go.jp/bosai/#area_type=offices&area_code=******
$pref = '130000' # 東京都
# area.txtを参照
$area = '130010' # 東京地方
# $local,$quakearea = https://www.jma.go.jp/bosai/#area_type=class20s&area_code=*******
$local = '1311300' # 渋谷区
$quakearea = '1310100' # 千代田区 # 地震観測は、中央観測地点が良さそうだ
# https://www.jma.go.jp/bosai/map.html#elem=temp&contents=amedas 「この地点の感触表を見る」
# $amedas = amdno=*****
$amedas = '44132' # 東京都（千代田区）

# 衛星写真
# 可視 => 'B03/ALBD', 赤外 => 'B13/TBB', 蒸気 => 'B08/TBB', true color => 'REP/ETC', 雲頂強調 => 'SND/ETC'
$sattype = 'B13/TBB'
$typhtype = 'B13/TBB'

# 衛星写真座標
# satmap-key.pngを参照
# 下記は本州、首都圏を中心に
$satxa = 27
$satxb = 29
$satya = 11
$satyb = 13

# レーダー座標
# radmap-key.pngを参照
# 下記は首都圏
$radxa = 226
$radxb = 227
$radya = 100
$radyb = 101

# 台風用衛星写真座標
# 大概変更不要
$typhxa = 12
$typhxb = 15
$typhya = 5
$typhyb = 8

### satmap64とradmap64に、mapgen.rbの出力を以下に

satmap64 = "iVBORw0KGgoAAAANSUhEUgAAAwAAAAMACAMAAACkX/C8AAAJJmlDQ1BpY2MA
AEiJlZVnUJNZF8fv8zzphUASQodQQ5EqJYCUEFoo0quoQOidUEVsiLgCK4qI
NEWQRQEXXJUia0UUC4uCAhZ0gywCyrpxFVFBWXDfGZ33HT+8/5l7z2/+c+be
c8/5cAEgiINlwct7YlK6wNvJjhkYFMwE3yiMn5bC8fR0A9/VuxEArcR7ut/P
+a4IEZFp/OW4uLxy+SmCdACg7GXWzEpPWeGjy0wPj//CZ1dYsFzgMt9Y4eh/
eexLzr8s+pLj681dfhUKABwp+hsO/4b/c++KVDiC9NioyGymT3JUelaYIJKZ
ttIJHpfL9BQkR8UmRH5T8P+V/B2lR2anr0RucsomQWx0TDrzfw41MjA0BF9n
8cbrS48hRv9/z2dFX73kegDYcwAg+7564ZUAdO4CQPrRV09tua+UfAA67vAz
BJn/eqiVDQ0IgALoQAYoAlWgCXSBETADlsAWOAAX4AF8QRDYAPggBiQCAcgC
uWAHKABFYB84CKpALWgATaAVnAad4Dy4Aq6D2+AuGAaPgRBMgpdABN6BBQiC
sBAZokEykBKkDulARhAbsoYcIDfIGwqCQqFoKAnKgHKhnVARVApVQXVQE/QL
dA66At2EBqGH0Dg0A/0NfYQRmATTYQVYA9aH2TAHdoV94fVwNJwK58D58F64
Aq6HT8Id8BX4NjwMC+GX8BwCECLCQJQRXYSNcBEPJBiJQgTIVqQQKUfqkVak
G+lD7iFCZBb5gMKgaCgmShdliXJG+aH4qFTUVlQxqgp1AtWB6kXdQ42jRKjP
aDJaHq2DtkDz0IHoaHQWugBdjm5Et6OvoYfRk+h3GAyGgWFhzDDOmCBMHGYz
phhzGNOGuYwZxExg5rBYrAxWB2uF9cCGYdOxBdhK7EnsJewQdhL7HkfEKeGM
cI64YFwSLg9XjmvGXcQN4aZwC3hxvDreAu+Bj8BvwpfgG/Dd+Dv4SfwCQYLA
IlgRfAlxhB2ECkIr4RphjPCGSCSqEM2JXsRY4nZiBfEU8QZxnPiBRCVpk7ik
EFIGaS/pOOky6SHpDZlM1iDbkoPJ6eS95CbyVfJT8nsxmpieGE8sQmybWLVY
h9iQ2CsKnqJO4VA2UHIo5ZQzlDuUWXG8uIY4VzxMfKt4tfg58VHxOQmahKGE
h0SiRLFEs8RNiWkqlqpBdaBGUPOpx6hXqRM0hKZK49L4tJ20Bto12iQdQ2fR
efQ4ehH9Z/oAXSRJlTSW9JfMlqyWvCApZCAMDQaPkcAoYZxmjDA+SilIcaQi
pfZItUoNSc1Ly0nbSkdKF0q3SQ9Lf5RhyjjIxMvsl+mUeSKLktWW9ZLNkj0i
e012Vo4uZynHlyuUOy33SB6W15b3lt8sf0y+X35OQVHBSSFFoVLhqsKsIkPR
VjFOsUzxouKMEk3JWilWqUzpktILpiSTw0xgVjB7mSJleWVn5QzlOuUB5QUV
loqfSp5Km8oTVYIqWzVKtUy1R1WkpqTmrpar1qL2SB2vzlaPUT+k3qc+r8HS
CNDYrdGpMc2SZvFYOawW1pgmWdNGM1WzXvO+FkaLrRWvdVjrrjasbaIdo12t
fUcH1jHVidU5rDO4Cr3KfFXSqvpVo7okXY5upm6L7rgeQ89NL0+vU++Vvpp+
sP5+/T79zwYmBgkGDQaPDamGLoZ5ht2GfxtpG/GNqo3uryavdly9bXXX6tfG
OsaRxkeMH5jQTNxNdpv0mHwyNTMVmLaazpipmYWa1ZiNsulsT3Yx+4Y52tzO
fJv5efMPFqYW6RanLf6y1LWMt2y2nF7DWhO5pmHNhJWKVZhVnZXQmmkdan3U
WmijbBNmU2/zzFbVNsK20XaKo8WJ45zkvLIzsBPYtdvNcy24W7iX7RF7J/tC
+wEHqoOfQ5XDU0cVx2jHFkeRk4nTZqfLzmhnV+f9zqM8BR6f18QTuZi5bHHp
dSW5+rhWuT5z03YTuHW7w+4u7gfcx9aqr01a2+kBPHgeBzyeeLI8Uz1/9cJ4
eXpVez33NvTO9e7zofls9Gn2eedr51vi+9hP0y/Dr8ef4h/i3+Q/H2AfUBog
DNQP3BJ4O0g2KDaoKxgb7B/cGDy3zmHdwXWTISYhBSEj61nrs9ff3CC7IWHD
hY2UjWEbz4SiQwNCm0MXwzzC6sPmwnnhNeEiPpd/iP8ywjaiLGIm0iqyNHIq
yiqqNGo62ir6QPRMjE1MecxsLDe2KvZ1nHNcbdx8vEf88filhICEtkRcYmji
uSRqUnxSb7JicnbyYIpOSkGKMNUi9WCqSOAqaEyD0tandaXTlz/F/gzNjF0Z
45nWmdWZ77P8s85kS2QnZfdv0t60Z9NUjmPOT5tRm/mbe3KVc3fkjm/hbKnb
Cm0N39qzTXVb/rbJ7U7bT+wg7Ijf8VueQV5p3tudATu78xXyt+dP7HLa1VIg
ViAoGN1tubv2B9QPsT8M7Fm9p3LP58KIwltFBkXlRYvF/OJbPxr+WPHj0t6o
vQMlpiVH9mH2Je0b2W+z/0SpRGlO6cQB9wMdZcyywrK3BzcevFluXF57iHAo
45Cwwq2iq1Ktcl/lYlVM1XC1XXVbjXzNnpr5wxGHh47YHmmtVagtqv14NPbo
gzqnuo56jfryY5hjmceeN/g39P3E/qmpUbaxqPHT8aTjwhPeJ3qbzJqamuWb
S1rgloyWmZMhJ+/+bP9zV6tua10bo63oFDiVcerFL6G/jJx2Pd1zhn2m9az6
2Zp2WnthB9SxqUPUGdMp7ArqGjzncq6n27K7/Ve9X4+fVz5ffUHyQslFwsX8
i0uXci7NXU65PHsl+spEz8aex1cDr97v9eoduOZ67cZ1x+tX+zh9l25Y3Th/
0+LmuVvsW523TW939Jv0t/9m8lv7gOlAxx2zO113ze92D64ZvDhkM3Tlnv29
6/d5928Prx0eHPEbeTAaMip8EPFg+mHCw9ePMh8tPN4+hh4rfCL+pPyp/NP6
37V+bxOaCi+M24/3P/N59niCP/Hyj7Q/Fifzn5Ofl08pTTVNG02fn3Gcufti
3YvJlykvF2YL/pT4s+aV5quzf9n+1S8KFE2+Frxe+rv4jcyb42+N3/bMec49
fZf4bmG+8L3M+xMf2B/6PgZ8nFrIWsQuVnzS+tT92fXz2FLi0tI/QiyQvpNz
TVQAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpR
PAAAAY9QTFRF//////8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A
//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A
//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A
//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A
//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A
//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A
//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A
//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A
//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A//8A
////WY5TeQAAAIN0Uk5TAGZ3M0QRme7MiCKq3VW7n2n5wd/I779OxPd6j+Kv
+LaS/IDz1tfj6sC3ayD0jaPereuEgujwl3WO2rXNp/LnW6TR0kBL/TD6w1Cb
x7T7zz9g9fFwPent3NTg7P7TxcalXInmssLhpvbZq0zbypSMitWwkNizvpW5
rOV7qXOclryduH3MSNARAAAAAWJLR0QAiAUdSAAAAAlwSFlzAAAASAAAAEgA
RslrPgAAAAd0SU1FB+UCGRcjB+QoPNMAAAp4elRYdFJhdyBwcm9maWxlIHR5
cGUgaWNjAABYhZ2XbZJkqQ1F/7MKL4FPCS0HBIrw/jfgQ1Z3T7fdM2M7K4jM
eg+EkK7uFemf7ukffOpQSfl9Vsk/PvXrtxy52rWO2rXXmsccNlbNf/ZJUqRp
09zLyCN3/9OZf/EJdn0e/XDntHr+H0Mfj/7H+Uu6DG3Svvny7QTqiYNlrdo/
/xedXy/qVCVC+fvz9c1O6VJl//F89+/PE+H8hPHrf58/FujPz4//Yejn55F/
NtTJzJerNX/tMLNj6PfP/2R++vXM3z+19vIOLCbC+0n6m4QIx1XhjYyatX2H
RrfeUm9MIkpvGstcxu+j/Hem03/a/m9N//r52/TrO/r8liU+HT/ImrGRiQpv
2P559NdxaLXlVhqQ/V2JRBsPzOW7R6WI+9/V0vfP7+ZJrPo5WpvxFYdmv59Y
zd731vmZV+ZZ/z7vY6j2b8iN+YnFFg8QP8iS/GLxR6TyM/gWxQMjwzBULqba
KwsGRUvSMnWT2/5a2Vn0duosGjwYeDdY87An8xEOKXlHU31FBzwJ2sSDiYF3
EsOAYcAwsDCweLgwsOs7JIM1zhpnjW8MPeY4LDoYYF6+/L774zVMw9jk5f0p
45CaxjBG5FIHg/cNj0qbjMtReQixFbJecL9gowiLhXfKO7wuEyN4XIw5eFug
1oKnZRcMbX7gYnG+D9+H78v35TtYEIvibAyHhjvjUC/CCEI7yVRhcDSqmcFL
dq/KQ2Uh2avz5mpMJMd1YWSzmA2rb3Iycn05IgQV6LSX/pY34BWSVfKj2sYu
1BsjcoN3mvBO8UkvgON/43+MNwLfNv+75nYahrDcrucWRraFwmmZ+mEcCmvn
3icIQBdId8fjjsE+nfpeoIJ3eNq9p9wPE4jJg0mPC9ROHsXzIBujLaAD3MfM
g6MPoDKAyMCrsRgb6XHGGQls8YM0f/44olTNj8gFT4TsiawsusGeZ7GTZUUW
fzgsWW6j0OCcrCkrmFB213bgjMhUPhjtWdlZqTEl0Lp5fiAuNtWYUOsGv5En
VTC75DlWAsw3Tzhk4u5cC2DzP4vm1TwBowFeA3jGMY2NTHo2tWyT3yDeCLh5
pGzsYixYpeTFsRaeLSCxONKibBYQWGRoEYuFmqx4eeYPQt3QxYaTtlC0m7rb
TN77lQ/fBH6TQS9AsK7sQMGHZwfdDrZ8afZXZgDXMXreX0WyT3+ltvIhLoeJ
B8gfZ8LhN/G4wOGCvkv2Lse6GvnaphwlX0Jw76Us8Sg4fwDzgBoCVAexit1Q
48hxX3kTpUoGOowrnF9x2TZu8/zoW1go5MTguwd8e0qZXsoiWm6l3MnhtFBX
pfZRqvRC6ZS6WqnOuJD5I/TKQNcK4ggBMBaY9gERDEpTSqfwejdEepU+d+nr
QA6XPSGHUstodEJDCrIBWexUxj6FU71qK3QIRVgs4kVmFNkVR3kWqyjUoL0U
lUGvYUXXLWCraGiZBUMUepm8nHOVuQJi5zcLP5TDkUx2MU5qG+ieQ2PSy6qr
LEKzVKGjW4BGKouA4njZbZfNMTcGN57ss8pjICBQfPCtuzjxcffiBPhAWocq
PvoozBIdSysHY7dIuXh3icm1Xi6AutdKkI1ot4Twm+exo8Rd9UOlxJ7Cq8A8
gTpIA7IjVRDg5NBsv4im38qqWqvWOkatk58raj0HzVkV3qpwVW3Wa/OaaovH
llF7P3QSjsbt2s961VUHk4cwkPrhjEDJ61NzxtTXvFW5k/zikXarqlQZBvQ4
6nbqbEHzB2wWjpxe7YktRgk8onsqbELx4CBtzGKjRfqh44BEat1NoGWrm4kg
oj5q82bV5VbHoB+FM70e4nJU6mHjc8EloLndU8UzOFwrNVM5IFy+alipwVEi
YK42YC+Kb1G9Z1MHQLmTPkJUNt9RG76lVqW1ahve742ZrUHOTaO1PVsjZR1f
6ZFat9v6mXQyrQ34eUz6M69txKE4NDVRgr9uk2uIRW/6RMO86dE2S280IG1O
b9Pna1Y+STI2ss3BA7rDzNKeGkdFWaJx4rYFWK7V9p1kVBttX3OO5Le1U2uj
Who4bTBMuyjSZdOLIsEkifyUFkygWWpxK8rYqNn+KPKRD6EFhUJFLwelF39Q
KlyvexBQJR7spIeuFonqyGGnHe1zdSr8kQZSRkMNKY9z6dJrfz2hrN0lkDai
pLqBHRKHYE0ku1PIfUKPRuWYENNlnU6GvGhfejqO9A38N/HeGN54Tf11ktp9
rw6kOrNSP0YyjvdLE3DldqDwpZW0ysSyx3lCD2ErF7H9qB6qQAqhg0FhDkAw
KpcaUKcDWhvkEWFdg4CN3rFKY9nPpsrmGMpBnWqBVwVplWWDLnkQjKFUEiqe
xgSCU8+YvofBMiYG4SF5Wcdi2VqMGGMTtW2Mi83GgMT8yDh4e3SmcdwG1DSu
+Lj7DCgfBS8DAaDVwgkurAgbzjj8y5sFjeJYJaLVuOSg4I+zBXRJQ1v6S7p1
6ddAD1sZRX5VhN+UoFDlgqyLGhhmDoUtqLPM6/IuNWK2xOIhZXL0oEdQ2ey8
F98R+Knii2sr4n7oMc42oVblypbroIGIB0eTgNNpxxB6+pZLbgB8saH0CCSY
al44QgfZiAT1B0L7193SyRJkQ+euxCa9c6nA7BJcP2mCdDcEBqHguj6ZbHWp
TdqGC2txsSSxNDld4Xfd1BG8qj4x5E9VuN9QQ/r61wsFXibADnQwXePSZXUu
u2u+lmKiUbP4gUQyTAcBR4cSNE2qFP08E6zPfil2Fo216Y5edCuB4Zb1zmQx
sTinGGRwp0HaZvgad1KWaS5fE6mfxHDu8OkCY/DsQF2HNSdi3k9y7oyGbBp9
M70b7RrdBtJC81nWTIZ8QNrL0PJXLAaXQDn0VJOio07GCBtunzIkvUYHZQTT
iIPN7jY3jtWe8C6bhQOCaesAarh+rzBk0Jw5HmoHhKFChu7ZXRe0HA66LYIW
T2hvz0x0CIq0CvTOMFkQNIXPQCk7VUWZU4BzjcVetCoEYIEZUHYXXq2JkEza
4wXBMsVoZnwtRB9FWZsy29eQdF9OJ3g6vQhaftGOi+w//OLRfnc7SpKua6VN
G7LLQbA6iu8wfSP263JC6tSo5NL2mIv+DL/VNsQG6ObGG0qb8j7cZuCjbSyG
pffaA0uXHw9nZbvt1/DsQ2vLCaBxOC1QfpQ0gqaSVjJfOgpRGoeWYJlA9ZAE
iKQdLgO0/dCtj745GWjoXP2dG0d/DQn4aMfndkc/2MtoUKYTi+SwhW9usVhy
DuIolsNnCIf4fbfbph4cgNvMyZu2rTmHoQ1tcbgtHdj+IDeJOBp+QET9nnGI
1hhHDiyOPeJwpiCLF2wKDTF5J11nxSb2NL/cQnwu2q+cDjOQcD+0PCdoD2Jx
s0Eu8+Zx57rj9DcDGTsbJ9uFuy4ycns4VQjN53PFJF344gIAJJE2YDs9Ftg/
JBRSXRfShFw28YZaL33vPeZ0CfOS1xsoXzh99JiJ7ntEoV8oEfQyhKRYQEnR
ERB0B7aGe88NkRPykkajOZkzAR2tDiWgAbOkWLTyWzXIJ4UyiaDFoUZu33GP
w5GUbUT6F+2RBMhLrYq1AAAAEGNhTnYAAAEAAAABAAAAAAAAAAAAIfut5AAA
Q1dJREFUeNrtvYu7JNV57tdV636pNaBhBkbjQRoNIBDY0cGALASyEUEIY5AZ
RT6WUGThEyQ5PjlxjpOcnNxOku8fz1rV997dvau6qrurar0/PY/Ysy+9u3uv
y3d9v9kMXIWCytu/iRHf92lBxa0/KpVu8F1jozB8VpIie+0nAjpSkGzwXZz2
frpU4tYftcpIde1XeRaUK7ABRg+ZBt8k9P4l7Jv8sFF8//0xcgQZ1eTwAEOm
otvP8NnM7T/pq2YHoJdqejbQTEii0OTNA0MmhAbfVBw4wZ1r9Dsq0k1uinFR
KVINnCcwbARVDb7LhAM/3PBgpwmaQNpN0LXPjwPO7Q4HNkDRyHyKqAluAE/E
rv0cQGeMbvJd5X4XuKEFFO2sKR6WHPb/BDBNXICZ3XuCN7aAZoYahEsBuDzN
NsAs7Dvri8aruqJGwVYALk3DDbA34eOaB8FZiYQRGCKy2QaY+ZuL3TYKIAEw
ZHzDU3xPJqCYZn0DyIqGJtC+hFkLCwiAgSKbRjJvlvNMMbQJMkM0qmarcX77
382KiAAYMEKrxtlMu3Piy0YpNACGi1W6RTZfbl8BHpVgYOQ0aWdZs534ZaiE
AWNHt4vjbJX+GN/qZwEYGoVqmcmqNitHJ1jhD7KiJNPSiGEb9RDN+ggAGCry
hDD+RioAaWAwak5Z/5uBn5buAwCD4qT1Pwsru99OsMUL5MNp63+jcKhEDAiM
F35iGc96A2RXCMdw402IRlIoe1hvgCnq/ByjggTQhChONeBXG4DnpghYUqWQ
+JgIzcRA97HKhGWXBhZem0YCMmDwnL7+1yJC+QVBmSdUv04Cdvr6X1s+6IUB
I8XqEx3gmqXzgEIgME4q5Tu4rysx6OZ9ZAAMCEmmSzBvdXsgDwzGSNHNdtdq
eXtgA4ARYruFsjd6wLABwAjR3QJ5G0LSeW0AUSAJPAVMcwWIvWyEfvLaAKFD
5BgMBtExl883uuCzygMYcl1Cx2AgNBcz38/mKgg5HYnBNNaPBAOm46Ld0sXK
qhYoeAzDmwIdK5i3homxnKpBjcb6nwCmo5DVti5cbv0AYOywjn7rzjwwmZMN
BCaA6ShjsjNOFU3xYFTYroHL3XnCDlcAGBGdTZbdDWAJniEYDZ0vgJs6KAaT
f8Fo6B63vzFRvmtiGYDL0T2VyW+0hFO33gIALkf3FsabYR8jlYJCNBgDpgct
8z1CEMJMtSiOESHOOyH6qGXZO09VTtQTLomHpvNjwcARRvcx0DTss6KEn+Yy
4SRRAj0VpDJ93Ob7gz58ooNiCo88x0QoezJmjdpbAIqMMBg0jPoK1+/XAsK0
VDBkhOrNSD8wE2NyNpDNqNVh+gTfW5jG7j/rw8QSwkxB93E6dBWC2GK/MzGx
DSAUEay6qdBRCW6HLDaA8woiKFPB9OYA1+SwASqSWP9Tgfcbyj7QBDaphJFQ
EsLXk6HnpVnub6rkU7KYpSpz0ruYNt2bYLY5FByZzpEpgjIwgCZD1zb4HQ5m
vKYjm6ZVhQKI6dCzd3qwqazqo9RuCBhiAYPwpkPPKdqDlo6YSC7YKiOn5M/k
Ts/KPdVB55DRIto6Yu9RmGA8OejdTYige7VM5EHjoCQiaftpO7sWhkwI5HH+
T4euUqC7HD4cjZfekzFejdeA5iSEnmh3W56IfpPAs+Kwp8sUkVI+uGK8FrSI
L6DPsilwbcp+Y6Azd6OqugrLBVNRYRQFMebBScK4Ebsw4Aa653zOjn0vDNH6
jlHBS6NKzI8HQ6Fv8Wa+bQExpUq+ToCVwWiicmJ1cWDElD136m7HgJiSIlk+
W7+xmlphKBgxFXV/jA22p2MIVdtX6ZapzKblLMcbBgLTgve7AcqtCOHyX0Ep
UqRDqC+EWWaj88CQKfoNAm3Xuy2LIoQpbbwDTEoBuGT+GNwAYBAI3a9g29YG
2FMUITRpVU6nLA6MG67604Ko2Tra91n6VqVZuuMoi0O8f+pwcj2fxFsuxX6l
XfK2DxX282N7zpGDwaF771DZTAMcKAut1/4YemNKQtPjtDmHWOFGXu1ArNOP
ZQNEt/3azwCclXPMsF7bNuLArIGQcgO6j0EEAHTiHItwHeE/NByySIYFIwRC
wZUpzhGLZCu7+eBsyLTvyp6jTwC0xp1F18MvrhV70MGIv7fv9AMA7TlPX6tc
uLeHayxKPyvQUwKujThPV8oyvnO42iFaSQOeK5e63is53OcH+sKcp7N1WV56
JNBJbrAtkYUmJRUhBTZ9zjW0bpkKO1Lyrwa7viTJKkUHoHo4eXh/E5F2WFhW
R2KsNFhZwfpNYQrrf/KUvVcBrZi3xByTgh6ohSF4kUK3WP85cMZitLntc0Rx
nQ9zA5i56W+w/jNAnrEceb4BjrgAloaYBTNkUvtyUGaATw70C+95IMAWTouZ
MOrIIX8296MD8yFpQoWhxqdAf9izShPauL7l0XN0gGuMz60yiB7mgND9quHu
womPod9lE+Frl8WOolENdMSc2wQPemzSh0bVJXxjlq0GTRFnL8VnfmQ974uk
YEVwgDPgzAZQQgzQyj9IFcI884uxd1lQDbYO5zoIcqaIt5bB1Jc8GHAh5jUQ
sg78WKUD1n8GCK3g521i6vfDDDI3B/rHoRNlG5/s/uKciUEwICTW/zblvEN/
ZGkLcBrC4aTbxlBd/gm3KAuYViPLT52bePRXgqnzx4XBAMAf+galn1FQZ+uM
AENiUe4C1gilNHnY/3kgsw/0WS6D2QoCl8YgKJwJZ20B2MQOdU1Ziqe9Rhgg
U8KFDKBoVgxTVLzwtWqphCGYI0KfIwFgiu260vQrOIlBOttM1QPeDUL+WWLO
kgAL2/omhiohnJqxQfiVImx2NzKa70oUfGYJO4/la8i7rX8qorTTjB9Avtmo
zfk3y1xXGKZ9Bs5KcaYIqFFb2g9lKixO56wI1zc0BBUb6qTVskXtTEcBGDKS
5HlOZE5b2g/FWg+6vPr8C0Z2Lf7IVTwBijSnOGBCd26cx/+dsyXyaTcVpa5f
XxZX/9IXkXE7Ck8haNK4ADLjnOt/5jab3+1WJ7y5duOZNjPnuWC8jv1XysP4
zxHmz+mQVk4wpYqFHPS21aOvbAQFl5rzI9ow7tHwkiclhTP/4ZUOywjjdgb4
uhqzpZu7J5ylIvBo+WD950h5dkvcRvNiobOyqwV0xTYrocm5xc3HvKoGEJUF
1+A8Y/C2SKmweTD0htzQ9dwAs2p8FkY5LP9suYDQh6GimN8zN8duhysobQrD
xXwWdyIe/9eORoHrUVwi7WmI5llWe0MP8dwipPtgRKFarnrhh1iWBC6EvEws
ni1NjJsFp0L5i9dGG+WX029EUIh9Zovwl3ZC+c0Lh51ViH0vG9vwPCWAYBzI
y3fA+5s+98WFGFMKuvDp5BcSdT8ZU1xB6btQNz934eYArjzjJEkWxkPrM2PY
NQrf982XsBc9hmuJH6NEpShg2FHOcOr+GO3Re3bdJVWnijrqk8KyFt5v1giv
uj9Ie8o9xcaXSwgzTzLZW9C/yB7rrjPsje9LPMiL1GFaNjPzX8TOPgEHDB13
+fD7nH2et72EIhcjcvPyfzPInnxwQYK6Wv5/73js6gIj8xgFCknoWWLOV+4Y
kuFaLqDZe9iHC5zJhpL5VaLlC4Sr+L9zyr3BJ+H1+UOSqRTJEMz/7JHX7Ec/
EH1l/vxFCZKW495BzlRXnfUsDpj7Z64LrYIzVED/GlykB+YYh/zdsxYmu6CI
iplB/B/M5HXH/RwM+JyzRZi0Mjb+BhhAwPqr3gAFicNfOlt8Jik/KE2I/4Nl
NvRauCP3j6R+ZhGxXX+6UKYgYyqsf8CvbAaEY7++6mUal6SdRgdOkiP8CeLR
yOXZZYBuQR/df8x3L9MpqZALR0PM/yP1nn58kB8F0XVKgES4s5BJF7fEYEX3
+RSp4lqT4ZwXep7xC9EBgPubPcxfLQtkKCxMH3NrEWpJrpOTUtQtlkYlzcPF
C2YuYP1nj/VXq/+Jpshi2TcR3+edOhXFcpdbE+QFauzAWLhy9Gf5JJp4II5a
+CnldlipWv6sVgHTjsAad938Vw1rFouxSjferIy2VSWWCtQyOhto+QUrBjH5
p2kfMouHd7MtILTecquT2qitjEHVJ9jCXF5/ag/NG/EL32xqU1Bb9Q0hug8s
6T2EAWx3MByKYXRBtVGiiFvg9lXMiW8KjtYRIIWKT7AD8wNwAGZtpVieIXr2
G0evgcqHmVunuISXM2sQ+gG7XKLjsAntNgBTd58junf/+UPfYMiJjfUutLKF
GsQMbjAshpIHainGFQ03+8KDNMQrVOxGBlkkbWu74ew6Jaq57g8AW/iBhER4
mwD/LA1ZTYRvPvwTohuCQsnhnZmNGh8qdsfwAZDglxiD0YiW9rng3FZOzAr1
iHaLiEL9WHLt8TLil5BXAaODX3se6ZoTF6jR2u2kdUNd8rzR31yQZh41n+AG
FQ1GBZmdOAugohfpW1vX2Nz33Rg9X8YPJXrewQ2YHM6qcKdeRSVRoXyx2gKL
RO86upWqqMUQkt1gYDAakBROOHUvKtIzK4m8LDjnJszXP19ZVCkgJMxVBN/B
sBF0tVm8N7An70U+H+ubln6Kisq55b/cT9YTL4gONb1YeMY544dSFmbLvp3x
pQcsvS1J8v0hVhv3DMqiM6YcRgxUlLr3duSFBeSi7X9AU0jwQlFwNIxKEHAF
7DC6YZlXoW9LxCy2dlr8B+KrmhRRpXEFZIsYSBnQOZ5GWJzrSXH9wAZIImCO
mlVWg6nBSiH85WcB730q54hQGr38b2EOePqKvu2Jnrn2ywfXoPIULYBBnP+r
tdory11VUTR0DvxeosffQXYgT6po/ppBOMApT9v9MZgxO+VAS40VNjsYXyof
PT8DmWIuMHWlIbZ7ldpDekI7eTSx6hy+0fDD0ROZPaennc5A91jUS/Syr2bV
VlLDRCuvTLfA7tRrQYS0cO6YIZVGms42kH+FylTYsb0DUl5433ezaiDpP3At
hjUNwnSuyGM6mlF8R9zUkr951BeGD8P1B9dkWOOAeujUTVLPwuy4NcGbXWPf
x02BxFfmCKOHlf4/uQ70FvbEV0syVx0DCK4PU8oMIgG2gp+pWXG7zZ75YGbi
uzQEGVRwNYRRV56CsYczXQHbPWZJFC5Vvw3J+wGXRmg1CBm4baozhSWXI/9Y
MMFVpSxeJXkHGyBn3Plnrh+F0776o5aSQE1hr81LQivtQ+32GPreVV896EJF
pmRsHukoTrNj2ZWlAbVWat/Q9/I8WYlApF5PHWMqKEqi6rYc3u0HGmJVUoJS
dQa3InXKDjDXbgHWwYhkhN14aed5WsYTvfGnPL5tPhRY+iOHk2VpCVepzVWd
UEEsJJXXtX/mQj1JtXD7eYRzZSUYzRmO9AU4mTqo7dIRLpxXrW8AYfx1hkBu
UNDiqWgygpVhPvVUmPN15jMeXvgz8199/8ovHHRGhHSMSVUKYZSqirYjLWw0
PK5e/lmsOpBNqlKQc4NMnlOxR3DO1b9B7dvocamCkUUXVvgUx4xOQKsf5y0G
a50RvarBlq7g8UWFgofzGShW6toCev7qWx90JVBh6x4PV/d5mFZqDoUZiDC4
DdvWDpfRPj9TXMrGO8anLhmD2p/xI5K4gSUyi+m2baqZC03q2tb/Cr1ThGTP
djgbX6DoeTLUcZI3idQ8jcSahzOtajpT8SJU5y9Fs39+34la9OTaLxb0RR0n
CUQvPZyv5eZCyiIMrPbLnbsQu0jZEickvYULYCJYVyeKyJllwkg0TujKYSif
rKnOkIsTvDSrDn8l335M70j15rA2PjidUqVWvyq6i8sNYBveAEwPrfhduN6L
MYRR5LVaFDkVZKsU+UHJ21QwIczD2IWnZRkNp5mRt9cDsWEEP7eeUd/ZuJQW
SfWtSV00xX0CaUs/4AN73eB0wp6R0JwMvVQ3fAtzKItUFXH9DyL4uUYo1/Mz
Yuvy7sKUaTpACAxdv1PC0M0KZk4q0F+QmFl9QOGDJa38oa3/lVhVb5SDu+NA
35g9lZ+C6If0gkr1ofpmRsBo5UgzPrjOl961KCRM/cnD9yZxq8KRf12aeOdT
VejNQS+p5tkMq+m9Jmh7wAA6eUjLWauIwBBg8ZQ/8KVlDSUZ6YuVtV9pSh3v
1eAMg4q8338BcH2irSaHMt4GnA2p3W2XfIqCpBhprfhMFAa39Gts0Jz22uvR
nzlNqQTn//RpMttTlEZYpdysiGf/UOMflg6GPy0p0icYQVj/E8WQprljyxqP
jhCaQhiqQ2hlCMfaF07Tqcb6nygFuUCkQ5HcW9PUyhWFMQNdEEJ5Y242o5c3
phMw08Jzb/zOgJFhvSr9opVV9iCaeXX2x/4LorubnxdlSlx409AZKHD+T5Zo
zsQ7ICW/DNGQRMxPRG9tYuaCqYzh/q1NLXMrSUlTVe827I9hCk0u08W4pcfo
piBnoDfXqlDaKAqavkH37q1ugHJZIcTDM6GBcpfw55gqBgYDXyh42+v3sXdn
S/QqqWKlgS2Svrd6bcLRZs7a3W7dmJNUkcBo4FOycDe7N1cr164HwzO907Ap
6ZYajgt0lYFr0lbyYdhsCN+KdSqYr+r3b5asGk9HFXz98Oo8QJ/oITXxdqZc
b4ByIyAkakn06PHvKXUSvFSHF3nRShEDjA47rRverR35rYBQuhmEPlTNzA7v
AI8I0LQppmQAxQtgFdfcbuRkpM2RDnlOB3pncAFMljS6i03thNuoAN2ZCJ9U
247cdZXfr2Y0rbcHrKmI4hYo2om+DZ6NHvidaajFLZ3rwu3phYs3A2ogJopL
B6SmQU3w7QRLNszGIt8d2ihu0+wX4eabUZxPShpcERHmQ52rqWQAbDHvV/S6
Wi7zaNa37NJMiic7USKDJPAkcUTTau/2ytcWPgvrwdSVa93Dbgu13kEJjhtg
ijglp5Xe52SXs0+rDaeG+da6ECyeDRsFcs1F8cCImNzwWkZsFfX3fl37b7W2
zLhWau0ikA/L0qEzDZQEV0QUxXQ83yVUrY5qLv06nMNq+baW5ZysjNfA3Ds6
10hhcD3iHzdMzrClLWMnbFTEcVZL27V9QEku3SNwgidHQdUEpSzlVqev3a1v
Ne0HdlepbFToCbRIgE34FLpebmW36EFo1T7gK8mesHHAsFkMC504N/UtTsl4
e+1zeLPyQudR3X6zv9+3v/mYQhB0YhifSWLnZqCXkWvt+zBYQBPDZ3IB2D0K
L9zTbd2PYOrkcqUf6PKZYAIEtMFmsgG2JmQXG5JAp+nigmkgpJ9U99dhthJf
2pFalDZIyuQEAPuQ6oRg+CiRG5nggjgp6cmzpPA5vRQgaEwuyz9eAEtDR3BJ
clZWdZ20QndX1gTKJQSyVoZwpFe7vrx90CuYMGU+5u86BgqfFyyReWQAZlt6
KPlsenAbUxD/b8ZGEws2AFgwaYGnbeeGrV/quibOTq8HArRh0q1NO0Vri8uO
O73eCgUp3AY5M+nmVu23rre5RLqmsDECqSRJ3k34FgTHsZSPxh+jktti61YQ
ys14qRd9kyKXgDBYU1A+7a2GSG3P9Qr10heq7hSzaHTMEZ5De4eYu7qV3RE+
WiQErAp8VqiMbkOwxk5pFNIBzP6Gn1VgqK6ICBm8EeAmExOC3ovYH+zcmBzG
jJ10RAwcJONukOXwVGaSFQixnyxhmbQDr9iYDbmsCfKU3oTJKUOCJmR38XPy
YRZIs7nErWDCkEmicRlfhTljcov9cYpbQBXaz0oSwsTTX1WpUi6XxlCwTW4X
fxkPe25YyoEXpEk5XiYbUJtJJ8XBQbKQhFvDlzPByrgP4tlvl5/mLINoGLhJ
bjdAtdBA2jb9UgQIJlCW5LYBlit/uxA8ftLmFg4DNblugPmBvxwHKN20C2PB
QbLbAMsXnDYAUzQvDvIlNkCmlLl1iC83QJoeJqnQKf+bpj5iA2RKbiVgyw3v
ZC2P5cgXszRLsoQPkCVlZtG/VbSz9PNCQOaUTOYQboD8EKUxIbNMcLmsAGVk
qro9RoR4B8zMHYRBs8OpELJRRlzgV10vhjY6YBhRbs5Q7lRBZWb+MxbP/82J
8ZtfI3out3hY1ghHsszL6yuJPJnq4Bd/hI7IbCiMyU4Ph5EswsEX7Yjey8wb
ypiKVPsh6WPH+WNftWVRqLziYRljdBFy08Bxtzo8AmGgTBA+P2tXN+j3QktY
JvDMcl8J5W+PeBmf27WYKTKToXibVO72F22J3sEWmD5FlhmfvQ1fgvPNFX+H
KDvfKDsqo/LzABL7XFxN29EwxjN9c7JBaNLZDEXagu8bBugV7VhGBQRCp4zQ
Oj//dw7fdwOYmwVAeRqImcC0ztbEFWHPyhZ7KiMcYkHThBuftYsnjqeCVzAM
zp4iLPp7Mq/it12adrw4iOROEO2zP9eaqj+zzKrE80DDt2usgiqb2UpgVOjc
C12EamraGMrYVZomQmL+D29cAU4KG2BaVNqb3Nf/rGpcAlgo2ECX5owjagWX
FPKO/9TIxsEdqzKsFrwy5wq9WcM95Sb8sJ/mOvAcPsDFiSZ63+1IhSm4SOM/
cy1+2MY0b3iM7jJ2wIUJRNRvkVqltIoPKhvHPqYLr1Ktf4soGPcaNuNFKYgK
0+dJLYJyYmaT7YPDLChT6VbnAPdwgy+JVdTzOV2qPIue9+LSGPgk+9D8iCkh
FHpBmKK+VUqym/14DKM4Y+X7bd7k3BRTr4kwSlZk+rRUdN8Oxbix3kUbk15r
sQEMJFLODjOcGcGCT2ocRpme3nHLXHR98efbRMblzwx9v4Vnm33lyPmhFKRR
5ANLb7aJ/+ijW0sE6j+iOnp4WvqmTYVDwBV6bng8rFk698XcXrE8dWK4jvE3
ryTOrv3YNgWxAdHjy+Oi50WhU9myRNrrIHZL+c2mOPFhJMJAl0cqnnQK/OmX
gEU73xG2QmPR5jxmKUIc4gpE+11Qab072YZHFcsxtjZAfJuPfW9+6tlDwCkX
7dSS6GRPgBx2wEHaJEcId+kViOZPGl77oze9Npafcg9UUDg+TIsNwHtPTYIG
vPfj76TGDaqESzFSNhOm5fBa4fF3O0iLDWBIYVzGxYnHDv1ldIXT4VMEF68B
RS0zkiX+bIcJLQ4HVuIKuDjMvEaFUEs7Xmhl2v4VAoIXh2mV3Q2Q0bg81hrB
NoyYuAVa+rTYAEdocZtaTy2NT9CdG7qsRduathIJzMPYFks6WaMwJi+N3Z3i
ySm0cgFS0de1X8RwqVq8N3EDoCVmADjVJhytSGuU8R7EtbhOA5W4AIZAaFMh
qtModORvDiBaSIOVROiIGQSujSUafIHYxSFEG8HDQPRX137CINFqWoMqZgwX
wAFCc12gtAEyl5IfClWbA50hcHeEVrZhQBB0EBhqI2krlCxhAO1g9fwt4W2i
A8zDBRgCzLcbV1UQKc4RvdiEL+5Q1mYDFIgmDwLjW4p6MuOJqMQeuIlpE9ZH
KegwcKH9ShbJbkJF3A3a1Iikd/DazxekW/tEdR/hIWmwS/NK0FI6dMMMgtPV
yVp5fHnQPAiaBLXhAg+AokMkDsOedyiaZsGSTHfAPJEh0EWaSWiPgOgmjW9T
Dft/IHQzYxgU7jcpmoZ1bEAEaCA0H2m1F9ZOEH/ilE1PdUUophoIbRpY98HI
VXAEFsim5uQHrXLv4Ix0nmxXBAQzljSNAYmf0F2YjsOAKpe2QCdHAObsHN6w
qNwG9X3kEAdCUCkcYTrdyAWVJW70WaUaXoUF7J/hIFSaHhD/10XsMDUJZ58T
Y43fQoEiuAEhKprTJZxTCZf7DmCqaUlVioFe+9mCBRUpTxSMcdRx0nvuw358
aHqFxrMGMdChUBIZnha+NbrbuZS5VlZTBziiPfrAhkHhdVhbLoJ3+rMUeSs8
tSgpZB5VENeHORPXrO/x3PY5XwGsRWbXkMv6rBgG0fI3bf5qt9OlrHT0mBbN
QQX6AAaACeRFv3+ILN1gEer3sM3AEIYNMAhESW1FoY9T5ihzaerF3LgPYP4j
9OG1nzaYJYW3fqNxrRQRpoKps1+6YRUcU9oUit76rzN8pwZH/w2NpzdXjpxG
MVCuQyDyaSgVvZzrOzUkfO9/hAx6hAXfZ+vwBhkUq16kx/H94QF1I8PgDH+F
yV8Bwu9V0CgaBPZL+mi+8L/9XU8/zDhgNhjOsAH41COhFe0dj9lgLqRwpH5a
v+PhjY/RDzkALDnT+xbQ006GleT2b4AGhYTkF4eDfUg/e4RioKsTOhaA7qVx
U+woMWTs3nvT3X4DbFaKFEgEXx2uqFKy92beNuNRRkfqfDP7UieigUUz8btx
ZBSegq3OEYpwExaJcH4m9mZ8ze0JxTajI8HZiQ5ZUqY0YsZM2es+YG1qAsZF
mi5bKmFvrGTWoLKhlWo0ODeiMkGWpfK+Tsz0aZKWbYoCRkUKgJZK31B0E7pB
8Ler+gw4B9aZ5AovChlL04fAj1ATlYwWqXRWGKd3znKhVQPrxmMDDAghVtNp
pTJLo6XuCzad9wCfqOYZp1oG0u64+YaarP/ZRN+UkRLN/9onE0ZtpOUNkTc9
/KEauIRjhJFKLT9bxnzpVMMxdyh+GBJqYfYYcpUpTbRZRCHSyiUZiImO8Yqp
zs2oXDz8xYb4m3DkiqpZaX9nAT7QI1WYK9jwlNhnRIFFZ7hM+8LMQpDLS16U
p/Vt8In2e8R3x4Z15xdXLcrJ4QQPCzv/MzKT7H5Jaeadi2ufp5vek4p/ZcYl
qRPTWm36A8eDoJIpv7oeJbWREjMKNtCAqBZ6tlLZT/764UIYa5HPLKIrQKlm
97vF65+SFDPbutu9UWBwbMSzQiu9XPNCq1beEiNkggeEma91Rnrm6VGIf9m4
6OUyoV/Gz6t34pZ4RdGL90rdvnRxinK5cQOYcnXmS9/SU5LIhA0Isb6PTTEr
1ZP5HbD6bEX+tfoT1fvpP+0PrynKv9oNu659zROfbIJw9CRlW/LKsg0rVdHD
4m/SFJNXychTpqiWE9wBGzTpgNmh+fxIcFlIPSIv043O1n8jnhJjHz83u0Oc
n2TPyEmnfhp0wOyCONBQYaJazOt0W62tRUrymM8Kdlr/0qRVgk6obHBQhB48
bPvQttH6d3HxV+EUB87o6Rq99oTE7gmXBrgyBXn6/NToRaWmG/g7JaSDDTBK
2M9Pdt6atkdWZmjeAufHE3nlcf9mv8w2NsAIYRXR3XBibZBt5gZ7ajpa60Kv
ufBER0/46nipB/N7C+SyFI4cNzYFSNXpSq6hWaGwHFK7rNCknK2OBe35LXmR
isw+zbHJS8ZMD5bKo92Tk5dns4qIYkg6aVzFTStMOPaU9G1tzz6YPdYfMmHj
Q6ZqOHP6+mwmldi1/LoviiADpUF3RoUjfUHs1hTf/rhxE/lEMDDS2iyoYc/H
HsJ4NCJYXPw+zKXbjl1cvIHHwvZtEWyAkSKc8qde3g394AEgaF3dVh6+uIQk
fWKpd4ENMEqYjUZQOFVEMYylPXI14ULIEA62M7Qtgt7EYAOMCDk/Diulif7W
aH+qmqtoOjni2qwMFK9COGTkC90hu41aoBFRLaRSDMUd8EaqFjUnugEnlE0u
CBetnlTJWzGBVUf8nQ8bCaAcfD0jOQrALA1zmK8DZhjRQ6KTioFq2MmqW9Ul
g0P1hEueeuEOu7h36JUuT2mijdITZd38UVaMvKaTFQ/H4QbXlXt3vnjt7iuv
7/16QVrTy6+3fNTtN2I42Q7QCpFa5k9ex24UN79JxQ/bXXGb70BJznStWMIG
GC2VpOJkcddqFH/4uMRngp7GDfCLm19kvocW56pXBVZwKWppIE5cnxzEc6Mo
AosbnNU3wA1LvZR1ergr47gJwRaCW0qJH5sUFE/t8ZWjyAani8pa53buK1tq
0r14r4iCjg9T14KSUsFEG7kw4SQreCR/eT2P125uAGaS89+T5TL5AZrTw8+1
UjzppKFbcjotCyrH8Zefz7lbz7rgLr5w2VcI68P3pq2SMUXignfzDWBmBYVa
PPEURtIJNT+hzbIiwlDob3SOMA8gDDc20vlv6vXvWIoSRlv4tDTQSDqh6n1q
V+mOXi0Wp/7mb6/9+kBLSKUtEKgeiZV6w069wk/PBV+U2lVZlcTNWuuh3vrY
YFTEM9+T4nwpF3p6Y+Q4JNHmWoerak/e566tYP+MDpvEEjdaw7v8DeUYIuCL
sTYiWnpVUVWqT7ttLBWxYE20/iUzWpjVDXB6PGQMTsBq/q8Idew39NjGIEaR
CwdbmHn8x626ITtYBGPYAOeca4ZWsBHC5kmAcHo78JohqZ4cwJ5zvPdI4sBg
C1ayaAno06tA1480AgtAn9z13IAJS0ROm0CP6dRWyA3M8GuBzDk1q8pxhIHB
DV4l+ouUBevI8F0Adk4DaHbWBwdnRBCVocUk0AMMXg9H+HPeURCEGy/RByi6
+wB26JqY7qzSLRiON15SIyQp6hrEGLgTXJ73+cEFHi+G6JvRC+7qww17A5x7
omvn8wNcDavIdP/79VpW0zvs3Cc0fOBxE+hkZas5Z3Mxix5cC+HOXacmei0r
BRdHUkcn7kxRkJSm6362ytOlPhtSDj0EAI7Dfcco5pmioJ4q2XUHxPP/3H2K
QqESdOR0vcKL84QB0+J33ayzcGKTc7vnOegIALgV1lXS8kylYNF27+igC5IX
SFFhA4ycoms5nDlPnZnsItdYU57Z/pnLq54wUh4MCNZ1mUUruPeOyNK4/ya8
q0In4+zs8c9ATszc9+EDjBrrg+poKXRbp3tIh/+DX3ZNLvg+m772UaU2avoG
SoHGTpH8TVueeg+I4GeuTzOI1606z3V8lKpdeLJomw9X2mlSM30XglijJ+h0
6J56lRviUvXpClpPf9ddrral7k9rVZgkJBaUkfQciuHGTkmKTreDmFJU9Dod
RRC93PUxTEvPpmjry9oyJDGxh/Q24kCjpkz2hnIdDlzmip5bzouXvtf1IS4h
VZveuUeeXlDYASMm6aPE/3TL5w+vIKylC3ASbMaCYfEaGNyrBy1gxhvjqUtF
2xCFcS43usx1raYC14UFTx2EEWfDbIoMJ0r9tseev+IInJeSQqcjfIht8UJf
bob9OVW3wPkxJ48GWNB7Kqwtorhp8IjLOSYX/FWgfzgVVTd51yurgzOpaLfv
xWp1wZlFVa9ao+CiWB39X9El72SvOitbcO9LIXeiPkp1vNVawHnpBxgGAI0o
yHf1Fk8eMXw6zHDBjTHcMlWfvrut716dPvHjll/94MWt077ylGaNoC9snJge
emYvbgFbQ2vm/rveXO6uZJr8GTzTT+jFj+/H9b6x2uMbKOIFCAtofLDUzRfc
jFUdj8r+N4B4+ObBr9lobyjDKlPYuBMWg+6qZIWx1z5cPKEk/X6OJflviR5T
YPqVh8vPSIRAR4tLVsP8LO12f/c+J1WoNLvA+312tY0mTyVuflLawtO3Zimt
YRSZ85jkf0+/Yrwer7PwmQzW/3jh86FZaWBKlyO8KnsOArFAVH7w66f0fjIt
ClPOF5swgZcu7ow9/npJ9ZRLRZWt5x4szLre9YocfZQShobemD8077UIEFwB
qWQpyi43QOiWRd6Bxw1J71aC6Et6fiakUnWeOgRNSpF3Zm/AKW6TlMuQFGrr
Z6F4XfZcpGMfEn1hk8O9zBueVXUXXADR/QqX1Ju3yQoi/d4r8f9+HtfxZ6Sl
KkQKM1Yp4HP8t8QfDTOTNsDCRY1+cKcCpxtEw4f+7vn6BS+ulmrQmnigAWVH
WbhZkm/oaxWYelxHPcPu+WTIPHnUwrgqAt9+Hj65EX2+V3ED/EYkd2OlKC9x
AYyd7poGoj8DaB6SdSRNPMM5c90eOf40J9NjLKgi+va2XYX52GOHdY8WVj3m
QHuVGFI6eTg9ZoP505+J1Du6NhqxAcaO8117bw3p3uxg0avGTj0XrJcBlinl
/M73qjfpv43b3W9cS1cvAgQd0V1XXJ/i+zz0mbs1SbWn6OF6Ss1CIXxB9Cge
/uWWX435qONGhM7L13R3ohdYSaHHepranyi713mIoGrBFGul/vY9KrcsPphA
46Y6QRSObatH9BYHqVSvQrZMmerTbgm+OcWq7oepYKiqNh+z8wUKrkz7LMB2
aIb3VQjdw1m9/TR1vN66SF0s2RiC7Cm61MqtDgDhUAI6XkwomdHtM0UyGsRp
XQkj0g3SU5Cl90G+0gfSJ3sU1shluZFeL/KQaqaWT5Qz02sGHFyW+NcLn6aU
U7tOJuOSbqfzqR65UNRXBJRp1XNK1ZHaUzRRNfothSYVFuNpjFpnEqoQP563
mfFaSwkG0Hihe/Niet9E2nXZ8GLrWhsd5j+qfG9RQNe3tFSxb2+yZoKjwjs+
Wyim3rTy6w3AtWIFqiBGTDRf6Vl6NlUd3/atNi77uaGTamEM8/ff/d579NdV
HxO85hjfe01xuGnbVSmSeafBWzO/jZJ9WKbOyp1zPr0XpnsTHbg2wkhnblnF
Ntm4Ti2DKfFYVaHWUEnlALavNWD6KyZaoej+zme+S+F9anLdxXsi/Uf6uqhO
Et98nYIFYgV6ACaCIToSfOHR0tWm9KTnjp/gdfuwSX5D59naK+KKOsNyYk8/
2f7E6/Sr2V+m6qDbfpldTOZbbPqdjlGTOs0cRmKMHuaKeNR9i46cidEG1t6o
B/RO9VvvhPeaOBWCkyx71IET+jLWREH/MPsdsZk7nrsVTvn5FlnWUJitFxu3
q+EQARo98Zp/v7ThCX0ej9/9CmouurraptqXV+jtR6RJEpX0NPnNpr8qePH5
hULpVdzpz0Rzxh/fAOVq3JNefKPZcSai83R6eBUMhPhXfJF+54leompGtLfH
MJCsSvOCo5fjmi/MV5bH1f+FY6aU/dV/anrhMq/YR7PlXVLuFs99ZfAsZ2ea
Gz/QSUEJDAPB/zEaP1KqF6lMGYGdP3IanKe0TGmCF0ygZz8ma5VKPSr/TsWf
c6fdAHtWzsmqsm1jkHVlaPEq+TrvUfh3vrV4pTuH+cq6WRb5LSwhBH2mRBWU
/qs6/sMX0jpbXl10flWqeSlMWSoZhHeOZsLr1+O98UkgZU4UkbihICtO9n8t
afnep/ceNa3DqOa/yPhoyHlFSj1NrS0p47VtEZnV3cbmNR6LalKzpQQERk60
7u89Inpt3kEbLaAti4ZTNP9DigNa5lwVTaFiaQenCHm0h07MWpW7+8afMF9V
PPzdN98JtZLFx1/+emsS9ieHTfOF6+s06V/86FFc5uzZsJiNs/ltxdresfWH
xeJoMLqbdiq4Pmx9WsaT/CFPLeSLZPDW9/E6z1s3U0Uf4YcPU65MbZyT8fzf
rYC2ZbODfHuBirZTvOYvIz27aLjZmZ2J+BD03y2ew50v6bsHH0/NnyCLL+bH
6TIo6pUvdqLAm4POTAqPCb9Y9kaj8n/kCLX+636SFnh0ZjmZaBRvSTsllaC6
QMKJdPQ/Q8GaImzG/bjZVaUSvnVVdWFWxTZt+SV9+dtiVn09HyP5zc+ors4s
6Uv67LBpttyzQn79+L1f8Lr5vjLhA6LfJ43R0iSVua0Qad35u/L2K9WvvgS4
OHxDuyR6sX/2A5s+F2oFhvX6LpRKN4BihmRc1jyaSEtv0x0q/KytqHYbIB7j
+sY+aoahv3+z/qWfzVe7+F006Y2mj+gPfxstu0M/tb7l5Avp3HdJasiY7z1y
SXTIhxTzLeivNn4kEHPrHSU4Yj/jRrgtw50ep4KXdNx7HVJmk6U/dRltapPq
faSL5r5RzIeVVygPnIG2jiO1W8zKlyes/srHbUP0Vf2xXG251//4VjD84SPh
ntCDAw8b1oGuIl5vaSjs+u2Y6w3xVOa6scoLRR4VD5OFUrWkvhfPPV+X90cL
idVCuck6qJIbUBsNz7y9OjrFAfOijKtGtpPfKU/LI1Tprvmnn/z3pXOb6zys
Cj8Ph6dsZWhevWHjt3u5d2WLcutxLYr9J8yPyNukovkZzc+9Kq2ilPyJRo9i
Jc3r08oGoikF6ZWveCsirrxn2jUqpvM52ujxI/tcNF2+l0yzjQuHebX87eIJ
3T38OEap8kMfzP1Za6rOU+vB0LClsEo5fu+vQ+0cuLSolBazX7zy6a+08f71
9F1M3d7xZagMjYPkhnjZyvll0U8p08kfTbT4k6/8478lX26W53i9cuJ/QJ/9
/PgvJ3pRnGB7FX1364ABUKh0uquiDn3Y6A38ziVTQqnkGIQ358uUmVu9W69M
E4tm/i0f8ln5oGkpTTK66pisD0+STfZ0NRJjbZcpVak6ksnChx/dlp+zf09P
sZTBHO/srNJk0wFqf5TiQXWVgPJefRVYnSZohFJNJrGYJK0Tt1YZLZiGa/B3
PySeAvd/+OR189Of0Gfv/PGf//2D3/4P0YldR62in67nVpqin9B/uP3JnpR6
vsTQeXBpolWR5kgkw188oC/i+n9PWCOYmTuLVcOKf5ZKC2771rSfKPgH9PFL
5PbfKUwwvvWwf0iH/j9/8b1/R8/9j/TgMf3dw1+bX9BH9PCddf2OjVthEYEt
/e2WleDvn7QBNDbABClT/F/U5Y4VPfz6wXfff3SC0r+oTZJbGg0ZPY7rv2Ih
mAMmVZ3fXdfhmPLRwtj5l/v/0/v07Pv1BvWLVuR1uYKLp//8GVe3ltWZYAqi
U8r4PuxXYxoMARNKPs/tsODDKxSPVqIZa3CMbuPqNfkfj3+Tffc2zbdfPfnz
Bx/9cvHMPD2po1NP/vVTy+7+6x/v3KP3fvEKaSYKU0SffekC2zq5HTfBD15L
U5OO/gJRxQd8pbFdtwXdRR3Q5Ngogyzj4pFEf55sE972rq+d1Gdv8wHM8USZ
/SHRbz6aBzclPf2Cfk3PpsdNZzsvXvjm2w9+syHyIMnNt25Zf0Pd1yaPP+9y
XvRHpw3MQBJ4gmym9qvy9L+wMoxe3l19atcascdFyt1j+lW9Okv26r17P0nD
kTYsq+g/PPhiM3JUavLxMngSbwkuJKnyq+OqEqzO6xVJyugE9cUKAhBTR9NL
qTLhpOJ8qvaMSbw5lOL4HBr5xaefxCO6Vir6Wv7L4rBW//Of/G7+cERu+xGr
eogkfYO092mEkvX+4B5OgSS6X9dPnHSWd9cPBsMmrq9/kwyMUwxkS9GFaPB9
D4620cdn8J0U6ac350v/yz9+TfTr2ezeYu19/sHuT6QL7F/p20bfnd8SxcE+
Xa5IdmrgdMiCTRxP7z9JG0Ce0J7Cqbpd1NZaR78/8nURqKzrfKj4m//l5Rff
+Cf3NBkrbNH46Nn+McRFiujMa+LED+nQ9XVi++aeV2FwE4wTd8u6Lpwwp4Y5
on2ubzWRgw9HBUg5mYdmdnfRmamLkuiJYrNlRNawsHcDbMg1SDpkAvUnYJtq
ifp5JHBZWse+bfPaL1HJ27PAzKRWw+W467KyIn7Kvf3g4fL3xftHvPoX4cWP
6scqNNVSDKt8F9s/OOmLT1cfukMWEL/hPpyM85ADGietaxl5v25fCq/qUEWr
JtnilpRSrxG9+CWtGnrpzwSnX4pHpXVClClXXCw2bbKBKrU/DkOvrj9tDj3l
/sYOVKGvrQSGjuw18RPKWfGZ//ql6GzES6Ccp3Sfd/SA6Ll51QW9YYr/9X60
Vp7SPy0GsKRDPw26vqeNOlCS7ddr+08Ojepm/Sn4AnASpbn73b/7OBU023gJ
yKQ2Kn7HZ+/+p18+pl/7YsZSkecLH/3rP9If3ogffXMeMI1HulNk7nzHqENO
BpOrsNWhOQVCEnRswbVwwX0SbZtlEtbWgsvLHIGrrJcfavr1T+jxO6kbkX5z
7yfmZ/TS4vaJp7+8LWu1HNBnDwVwXW8TPGowEQAcQex2uat/SamtEI0eTb9V
z6Wv7mai7F98RvTAxz3ydb3aPb3dPO96h96ZsfSA0dXdG6yP102v6x/KEOAI
YVdq3T4kaXgqsK6nie01xv0rdX2n+/juLMU9v9PGZE/zLurvF1zsi9AkLes+
X2CFqlBwGHZj3hjf2BCGPtoTRWfyO4Heein6B0k3lIn4I82P7KRf8fD7Yvn4
N62g0HsRJ8JA4CBfkdNbyzc8s3EsC7+vGCLeC+9L/vlas4s13wCpX3lTxSRe
MTvKc31NcAWgASmEs2WJhz/djMBsV0QLvdCe5bUQf63MkxKtsnHhjVA7CqXc
kN9a8aalWBEAXXj1lY0T2Ya/rfjTzze+LNTaHqrMCx88Wk/fXdwTpV2KODeA
71Ho9VsSFgIZAHBZNuI3v3/6s3ghvLz51WJl3RR17f/N45mZpmnbytNLN68K
2hE5xQUALk3xVb3qHNG/RJPoO1tf8+SDYcl4D6lK+cbgldBcipD8n+/pU+eb
44+qvmbYgzzg3SPmNlQff2Fm4tuKiiQu9MX2EcyM0XEPuDR5bDGyZRPTuFsr
lU/vHdmyKdB12ywkABYIXi/X+brsAlPmC3rrt8+/nwIypmB7Ho8ZFxau6s4V
UB6M2TBjK7MZ4ZGH1jb3q0Bs2aBMG4A0LzVV6HAumO9QOS9kquy0z6R6tg+N
aiKVuFVdz440HibhCZ3EzBc7RBz2FIRRpF1lme+tChpMGSuTBvhyqTQ3Qm5Q
F90Udz8jGejT24t4EhsrPt1Ah7pNknpXdA1YEe2nxdzGY0J0ogr1dfZHrH9w
K9b7TUEIfmrlZKUkfWvG/pjmrhTUxPsU1doHqLVv9f4yg/i1J6tRArKupBO3
Pksu6WOM8gW3IsK22d88C7WDpDef/Y14K9U1f76cN3EcvtomImmWyJ/+b/u2
TZG+9tX6+ZqkrlLerkTKzIcXfBvBWNHbprpRp5bOq1pal/7zrx4fnFG0idVB
0eJcT00vXszszcl7tfKbkjtPkc0kptWBXii2ApH2ZANoNnu1lu2s5949bPDt
hvQqjVv6srbCniEvd8cmOdqd5CK0sh7hTdALbm10CB5dzfa1vjYsx0inDcCO
tOZuwUnMqpQSm72+kqCu6i20/X3hZv2cUKrXFheQMcnk4ZWpOI+upjcneI0v
zzVHBCl6Yf5RM011lSYQU3BqPdPLWnbDezZ7Cki5xwYA/SBkMt2T9X6iVXHn
D4/rBZwe4p2d8/uoyq4tXdx1cQOsV/zdZ8OPaGfBy316ihUsINAXJ41qX8BK
kxTVP5nVDmzFPor/tz7+GTWIQ5pV5k2/+krSQ//m1perQRYz4P4BNZUU9//z
j+sbQEpr1Bf3kwD/6/MvMu+Vvk2OiJFb2l3v0Tuf0I4TwvttaO8FYd6lBkpg
IBdWfYg8VPWQlx/U/yrj+V8ZdUu8MikEuefm4rblo/LJTlOjC8Mr5mH0+b54
LcgUtrFmWRpCSs/VZ/q89L+4zcCqt8xr9YfcvPfr7VIkeXpdxhmxHyrCwDAw
5/lU+VAWIq1U+2uit5M/XSfXXG3N6Nts+OrrleuchnZvfHsxWEGrqvFQcDB1
3pgLXtVKDj+ku2SS2me9Png6/MtbnViepiLNz1OrpN/wm0m6oYpQnTJpG0yR
+TSL/1CJdFb//H9/wzMXTaJ56+9bz8aV4m4rWrAvvqjvLy2K6BKsOsIYzAww
dMoUuKRvLC31QO8LnmTgkiVfPUntwKW6LYyTBtSnSGri/fRwLzxb177xvqZa
AHAmnqnP/6pcrvE7f6SC053fPk5rVytjylTMdqsXsCFeqKh0v6cfpQ/b6GMB
cAWqZ7dGW0e3tXB6Pu5a1uZMSC2PUt3iMe6Od6x/KonM4QYAg6UyM55m2v0f
272JTJEOhjknOJesnnHBzNE2SyY3BxiZIp78aRYGL4caAgIgGu5PflzSZ/Tx
s/T8zvBSF2+En95/qOaloekwFz++f+SR3NZgSvewnuRb1i2NQ0wCABBhP5qP
Mv0/b2aE7D1KPQFG2Lj4a2U2+8oLRx7K/+H/2viXfE29GSpNypWY6wIGS7Lv
Tek/vndT9uSllBl4U8xs0jgxyRsujmi9iUBb4x+LO/W5b+1Q08AARMRvyIlC
L2oYtr7yw8ek0gwJQwUzXs2EVNIeyhuJp/T59mcsLH8wfCyRlLRP+0HcjSZ8
MotKMlqFn5pnU7vBoUYzQx8g1gnGR6raifzD03LPVxYDHWXcCPq3SR73YCqg
8Bi3AkaJKB9+qj98eLNaoZq7xcyadz+wM/sfid64czAMqhyqHcCIEXvWL6tX
e2r3pbJKwdB/oIPlQBBvBhPFeTuj+8oZekoHPYD3RlpWb08RDwA5URdEP0vG
MuW4PLQBvttBifeacGQowHGKNJnlHqmXiN4sDi6XkV4AzYQfQc7olAlQH/2R
6MvnDqbBKswvAhOFAk+ihj8jeub3BxsCAjrLwUTRRJ/TE/qCtPCHljkfqwEE
wG14SgFQ+pzP5EELyOhrP0sAzoSmt+lZ+vd2Zg6H+m/ViwBgrBj6qJb7sUcK
QVHuDyaLoKcq0HusOmznV+h5BxPGurpc7nCtA4a8gHHCmp3c4sdUlEcyvX6c
WWCQO4waHt2/eGCOPgyCoGCM0F83tN3/9Kisg0EnABgljQZgJ6w+VuyMICiY
OscyXQIFlWCi2GDq6Y9HrZwO81gBGDRpSEZa3ezYIV+gEA5ME/Forgk3K9WR
audCIQgEJklJ9O58crY/Ei4SHnkwMEGE9E+fn3/ISC3tfO7kzoEvRtoNCcBR
CtoofwuLcp+CtFqqBS1AMwCYIkkWa/0v4eeBUONntlBbLnGBUjgwQcS2pDOr
h2dYpUja7binwQ0Apki1LZlTV7wZ8obCVlKgQB4M5EDtBmtKDZJbFRRv//ja
zwyA8yOSCVQRL4PeNvmJrv3UADg/JuXCUizILedfF8rVe+L7135qAJyXyrl5
5MdF679S83hQQd6Tm5W4AMDUSbooIZ379ajsef+LeGrqyRkKiihg6ojvLlJi
or4H6uYATt+3M6E9YkBg+ry2zAnX7e9VsnpEuJf0QAXEZcH0sZ54XRXHlX7V
Lsx+BTUgkAupMYDSfDDmP2Z1e5jgCrNPwUQpb4zMLgwvSkPlTAdG85ww2gDA
RDnY5Oi9orJOiQkl2z0mAOPh0BiAIoQinv1ixgNhKDDIESHJmEAa6x9kSUnR
DDLQgQCZwokkQv8gWwxSvyBnBI5/AADIBIYTH2RMSety53Ir9AlRdJABlZrL
vjGlvrnV/FgRNHFBPnAVLFsW/1hVzaRWEIQDecLJWDIohgC5woXzFSRBQb6Q
MWgGBvkSjIEoOsgXLwkNASBbDJFHQxjIBbdT/2yVhiY6yAc/n5VhSM5Dn+QN
JuOBfLCK9EwYCppMOvlVWRBqhEA+WJ6UcU3SyE1Hvw4wgUBuhLoThqeCIE0S
hUAgM8r60DdpA1hIYoH8SCZQgQIIkCsmjUhF+gtkCzclsl8AAAAAAAAAACZL
pVDyADLGQQkR5IhZxDuZQ9IXZAi5+j/GIPAPcsTWpj8nWEAgZwKh9R3kDIcJ
BAAAeSFCGoWKpi+QKcLzWaGo+wMBMFYMQfwQZAwLkH8GAAAAQGY4SL+BnDGo
gwYAAAAAAAAAMH0q5L9Azkiof4JsMQEloCBjMP8d5A3WPwAAAAAAAAAAAMC0
ESUKoEHGfJMgggUyRqIHDAAAAAAAAAAAACBDKkwHAxnDlL/2UwDgWhhPROiN
BHlSGVLYACBPBA9x9TuiRXtwiQoJkBE8Gj/SlGoxIZhpDIoE+XDnFVIV5wX5
eWloQaRwA4Bc4B9Hy2dmNbnFqucKngDIh+T6ypnfmA9vIRMB8oH/yWMKLGA8
HsgUqjHoDQNZUtwlerx0gAHIjef/ub4Arv00ALgOmujepwj7gFzxHxC9ee0n
AcD1EEh7AQDA1JHb/S4lERpgQEaE7ViP0wj+gIzxRmmE/0G2OM0UCiBAthg1
C9gAIFsMGXjBTakCrMXJ4VEC2hh+79vXfgqgbwQGBDenoms/AwCuCdqEAAAg
V6S79jMAvSEKmP9tqYprPwPQD7wyCkUQIFvQAQayRmlUQICMYQEdkAAAAAAA
oAkeqWCQMZ/Qt679FMDplMjidOT//ohwBYwWQ8s8fhHQAnASnxB9cu3nAE6E
Ey1LHwKmv5wIEfSTxsrLz66OfWZgDJ0ILKDR8p/eR+0byJhfwX8DOfPO/fo/
1sMBBhnDoYUIcsZpjTJokBl2mQNjWjGJGCjIDEP0fWlekyIQ52iEOZXKIQsw
Tph57zek6Y1Po/3v/LWfzWgpMEdwrDCiH0f3lx6YgFzmyYh1Mh0MHrMle/7h
p6TUnUophxjQyURLErmU0aDU9mlVegqSoGvTAes9YsgjhUmvFBG8uE7IP0Un
9TgRgbwjAxcO5Ei0fhIS6x9MHGYWNurW3F9DRqviFx/A/gHThsVz/r/UH5nN
aKel4vUn/889+strPz8AzorVRI/rj/iWvRPky3FrfH3tpwfAuTH7ItWVInqf
3kIMG0yfteXzyf2vK5HCdiUFrWcFkjggJz6hLz8mo6JdpIhTEBZ9wCAnimj1
e85TBYsWRH+lcAGAnGDmQzMvfH7xh4b8M8iCgUwJhBwwyJgKFaAAAAB6Qji0
VYLzYwdbvU8EpwKcHTHQ6nNbPo+6OpAvDurSIGcCyWs/BQCuh0BSGQAAAAAA
AAAAAAAAAAAAYwajZEHWeJR7gJyxqHcFAAAAAAAAAAAAAAAAAAAAAAAAzsz9
9679DAC4HuI9GqhSFgDn5z4ZD0VCkC1EdI8CdsCFEBLX7QBg69EWD/3/S4EU
+jQugyG69lMAafT1xnCL+xQcEXbARTAKY0UGgHjzp+t/PHqRgsHNDDLCQIgZ
5Ei50F+uAmaxgPxg8MBAzkgo8IP8KOuQpzDCkbLXfjKHEQN+bmDEFJQGT1hN
Xg265sGoaz8DMEnoJcNmM04UDA15BgtuAHAW7ipFX91hJZmKMIURZMcHM+Ff
pP/v67eIYGSA/HC8oufMz9VXZsgGEAA1svcx7oro3sNHg50OnyEVyoEO4/pP
0YryA3oK62c4BH/tZ5AbrGIIsQwHiz8GAOBCMHR7gZxB8BNkjRly/QMAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AADn5/8H/voT9+kK5zsAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjEtMDItMjVU
MjM6MzU6MDcrMDA6MDAnrXK6AAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIxLTAy
LTI1VDIzOjM1OjA3KzAwOjAwVvDKBgAAAC10RVh0aWNjOmNvcHlyaWdodABD
b3B5cmlnaHQgQXJ0aWZleCBTb2Z0d2FyZSAyMDExCLrFtAAAADF0RVh0aWNj
OmRlc2NyaXB0aW9uAEFydGlmZXggU29mdHdhcmUgc1JHQiBJQ0MgUHJvZmls
ZRMMAYYAAAAldEVYdHBzOkhpUmVzQm91bmRpbmdCb3gAMjU2eDI1Nis2OTEy
LTMwNzLw/q5oAAAAAElFTkSuQmCC"

radmap64 = "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
RlVMTCBIRFcsD7EAAAAASUVORK5CYII="

$typhmap64 = "iVBORw0KGgoAAAANSUhEUgAABAAAAAQACAMAAABIw9uxAAAABGdBTUEAALGP
C/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3Cc
ulE8AAABm1BMVEX//////wD//wD//wD//wD//wD//wD//wD//wD//wD//wD/
/wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD/
/wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD/
/wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD/
/wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD/
/wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD/
/wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD/
/wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD/
/wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD//wD/
/wD//wD//wD//wD//wD///9VgSYmAAAAh3RSTlMAZohV3XeqRCLMEZkzu+6f
18db2sRO8e9pa7Qw+eat/dL3+OOCodH7jqaJ9D+SvSCvYM/i/LWAv6f1zfJc
2cZ68Lfzj8jnvv725Ju53+jq4XX66+yk08CNl4fD5daw6bJJ2Nx+coRl0FCd
wUDVLsvttmp8q7iWzpHb4IxwpaPUxWdMrMLKlMkPUReeAAAAAWJLR0QAiAUd
SAAAAAlwSFlzAAAASAAAAEgARslrPgAAAAd0SU1FB+UEEwsEM+qYNdMAAAAQ
Y2FOdgAAAQAAAAEAAAAAAAAAAAAh+63kAACAAElEQVR42u39ieMkx3XniVW8
uCMjogEC6AaFi42mARIgViAIoHHwANGAKEENUBAoqr2DHXttcwczkCXZY49n
luNd7/p4/7YjMuuuzKrMqszKrKr3kdj4nVVZ9cuIeOf3zWYEsQVD4GNfQ/8I
2c/DqLFfCEEMCkcY+xKGAHUfj8LRjP1CCGJAuEU79jUMQj8bgCIDgLhiXIHW
j30Rg+Cxl9eFbOwXQhDDEeJVmv8Jjb08TD92BEFMEojXefznl9aLY+MpBEBc
MfZaz/+0AYQ+HqUnO4IgpgjDK0z/zQm97G1dNwBztRYVcX1oLMa+hOHoawPo
5AL4iKJQ5DUQlwDDXqzkidLPBtAtCBgQtQzXWVZBXBvFNZ//vW0AnaIkXKF1
up/8I0EMiYfdDDdguB7rtacNoOhWCMRRUtyQmDwGolhf/46Dm7lYiCiu5fzq
Jwswk7HbzxfRU+0QMW0cYFRu7Qs+YnJcNTojIRb6KsyAnjYAh916ihxqiK7T
rxDEeZFx84wCLAIaV4j8PUTseOhNk34KgfKb060WMBbuaqsriaug2AxTuwKD
S18qym0hiAKvov+lN1dciU4HOkcP8SpsKOI6kVs+aj7zAzI9LwoyV3J+9bYB
mI4+vQ3OiustsCIuHL+dpgYMEAoXgizTgmCvw4Ptr4pfdWuY8EI5tQylekbW
ADElQGx/hZU3a7IDShugp+DZ+PSkCFSzZR6AowW7cKPgOiIqxNUg62PUHqPP
RS/6aiSweioEyD5Ax5Zgr3C5jXJES2lBYjq4qHjNFmDAzCQaE5XxcBWlAH1t
AK7oXBrhIi4jECxZVqQpQEwHIRDDmnlcrBaKAGt3o4QXSscavkYgdo/oebFy
tHjaDa7iDSWuBceLfEs6BsB0TgIstoPksG4fdvxiQ4I9BTPgqN4ev7bkvaAd
gJgYQYh0MIWY/wliEaeCO9s3qrrcymB+fB5QFwLn6x5iD2tX4vUqLxEXiU+H
P1sc7mLeFpj1wfmmv6r7CqWfH41HGi/GJhdJA2oGRdHP2c2QaoOIybIwciHd
+ChOe6wJcWTsjUebF6sTGEMIPQUS2OVaUsS1sywNlgj2OJEAFybo5B5XCMCw
mFsOFLsnboJg5+apxKeOLFvRUyx3CcfsZYz0fIgbo6j8UwNS26eXliqD1QnI
953vXM9+8EyM0wsWHNMPqGn9E7dGFelnMRcIrFze3CJUbQFG7S1lUWgRoZhe
E/wRaQAdr1omjSBqkHkDgCwRYtcagdJZGFBIzdK/HKE5iO0sRqGdmNzS6VzC
OyvwSjqhCKI9Ek0udzEa1kPVuZ3WQzYKdM4P7ImGm3J7mGCcu2sUsJecP0Fc
GLlxFguPm/VqG7tB+pk9LS2V+W8n10bYMQhgrnhMCkE0ktcJxCLajUh+3AyH
8aJZMtjFbB8Uk9sAeLdSIJhgJoMghqYMfJuYDIB1B1hzsRUP3+NS62Q7uAna
z52CACTlR9wkc+HrKH0UAapj3geU2xvAzDZ7+RCNnF4aoNsG0NFeIIjroKqX
4WhmXlksFTA1Cix2JLVk8waQjn81QSGRTmN9rkYKiSC6oJSDwIocMGMoyjWe
PhG7cf99lXXRYk8y3H3SaU2ryeUxCeIMgAixKPUA3SLuJ8Cg2Fk8sjlKzrOi
4NgvpO6yOvxwJ3OBIK4Fb5OrXBb7ynnPqkNubc16UAgNbrJCjBMUvuokDT7B
6yeIM+LmmXwv0IraGbesoVI21xCoCVbRmy7FSb2pCBPEBaJjJVvjFFqIvqh1
6UHU1QLk9R9NnGAQoMOp7kmzg7hhOKo8FNSwaLm3wdUr4RhR9/XcNsC2Sgen
QZfavmKCJgxBnAmGBRRBlGODQ2S2SRioQLG5BRiWNoCcAgg4vTxaB2lwB9Or
ZSaIs8FDUFBNBIi4R8TSpC1gda76gGjS2o9l6GBylTQdUnuAkTYAgkhI7/cs
ZYNL3UBXoM3js225zsL0fIAOhQA8knY3QRzGqTgPl+kYdQ4AqCrWBsfpCQ4J
65AHDCTdTRBtMNGW6uFVbXDy/auj09vJ+QBdCgG6zgAliFvF2XJuht/KsrnJ
1dK0nhHuPA+R5IAIoh0m987u1NlMr5am3ZZkbG6GpiGeBNESX7YKbJcLT68j
sM2a1mAt5yIKEgQgiAOwoMp6wXID2J6b0yXmdh4O2yTaos0iCA4QJ7d/EcTE
KJKtzPO/2bnebhjo1HxzFvZVAsm8OQCGxWuQgjYAgjgAywOFcX6ybh2w3YW4
h2aPU2JjMvl7Gv45CAYAtNcUmSQmhUG1qJlx27X2k9sAmiuBDBYK5YTXP4si
BkQUU3tPiRtHYTG3mncmcE9OGBSahx1nDZMJp/597rD0XKspXyRxizjIYYDM
zvKaXBpANxcCQMRJDwJj6fgPZYpS0A5ATAoeq4W+Y2BP71bd0xBsJ+ewbOKk
ECxXKExx9DJx08yt0mL7wJ+erl6zkqmeXuvCNiqisJaxuRXjqVmBmAbzQYA7
SbYO/fdnQjaens62rRMeDwfrax6n125J3ChY5v921vv0aoGbB/4Fe2kaYF5S
SpCYBtWywq31LnFyG8Bcq6DuJUzwYgniIoAy/7cjHCgmOF9XlsPLa5h6DJAg
pgqrgoDbZQB6iv10simPrid4sU3wSJkAYjpUS8ptq2jCFKcDmaZdyU7QXKmH
RQSqBiKmgyj9arWtoSUm2U5XNBQDxgmqGNeTC4KbdisPl7KNEddD5QJs35N6
mmkq3SBU5ie5XdVhOGs0Vxj5BsT5kXkHiFtRdDe9OsDyshpcADn9QqC1F9H4
HX1huUziKmAY1AWUAZXU70scFWXVCeJIJOK2HpCZpgXQsC/BBAOWBHEh+GjD
s1tBNDnRvFqtJoC+mBBgZ3wU5BYQw5LPz+24FJ/qBlA3tlhOboZBf6+3IRjr
aVsg+iL3A++of0w0sV6rVBguJQXQFcfFyrjha3FaQBp9RPRFTgPsdNpOtLi+
Lg840YxFD+SigeXOjKtMB0OwFPYgegJQzXbGaUc1TSOzxjVRV3oaliNOVpZY
XBUQ6rQB2OMelCC2KLL5L7Z9ADXRetXdDUBO1Fs5GSdQmvk2zKTRaw3EIOx1
bnrE2an6aBxsB5uUOOrhhmZnA/CTFgM8CROWVlhy+qdpkRGXTiUGKuP2yvLT
zANsX5UTt1EDBIGOfKJ//Lw1TcdtCwAm2QywswHADZ2MfpJbMnHB6GihOkCN
2DpiLE7SB9jaAOREQxXDvHaMcDvbHXEG5CqZxLd8acQpltdsDiwzBcIEL3Io
ZFYVn6RdRlwocu2Uh01RsGmO2tkoBComeYkD4iGgvaEdjxgYudFGX2x4/RLU
BLvT1wuB2ESLlQZFkf4p0RuwqaOxlVCf3oDw2cytCReIq83/7XsDAqK9jcQH
MTQcNk8TsVEO6OMEN4BVP7BTN3oUwjSdM+LyiKLYOEo2U/9mkkqby8afEG8p
/reGA6Zv85UT/bLbRLO54vkU2+w5ivLuZ9OsUyKIi8HvnPBhc8XjFBtOjMg2
ALskEUCCmCQ7h6jerP6bYhRwNitC9oPJCyaIE9nto9/cEvwkR+4qNGx7jhlB
EJ3Z2QDMlk0wST/bYKDznyBOZjcGsD14Z3oTwsvLpvVPECdj4raFr7d3BDWN
SFvAyNc/m8ZVEcRFs6v4sSO5C9NIA0Sl5umJLIZJ1fAE0QPFTpY/bpvWehoN
gYC5IsGx5xQCeqqCIYjTMbuetN3+iptIFFBrM3MW70Y+lSsiiAtH7iT5axbX
hKKA1jJUDiKd/wTRA3pH8qvG4J/OiFCPRuM9QQkAgugFtiOmx3cL/4rJzNyB
mCyU5+FGG4AIom9252nBrgignIouoIswVZ1igrhE5E6dr9/VAZ5IGiA3/zhD
0vgE0R+73f67vQETCbozSAYAm2RrEkFcKLtlfnJXBHAKaYAshls4d70TgAhi
BHYl9WqigOMXA0OspH8oAUgQfbJT9lNnZMvR/e5YyYBK6gAmiD7ZzfHXCYCM
Lr2bC5Z4QR3ABNEvodgO8JmakB8bWxQk+SUMA0wgFkEQ14TEnfVeF/MXIx+9
EGWk058g+obv9tXWbQAw8nwgHnBsI4Qgrg+Pxfb613UbgBm9FKAgA4Ag+mZX
D2QGtaU2Y/sABEH0T01YXdZa+8UoskCOxmATxIAEsWPa188B4GO44CZOcS4Z
QVwNTuxIgjUMAokjpOAMjh56IIirJrYqBJqNpArC867jqfqXIAZit8y/YQNQ
Y80IZUgNgAQxELsJ/oYNQI9ljSOOXINAENeL3bEAmsYA2HESgZpGABHEUOjd
MHvRYOuPJA1qqQSQIIai5riP6x23sDp/1SjSoAwZUjEAQQzD7rFuNtabwozK
cfhxpEEhTHM6MUFcAQF3svsbMUADWCGUHkcaFGKMZAEQxCCE3RGbfs3l1lFA
/sxpCMkUH0ONx4GiEABBDENNwG+t5tdEtdofCoznbwfQItDxTxAD4e1uYG9t
DFAh1u2DYoRwvC4nAhMEMQRQk2IPqxW3qQbuIp5fGVCRBUAQA2EQdyP7a6t+
axyAj2csyfEFuf4EMSzFroG9Lv2znSN0FtW5MgGAkdEMUIIYEtjNAq7pAbmd
DmAT8VzVQA5+iEgiwAQxIDVjAOPKJmC7U3jgfJ15rqAxoAQxJDUqP7AW+Lc1
MT9xtg1AoaX1TxADUtMIACsDwNTJcYWzlQNCJDUwghgSqCsDWi7wWnFQIL+c
IK6EusbflURYnQcwc0B5eYK4DupUvpbztw0J8hLEVRNqzni3GATMSIiLIK6Z
ItY12i8GAauxJ4ITBDEgTSqflQngyAMgiCumaOqzq6L/bBT5D4IgzkLRKO9R
SQKNowBIEMQ5gGZ5H59FAd0o8j8EQZwDs6+eJ8cG+FgeQLBUaEAQw+LsPnWv
vAHAKNPAE5EkgAhiYOxeod0c/x9pCkhyQATNASKIIXFhv9B2lgEYbQMgCGJQ
nBV71z/kSqBIMUCCuEqKAzobZXxwpF5cT72GBDEo+kCJXxX/H8cFcJHmABLE
oKgDUfZKFnycOiCNtAEQxJCYuP9sn/cAjNMLaCj2SBCDsjntZ5d5BRBVAhLE
FWIOLeyFTFgRqRmIIK4NEId+YL4BuEjWOEFcG+GQzMdyh1DnmwKUcJKifwQx
NIdygItm4ITj8YxV+TDC6GGCuDEAD/b46FUboD+jBDinBCBBDIxuMd13KQo6
axEw6BFD658gBsXENjqfcrXq9ZnmgDlFs8AJYmCMtW2iemur/lwbQIEN+qQE
QfSFaKe1w9c3gLMczBpbuCYEQZwCb7ma1+eFnUWcw0c8Y6yBIG6Top3I10YN
8DmEwZxAQREAghiYlqe5XC8BzrOAzaDuuQdFAQCCGByI7fJsGzOBATHYQRP0
6RlG0h4hiFuiZWm/XxzHPs8B55gQQ5YD8UhthwQxOG11/udVAC4gZlMg2ec4
bI++I/+fIAYHWtb1h0oJKEQNgoHmmrGD/UMEQUycthtA1SyUHQETUSQHPUDb
XyUIYqKwVlXAs2oq0FoTgEs+gOxfHcyT3U8Q58O3LrWrNoBV3M/ZYPpPA1Dl
D0GckZZFQAmbd4r1osFQDNAVzEj+nyDOR2y94Erjf105PDkAVKlPEJeMbj/r
2+fDfz01b/DQJKFuOO9IbZQgzgl0COPl+P+G0y+wxzSgKSLiKDNHCOJWkV2c
+OQtbMoAhPbmw2FClJH0xgnijLQRAlsRYKsHMPanCgIRg23Zk0AQRC+ITj29
QfnNvkHbW0uwRJDYTpWEIIh+6BjD0xg312hvRTs5ndhtMyII4kR01257GEgM
3NgwY2cUGicIIjkAnWPucpAgXUAhC6ooIIizUkxk4I5ExqKg1n+COCcwEbkN
JwqNQPk/gjgjTk1k/c8EQtt+RIIg+kHFseU2deWAeMQ+6wkJgjgMO0Ju10GP
Ep1ZUlBWjwpjb0UEcWP49kY3QHVSM8ewh0o9M380DLx7EoIgiD5oNwqwRM3z
cyhi6PBrDbhYdhP5ZPVrSvwTxBj42KECEKoNwGGQMy9OtQEk5tijs5HBUFVF
BEHsQ0fboQBAI2i3UAJyp1b/cwxBQsQYQ1CU+iOIswPdgu5O/UX2/W3lsJuW
Q0QaMApZyIrCgvp+CGIMTOeaW6GEWo4PZHhCKsDFvH8A2omUIBDEzQGde/hZ
TtgtlYOKo8MALB39Pgt/UNkfQYxEcUQBIGfZcJj/nrPH6gB6zFkEoIG/BDEW
8ugC4GKRtXdHFu46myyAECj2TxBj4Y5vul2NEJVHTQMxKmq0ItDAb4IYC3W8
jLdbRv/cESV8mkfhj9s5CILoBWNP8b/t0njg3f0IxGgUNf0QxIiEk9pu1yYB
q86ZAImFEGT9E8R48NNUt+RqaqfrKOBtlMIopqE/RBA3ytoRfgzro8A75gIt
4kneB0EQJ3Oi7k6xHvpzQhxe0Hr+Iw5J9IMgRsWBOD4DYF4w5Vyg9S/Zg10B
vOz8k2YGSJK/BDEmXMTieB88vhhmbnuOOGCxt6TXiaLIR7+fFUgz/whiRByq
U0Jw8rl0jO8sYh5rgwpuXuov0eX2/xw61BT/I4gRYaeX4NRY8Rrr1PznEkJe
BJbcDk1nP0GMTEcJgFpEjRtvCnxp2w9g83ifsDaS5gdBjE93CYAaYm31Xxb1
Fi+vJQQgfSEb/AWKU5QDCILoC91ZAqCGhuWcF/wriD+af1qgLNv9GFoq/COI
KeCCOP1BtrKAKxiAn5/65bixMtzgLE5l8BBB3DYuxB7OYrdvQT+F9xU3pYJw
KRroRBSk+kcQU0D2UoXD9+URFD4fcso/bRKFyLLjGwEAI2kvIIix8D1sAFrh
Pg0Al1e41tqXTcMmClTL9e+zCDjVARDEOLji9OVn0LYV8konf9px1qKOIS4j
BARBnBeNoocIALSPIuYcQFX+Nyf5Bq/S+ieIUWAYenDAD28ADxYuAkQ2Y3Ze
I+wUm5nw47HfBIK4VXqw/2c5jHBgF9GIxXzad8Do+bwyiCMNACaI8fD9iHD7
g058iHIe92e4kP4AjDOCIEYj9BR/N12qeuYbQaH+N7QBEMR4eBFPkuEyq98u
OqiJPQs59xdeQ3z92bHfAoK4UpwqAGZGNrfbMRFOOv5BoF08egc5QY/4k+QG
4E/fePNnFP0niGGQUSAueu9rMIDitF5cEVgUbOZ1Lu1rX0uU2wCwfd0AQRDd
8SIAqtCotanjyc04KGe+LPA1XtgOv/fCT+4ivjX2G0QQ10zAdPhHq+vzbPqQ
Xl8bIEfzAGSyNDo09vCYGwH+m78c+w0iiCvGRHg52dmuXupLoejDAldzH0K3
tSXc2yHZDDkGOPb7QxDXjI/254jvZNHNmu9CT1I8pnURgWOQlUCTw/AAf0GR
P4IYFCki56XWvowAW7a+sz1JcbjQciNxEDGgCGXAgAYAEMTAlLH/MksP+C7K
Yjl1y2gusPPgzgagZRWBt1G6mQeA8B7F/gliaNKKWxzNyQ64m45dFcpYYI7X
Behn/UNYO8z1noVthCWjnyDOhsF10xzSgs+2N8iY/tF9HcFpZ1mFFyQ2RwO8
PbHcgCCIdkAQfLZm8S/wIDGm1d/bSVwEVH71aCznAV3to/toaf0TxFnAiroW
Gwk9ut8Ql4/2Pj5M/3rHC4wf7G4BztLUP4I4EwxRsAI7NOYcR6jKC3NN7138
MH3kAwZ4rUbpW9H6J4izUQpswOCC+1XrD0TOOL7jc3WfzZFFA8nN2PhBiSe1
GxIE0YWirxTffqoNoGwAYgizYllXDHGz96BDjxBBECeh3ayXCt+DOJFXOcNy
1UNU60kHvt5kMP8RgiAGJyKq88hrV+t6LgHgtjx/HuNyF7KnzxwmCKIF3iLY
eAYDQAqpy6w/zJ9tuxXIFEuhYRr/RxBnwUQMZzG3ZT7wVV7ZrojBmbonTZtR
0PkbVPhPEOfAF6jP426zsgAwYFYA8cnrqI86clHWBvbUdUgQxD5cxC6SPKfg
yyoDx0vr3oO2DYV+2RHQlAQkiDNQHJrL0SPzZ4J5uaGPTVtPsg+oCpgghofF
80fbl7OA/Nqg363LohAAQZyB0EGSry+gTAU66WbcNi10TwYAQQwOjJFti+U4
UIVWmmTrj/0WEMTNoscYsMlzfM8DohDp/ynWRxBjIQZv/quh7AcMIpseTJKl
TxBjwc9T/rtFzEs/lL4/6X0RxHjAWSfselGF/CPMTFH2+kmUtAUQxFjAWVMA
Zl7mD0JGUQqOh4g5HnCmQkSCIDZwKwngsyG9EVhp/Wj0MxWZOmMpEkEQK9rP
5+mNXOPv5qaAzW1BGM/qiBAEsYCPpbpRgGFlOqBAXoyQiiQIYinMcX6yAHER
Q4gorKCqX4IYhTDS2ouYh33lUUOcITX+EsQ4jLUB5MnjYHU5gdCeR4yQIC4V
H4YKk4+1ATjUM46zEPUsFNT5TxB1uGBj0NlgHqpcBkZqxdGY/6cRIyAj9T+C
qIFFEZTFosCBlqmHIMZ5aZCfNyqEAi3cpyAgQezAyyq5GQ8hK2T1//imiDGM
EX9zUpaFwJD/1Q5J+4MgdilWC0MHVD17AQ6ihXEK8W1a8qvyA49jtCQTxMSJ
uB76Y31P7QQca/QmIN+IacLbVAlIEFuwrQL52HPfThzp+K/RIPFUCEAQm+yI
YnLba7yOjdaA48JKCphXFQAfIY0BI4g1akRx+8zYeTFi4I0vX4iuwpyzF+6c
vyeJICZM3PH4dX/ZcsdiMWLtjVxa/CYuxP8ldQQTxBLYOaBN7Gt8j1Nj591U
TTzTUiaAIBbsNun117ersRhZhquo2QA4mQAEUQFh54hmsbcsIIxedxNrTns/
+lURxBQwUiBsh8TWI+fb+E7uvLQ4Vv5v+WLqsn6uvx2OIC4WFzDuWuhGxWYD
ObTtpnUgC+y9orA7staboXJAguCitiYG9lTKONGypM+LKOJY7b+rq8CiPuXH
qRaAuG0MbFb/LuAhhpolDuWm4GzLGmFTxCmE2RziXawt/R1NnYwgpoALos47
T06B2pmfZYw3aGWy6ePHNvLDKztvLmMf/hU2qwHWfUPSlFDihnENg7JlTQEQ
YIwYQ/pH/AX+MvkA/oD57OPoub8FRvr5PCK3Gb00JAxE3DDK1q9QFbe/7rVF
i0XlSedVZFCh2NtPI+yUZu/4Kue/NZlcUyUAcbu4pjjfdto+j9VGu3l6BsRn
91r4YloBtuqs12Fja+PUE0jcLCbWh/KLtNo3guYS8Vdm21b+9f3ffIIREaAh
lwbTMq9rrwawr2Jngrg0fH0STCPeXTeMWV7ku2f9J8kAiEZZxAZpjWJSEXZd
q3GqI0UBiZulqO32d09jeS5Ws/SS9a/8jO+mCh/+9vmyvqdocKONmFSVDa9d
6WQBELeLV/VyH8kD+BTmJztgbKj5U/N1z+trAnzEkcR/66nP+CuqBCJuFRNF
fbc/h0dvR4xKZw1dzuBAnKxeNUjjULriR+Fra5cNUhaAuCE8Wy5m7eyeNJ3H
Ml0GyDUgPrMvnd9g6jNkUxHc8S43L9S9WI0fjn1xBHEunMJY2usSQCULf9/h
V7bJaJQK9XMf39u3AYR61aBkAYypALTxWqD63y5AHgBxMxiRlrxGnW77zx6G
uL9KvwztqbQBWDNz+fD0Dee5a6oF4CHiNBKByQLwtVfi4zQukCDOgCkn4wQU
mKdimGb73ymVfsbajWqApqx+EZtDBF6JiRQD6rp4BEcUE6lVJojBkeVZ7Zj6
DPfVv/nkHlgVc+mf3vhy7Vo2e2VDJ6O4UdRk+/TWKySIa8bFhSzHfn0ugQKc
R4RW48Fhf67PT8TJrpMDeI/Of+KGgGXdr9u7spXQAKJtfiwcEPvhOAVFAF9X
Bvg5vjX2dRHE2bAtW/MBMQalWx6OAYPc2/Xn7VjjQNdfe40HIPHlsS+LIM5H
24C37jQRlGWpjbjvoU0cu9zWhRpzxinKABA3xCDSFy7X+xX2gL/Q33iB42B1
G1S68olkKAjiDLjYuzoXV3fKgkHHYf9aEuMKg9ULE4xtlxDEWYF2Or4dCPgU
tnLv2XiHrQ4LLaBt7k6pVYEghqadCeA7BOzcD9uGC2JvM0a7ouJM7R71noUC
SQyIuCmgRWbPxy4dPEXbQr/i3J3BTs7dfmNmu6VKf4UYEPHRmS+KIEalOHgQ
e+zUwdd64ofpb8x4O2Bt5s9O9NPg7z7PkobTkCwniHNRoNpvBOjnuzjrOrYe
rVWcVx2IrbUx7KY/IG+E+q//htKAxI3hBYYA3IGoL4OPHdapU9heTuO8g7g9
itXzwY5k4chJCYIYDQeQxb5QalsXBDcdQoCm7BfClkaAPWdXkBKwrPPf9WoM
qQARN42TvPZM9m90iQBo4DMdyg1A4cE6Y33OKEAUTFUvz0DcyQFoyv8RxMzu
NPJL7BIDTGs//wYWXuaxIfLAsQrxfB0BASFki8MVeZzJ9ndpAyCI7MNvn43O
3/2ivXXMP/pl7vXLjkBEm4PqDGI0rim0Zs9XeSeTa8LL2eR1ZoehAgCCyCfh
1unIcnK8fYAMQ1ppv3o3dwOhd/l38VO8b5s8bN9/LXLjlWG2blxsmHwoJqJS
QhAjkoN4K4vf6WTOK+0LVG2zY8yk32J/my2AfLgbgfi7x9isA8jOFgbg5REv
m2qfZezyYARxlYBQa8d9wFh19DCBM94hTK4eY+Gg3AGYwnuIzcsc2nUO9EVj
7QGNBCaIWbLI9eqI5MvNQCLE+UrlbY7srC+kK6/aPYX4kmq29M9ae7en+pCU
AIibx22sAr+aEuJUsMhzRQDvlBXIvPDBXiVw2O0dSI5IL8exkWLzmZ3YDDry
uIp40AZA3DzryTAHW/HAUhS47JgpNNe6dX0w4t49w8SdznyPvfgFMoqt+GWx
FQGQa1tT132NIK6OtQ0A4naA3skAWiuAUO4ErS13wDdwz5yAGdtd7fr0nJxO
i79wGDZnmm8vchvJAiCIBXq1FlHtVfXEVvrg8x+Wf4FhT+TADtEUFK12Xm2s
+GLvpkUbAHHzuNVssP11+qatAZCdbryLe6cC+31rzxy3O2jUUAixtou98Nne
jKOmDYAgXMCCG6252isT4KDtdB+Vfk5++TnivjS72ON+u+Ncc4gO8f7Kt2Dh
q/21flQLTBCzeeUfHrDwJYZOUbqsE7znF1qLCLUHUCG+u/jMWCwODCJgtAEQ
RMk+CUCnc0ld6JK85wWqIjcbN/7EEOY3FncXbke6AHEwqghUCkwQB8mtfnZm
O8wJAVzQ+CN6AIHgENIzz/JA8nTBh92I5788rzwRQVwgJmBOAar2sl/z9Z+F
gvZMBB3AAlChbDX0qFgLbwXwy9FHlRHEpMmLWOiZzksa2h7ZTmSTwadf3rdl
DKDHlR4yBpMsllZXKmggCEHsw8l09ldTf41sf1pml0HJQz0//TvgubrIx7b1
SudVJySIi0L7mUnHf5Syu6UOc+/f7I3C9a8PHLLDYXSrziWKABJEM2ntC7Ts
yDgd/H5vEVBF76IAELsc6QOMSCSIayEXBhTHh+l/i/cOam30HQT03XqMWe8T
EgniagjxJOU+jY8Plg0d1A/uhut4wYo8AIJogGM8qVPW4eExAf0qchrb8UQP
tAEQRAMK4bTz2f/dobIh2UEdXB3cjUzsFADIIQAqAiKIHbTOY4HDyUN8nTiw
wDoE4TWGAyk7iLajRy/PK0tIEBdB7uCJaUGdXCPj8MAe0v4p3C/xgFxYOs47
rX8n/fPUB0QQO2hkwsoQT9bLZofmhXL07c5gwK9fPDB+XHXz/x1g/D1JARDE
Dk7kCT9Knpwic1oEu28PkHjIRpjzCeKPDjxXQ0lBaNjGspnz+PU9bQoEcavo
Re3viTglFgMG6uH79UJW/AD//sBPqAZpgcaSQIj4IZ5zSClBXAZeYOinQEag
2F+Z43vrBmrZ/LMGl+GvOnQ3E8SNYENvQtkWD2T6e/PCTVutsg0KigIQxAYm
9LgoBO5/MH1iIs6HRXVAMluOaexTHUsHCOK6cYC9CfW5gPubAWdwbK2Bg4zC
EOapvNB+pojnb3zzXPkRi53HHRHEFeNAYF8SGQoChgOlvqFtGF4//OXaSCKv
8uwfgVE6IX7+MFsSsX1jX25TfPMPs5xcBHl6roMgrgYZEfoqz0coDjUE85aj
QXRRSnxwkFrzAlS0i9wCZKmykIcBGdc2oh/xHzx+nXMQlAMgiHVsj4lxN7Pi
QDfB4fr+WWWVfP3Vh4iP0eZ9wIZitXDNXHpU5ZFg7WIXf4P4Y4E/HESPjCAu
mX4VsszBFRnaGACA9j3EPyI+VbtbKOa09rl1oaUWAP7uH2OefuKpE4Ag1mk9
9qcdxaHzXbaKwHF0Ju8kfr+3nsyNw9sXhyd38E1bbhVDaJITxAUjeqr/qfCx
SU7IzY9ebOFwONWuWEeitYeqCo3A8OWLOK8/1iQIShBr9GoTO88bTfIq+e6g
xfM5Edvl6fAe7usGNvmpQJiyQ6msP3YF9QISxAoPJ7f/rTDv5HW2s8DLdcgE
IsTYymcvWh7THvHZxYd3djaCZEZg8K7sbzQYrJpx0VI4nCBuA48tz9pWsDI2
vx0ELIMMWWv0frbDDz+dV20zdXcWP/izn9b0IKvIAKPGz/InxonAMBwhdU4Q
18vRRXm1uP/tf/tvNleiLOxP8znMEZ98hB8/ajFkxMfDsz3n3FnY869+/crO
+CKGaqaEcvh0dSVtx4YQxO3AenQAZs5i8gEirKJ8gPjOh/NhoS8dahGq8K98
2zoo6eZ7jcP/7t0HW5YHYGFmueRorgHqY8smZIK4HXodkvPch1hG2xcnbR7V
W/L3j/9t+d/mE9gv9gYvvnmh8ac497XBAcAX0qMzFl5OPzP/iVJKKD2jRzlj
+WteUvyfIDZJR3RvpXE+r/Ff318udCXQVhvAZ3Dn7ptxnxDHIhTpmzU+33rq
17kk8MHz6WP3v/vfr33HpDX+XvVM/DE+LL/GyieL4Gxyctq3DBHETSGjDD2U
xpQSXOYV/O+zoV8V+uiygDf970vEYLTxsJgXwGsUwcqiHwchNjclJuPi//DX
v/jp3+Md/0Z62P/j6ju5vTg93bvJ4Aj38BcAwHS1CWFRJhSQBAAIogHTWVh7
F1F6EvAl/p8+Ls9hcGxu/X+M0Wmj1lZgsyKYwtDUpufDZ/jiD/6Iz8z+8r/J
D/s6vrr2zTyLyP0xfz08evphtCFtPj+oHrHcdXTr+eYEcXP4GE9dIKb6/afw
J6WrLxGEyB9F/Sf8ID/FmvEPWFt7LJ/7Y32NMPNvPDHv4yvJAuD5aQJ+7PT/
gB+vfsKBjR/8O3ywpmjKP3ih+k7eeBQ5/wTRjIOIvQiC+ZdR3L0XuUp2//Np
wX74gPGdml61mw3w0usPn62LEer0WDgvIagM+fQ5c/DmK29svgLEv23cxMJ3
47yvBHEhGFb0IgkcUOAH+FRaqy+/hfjHf0xr2mw9rBP4b7d+6+evlct7pUni
ZRWx55+mL7/7yru/+90rryRnIrsqHKPK4cafbj6E/vfNKQZP+j8EcQguThfL
ZU9h4LJczf+haUToW7t6ITkT8dF7q1X6fRlIfPJP5QO9iL/DV/Dup5UBoKMK
f/tP9zaXtOMW98T5LIUACeIw7OR0gCrTbZ89fvqpP/6focGgCIj3qo/8YsO5
s5mlc7mY4LN/Tgs/8U/u6Rzb8+UOpZ68iIVI+8H6ina5yyA2Z/r4f/i7cd9X
grgM+mkLcN/gP/vmEeFimQQ0i6d7fvOINrji63eVU3inemDAN/FDfIrzjY5i
i+Lhc4Y1nvJlmpOyAARxiOIoZVCzNZ7T4/1nTWCrQt1NdusB1b/FheyHz8s4
+RCvIP7Lu/cRX4pSszXr3uHPv2Czf12XMIVDFf7G5x+iMABBHOA4bTC/vQL9
XPqjvvNfbguGuD8kryCymRXZk385bwD/7nf378o7ya7/v8jvvtDfrlyTvysT
CP9+fTm38vAPyhQRBDE7TjDXNxbvHM4rmOdmP/zydcQHmBz5b3IZoWX3f/fi
69n8L2ahqiZYrXBzN6sNrI8M962q/ByFAQniIK3kOntBzksBBFbNgv/XkFsS
zD//1cPK9//0QY7q+RCY2Zgl/lf4H7+f4Wqwj4ntznZJ3QAEcYg+1YH2wubF
QO4LfFuCDGW5YMl3/wbx9X/5TL1//0nN77mX8JW3ZtIuFQMK225h8xbWCEHc
OCaeyQT4lyoU6OF+WROgs2B/Wt53lJP47/D++z642tiewjK76MJ8krGLNOWD
IHqjONPg7H/46xwK9MnV/0X5eRC6bE3+dlaFDtzLNu5GFtiDDxfr3VZhgIJE
vgmiPyD2YSl7Docehr+G3/4hO/tvl58axKhQyUWXANQVJusofrT4mJWuv2kj
MU4QRFvEyT4AL8oJnntNcwD+CeKrGJ4sInjOQ45AljI+M7MxPMxFRJt3lLA2
1Ds5AVa9/1Kk6D5B9Ihupdu3B4s2N/Lsld9/D+//fZnn27bfZZkKUOuZPx1e
jJKBEEZv5vs4WMTfjP1+EcR1YU8TCFPVmWz2jRvTVabvre38nQ95poCPaL9e
WgAc8fO8TXgh1E6d4qN/HPvdIogrQ9lT1DN8aUB4iLEpOPcXapYFPMUn+Jfb
3wJEpf/0f1PgHi7rhZWY+xJpXyBRb4IYGn/SOnOx7Myz0LSL/BO+khb66/h/
9/lp+Ia/4ReqAOY/vYvPVF9TS/lARk29BDE8B4dt7sUHyZsb82a5t38m8G8Q
P/1BXtNbdQfORXzOzJ55JTkI5RfWJw2elp8wDyMJgxHEQfRxDQHt8C88eHZm
zNsPEB/7GaqdLj2L+FrpI5TL3cfeCvj4fex1CBJBXCk45ADt32ehYPmj0tg3
xYO/jFsOh0N86BaVwhpjf3U+7nyNDgRxwZwuDNTMnbTun3rfP19uAF7i82pb
kvxB7gh2AvHbP82ArHaCODtDRducyXKBv82PXg0KU4g2bi1yjzkN8fyPAv56
FvC4JyII4mj0QC6Ae/wl4u9erZx6i598iCiK6L/54/oPmftl2O87fIjWktdO
EGcnHCUMdhhIh/7vFoWG37+C+JpFhe7T19Z/6OVq0WvEIs/3oVYfgjgzB0X2
juT/kc3+/2H+yQ/yzK70+d3XUawF+gH/U2V+lKOEDIUACOLsAA6invHdX+PX
7761fI7PHDz9YR4hsibp4am7jyBGx4uThwXW8kuzHN5nPjA6i/lvavx/MWC1
nyZZUIJoh4E4vNSOjH9KG8C/rK95MaDTL88ld0YQF4aKH7y/9SWnBgoFrgii
yFHBNaOfhvgRxAjk/tztwJ8cPAKfpwC8ItZzjiAo6k8QZ6fA3YGdYXCL+ds8
AnRj4zlRi4AgiGPQPK3F8vD1Ws8PYV7JcA3Icy/iKxulPm7INiSCIBr54afZ
F/chbQRxLtSlQfQYCHQPahJ8/xk39hhOlb8EMQ4uYoBYaXUt1byK/kqCdF2C
7+3NcT3n0iQnCGIbr9LhDzrP3kjL3hSlLDf01467XdTHlUw2/8auECkEQBCj
4XR5HiOKGO4nQ+Cnbkiv/CnEGWxmGigJSBCjA3kg7y/uwVevfFhwNVQ/HuCH
eibz/uKKRSBAkAVAEONjmMD/IsyjXKo7kFuuswB4WvvR5ybBecaRZH8JYhoU
+AAVF3h3kJ6AvAGUSQGXDv20y1RmBjt1JglBED0R7A+tUJwNfCoLyCJByff3
bvbNg7FfNEEQFcbG//GZB8kJGDAw5wqFeSRg8gYYYoF/GPtFEwSxAPAX+PUn
PxvwGfz95AhIdKKYvfINIA5beEgQRBd4WB/SOQQPsdAc7R2bPgJOIUCCmBQF
/mmQx5XzbcXk0kOLHysXqQ2AICZHsIMkAcRaYEFhRJjPFCYIYkqY4atzXRYj
EJQAJIgJ0mMzQCMYafkTxCQ5R4s+IxkggpgcTqoQB0wDMGFmjr9fnf5AKQCC
mBIsxgJY1SDo2QApeh7MDPCrPLK3+DOSFghBTAdusVhZ5jBUT5Cr7Iv4Dm0A
BDEZDKBaN/2NHrhILwy1wxAE0RUfz9yZ7wR1AhPEVFCb5T8M40BDOhWCEcrN
CqSBAAQxPjw35+usCahXa/7HOFRLoMY7aGPUAYcSHiIIoi0eRMyCYNGwXKNf
HcpMoByuTtcjM8gKEgMjiLHxMesBS0wLEouZttUOADhoT6AS4gzFhgRBHEJG
rfPEvliV5ruyD0DCHSb1cEvUw8DzhwiC6MCq+I+jNuFbESlCTxA3g4dlxC+I
t/FLjBHfGOKJeHH6YxAEMRjO4uv4q4eP+48BsORjPMGBkosEQfSDe4KI//Wr
3jcApZKDcWfsV0cQxH4AH3z6e/zjAEFAE9XYL44giL0wBMRHsvf1D1yTCAhB
TByGKH4gBjipC07dPwQxaViwuQZooBygIhVggpgyeUgwxmFC9SZQBoAgJg1i
4SMMownoFMmAE8Sk8QpyHwAV6hPELeIQBdoBYgBuoJHjBEH0hhGYB3e9+H3f
DwxPArX/EMTEyQN7ig8H6AQGKgAiiOmjI8a//ECRuU4Qt4jHwaTACIKYMgZM
7gUcQKpTUgEAQUwdjyL5/iEO8MA/Hvu1EQRxCB/R2iE8gAHVxQiC6AsIiiIA
BHHDDKnVTcVABDFxEAcr2JFimB4DgiD6ANIJzYZapFKUGUZPVgBBTBFuEXnA
OIhoxx++QoGR5TFklBIkiAmSJ4M9RMAhZLs8YoxR57EDNG+AICaGyWa5v/sV
YpgNckC7F4eTGSII4jRskZa9/RzxqaHs87T+fzX2qyQIohaFaBX+LQ7WsqsR
v3lh7FdJEEQtRgeMr2HfRcBmHvDX3v35jb8c+0USBNFICO6D3/dcBRgqr98g
jv3qCILYAxToZ0XfOiCm8igMxf8IYtIMOg3cD1RbcCKcRIoIosQNMQhohRJT
LP7hL07xqgji/AxT/TN1fkN5CYLIGFTZUh9kF9CT7S8moVKCyLiYO4AGmdyV
a4DHfnkEQTQSUEoshmrR8zhJ/58giJIsA2xvcxSYv8lXTRDrmNymX4x9FaPw
+h/HvgKCGB0YqEwHclkRm/KIEfx67CsgiLFh8cEgYXqP//0sdxlNeCI4iLGv
gCBGRgp8PMgi9fjvZ87PJrz+CeKm8axAnuz/74dZpK89l7yAydYAEMSNkwcB
42A6PVLOvI84xR6ABY7mlRM3jJxvAMOUw+VHfnXaXYAQyT8hbpfFBtCzlT6v
J3zjlfzYduwXuY//Ef/92JdAEKPhgk1LlPVdp2dCda6qwYyLvvg7fHHsSyCI
0cglgIMl6fKMgbtTHwNEMQDihnFF2gBin4s04n9M/5Qthcm/+Jp0wAhiwuQ0
gO3TAyjwb5Lp7/MscEiP/cnYL5AgiGYkFj0LAJQBhXfx71VyLx7/9fdjv0CC
IOqAxy/PZt/jbwd58K/f/Qf+d8kAoDpbgpgm/iWMH3yLnw/TqGPMzKGlHDtB
TBWTMwChU5mOW0YLeq2gg6mnCgjiCuGvPcNspyQgLKt6ZY/pff/5O2O/FQRx
k5hudborC2DWo+cQptwuTBBXDIsdNoA4kLKfJw+AIEbAA+IPQus0IHuPpD0J
4mrguQgoINKyJojbQ2clUPwK8QYtcAo6ELcOx/+CryHeRby9fhhNVg9x6/h4
77cvRESYsGTvULgbNHoIYoULKJL3/4X6u7qjECguQBDXjInZ/49/qJvZ5wBl
iOz2HAOCuBXKACDwmdwpA+DJMIjSqWlL+REEcQIasai18gEDr4ICQZCcN0Fc
I2C5rdfq86ucoGplAtx5OPaLIQiiE1AKAdcGwsWy24dhmwrB/+cnl1nHb24w
9UEQFQ4x6Np1a1arXh0aFiyzC/HMYENFhiVOW6uYIIbBFM4HUzQo9biw+no4
tK6f+SI/3v+EF1lIFKgQgLhBuEAVUNlYGwD0cc2eh9i8ro1K36smfrnn9EX6
AARxe3h8BfHTd+41DOtQds0z5nsO9iJvFJ7caIK4IKoxYH+D+K/11b9+Yz6A
Wi8RKuI8JWgeyzzup99pX5HKDglicLxF/DJ5ALEhvy/Wl7XbGBcIYb5G7yH+
w5t9x/002RIEMTxOCpSm6bhlG/X/vHakj8R7H+P9+3Rk9w1cYiqFuDTA7jm7
7XpgwMXaLCAPFr/+5wuM+u/gp9XuRBsAcQZwT3GP3DjWQTSZ5b/8w1VE/akh
mLgxQOyTADdi48hvshRYvIbjnyBuDK9nBeKe8retI79JLNgr2gAI4uIIGOO+
9W82UwPuMiv8CYKoQ798D3Ffti1sGgAyHnpEgiAuhaz/fW/fmt4WyVyNACMI
4pJhIcis/3Wn1nn/dbXyt0/8LvOCCOLMmICCfNSWBHwTMWJ9Wo8hfpK/8dmj
jS/7S2zwI24ErbNgHdmoLUG8+9QLHOo3TP0Qrcn7wJ3NL2ObRyaIMQj45bco
qI6jBQCO41/vHf2TPQCPDzbr/qDfZh+C6BFXJI/2R2NfxUWQLCUsJMAhg16L
TYOqIL0cYsI8epEGV7SiwHaD/8xG61+yCFoPDCaIMQhIHaRp3YLc/zZEbOz9
3QA2kwAUAiAmzffvNGja3RI+lAb+3p8JLUMlWxtAoHeXmDIPEe/fvAtgbNbl
aLYAHOhZ0TJXAhsSP5z8K2LS/CwdfZ/NP+a36a56ePL3df69hiBZ0HP7AFvO
9nFq/cwPlGIlJs1biG/OS1WcuM2ANc+z/TZ6drPSj4bc84OocqbEMtm6Wmpd
ARTIACAmjX4z3eOf5ptfS3GRYyn6IEt8frJ88Syt++rQT/9Nqz9C0SlMujIm
DJUBE9PGP5tu8N+iLFj6b7jVlBX/EN/9z4tkCKDCZBNIzcrzX8muSZJl5p+j
dTNOY0GJCWPSKRffxjzjwsiXb1KjhruZ/wrfFvm09ipEZGkDyGrfEo4aegML
QbDSpQLqBiYmSl7t5XDLPyuL+DLDd965xZhV9nw4/hhQlAY/IihxSvbeRVvu
o7IKBlCVBTFR8gEl0w7wcTr4v0LGEX+CGm7thnWYjP8iPkr/jbbcANjMnRS7
87EsGQqHRoISxKhU9v43+F/xJw/xt7kmUFtxe3FrhsVMvfLeTOHnj5M5xHtw
g4pcVtCqcpggxsQp8y3+Gb9NN375OfQ8qeoiUAgSnfsR4ut7xT47ANFRETAx
cbxRDBWiwXcXGwBvW+9yPVhIvs8rL+ZoyL9FfKofD8hFSRsAMXGSv5tjgPfL
QOA8/BdvLQyoMLyIb/7u1ZkH9rNn7/TlABVivgE4fYuZFeISQIT/qSx3gffD
IvYHt9K84ua9fSGH/RB/63Kpn1N9hUDAzicCamq2IiYKBp9u/Vc2rP7nL1nC
ToNqY8GXMz01RjaTQdriyf/8Gcyrdo3qywNiGOfRBFIEISYKokT8cLP87+2e
omCjENoN2wYUjCUHyAPaiJyVO6DrVxrVhFbqAQQxHhbxKa42k1UP8dPLNQGy
as+yo4E1GAMAIWf7tcWAdx79mpWlgANwa/UUxOXhdx3eZ9odolPEiVBGNCoT
Bppeh80Rz2QEoHztpY8v2d4hiP65cxefHfsajqPMZViRbACRu/eygtfuIcyN
yT0+ceZB5wAIyaERxDppedw5/VHOjAdQZSwfNVegQq7Byy2+dn15cyVBYjr/
P8ey72emg1SUqyeIdeQlugBVIUPk85R7WuRWlYX9ZXgva3lo5vKnyToI4DQd
+wRRj/vxpU2zdtriJ5/gv66+EtIGEArjoBL6wujLLr8COip7EMQNEi6rG6Cs
ZcRvN5oYfWUJhBhMTvhj2hHkzXU5EsRRXFgNe1r+v65v4HO2cmZybuDh2JdJ
EBeCvqyG4LS636k/3IuqH1d/nn7khZGvkuwP4mIItpi+NqBjwGcy/Q/xS/zB
DzcuWItyCytKX8Yifopvj3y1/uvLra4ibg0fLyARkJP4VebvIb4UXtmo59Gi
XG4qNzYyrFp9xr3anuuMCWJI4BIa2LJu9395jG/cQ/xh8XLdAhfBZYfmTvHn
b25P5YAgjsbFCwgDlLn/aH6JbzZVLqpsyOjc7exHXv/s0lKrxG0DWMzMxO9Z
wKc/x+gcyCb32og8z9MXOLrGiaANgLgo0g4w8alWFjG4Yr/sZhXLSKbC2DFN
mhBIXBgeZRa0mOy4UB3j4f2p9AFm/PErT499uUQGSCb5cghRoHJxqt2yRatT
PVsJs5m7M77KEUz1jTwnYvrJJWJB2TujcapzrVSruH6y/nX5n7E3AD51tXVJ
GxSxicGIYrJ6Ge3mmHJEMBpGL2vw44chDuDG3iKJyaHKMXmTLGF1ENtl9vOY
Xxx/Rref+voniF1irrRzZoJbgIqh3c7EnNE+z/mduAVOENPDP/NKqbE1sXSg
06rlgZr3CK/AKoU0p28aODnB84RooFTPs/j7YjahPYDFdqvZFYghFDGWhozC
8cuBiDK9PPYlEO2xH2J0997FKVkBaNXhi2ECAqo89CewrA+MXrPRUwHEbDGR
mrgMsrCmVPj5hJIBrVJ6vOwUlDPncqjA+fK2Iy+AILrhJAfP8anp2M+u1ZXk
/P+O8mcYPRlAEJeILuxkCoJa9dX5gGHbTdBcUCZgCsjLUpwjMvz+44kEb9vU
JgOK3SxBHLUcYHsA2w3jyBC7OAziu/ffH/sqSg7b8a6oCzSbNs1Dw6GwGPHZ
CeIULN7Hh69PIn9jDh7jUtRNBEvrfyQTRiowlP4mLpkcUX/09STCAO7QNsTL
/r8ditFygHbybQDEwOhLvwGgrKi/N4VEAD+0AYR6NcPx/H/esmuBuFrUdJLo
x+GEZYCT8GLhkFppbZkAE2MZAGBnU6qiJIhj8Mhyb+D4RVzsYEVSsDUeAI9j
WS9hQiWUBHEsQuhJSIXHg8M9oW6pHw4dDgWbbwBt25cIYnp4eO8jtGjHtwDi
QTcE6kKVI9ae8CLoUhDk0v1A4nbJ/XQ/Sf8b3wSQBwNqtaONI46WhFOY5YjY
JAIok8FPU2aGaIAhSwvPBLSjO7TqUDSP1zjdBsdrBHQ6X4+jO36d8TXaiE4A
5mWlcaximvUrOVRSu9MrkPUDxrhuB9xLWvh18DD6SUJ0ojzGptDG4cIhP2R7
A2CoYITbLcsWRYxR0Egg4lrwE+ioN4eiaWg3zMswUhmORcEkSxvWsi9RUEEQ
ceEU4/sAM3ZgHfHcCzg/diFYHMlqWW5D2mJpgWi0E3j3COIE/BR0QQ6GAYxC
LCCtOo+2GEsFZO15IaJlPBYukglAXDRsApnAnAk4mI0Am8/+EYecm/VdissC
UTlDxUDEZeMmMTHY6RD54bweIorRbO6aeiRvx7ucqWGmYEoSRxCmUdCCbRLJ
fsTKxZraYxDjV1JOBZj6qESigYlMC+aqjTTgiNRtAHToLZGKjKHLZPwxexV+
2rVksqb0kDYA4vKZyF2sYdr+dN3bZCe9ZRFEG9gUooAzjeNU97Ym1GwAE6ii
IohTmcY5xlpFAUej1kERU77iszPtEA7RSBi/H6BkGqZIA7JOlEBNI4EyDeTE
g7hEE6FRG9idt8wlTCMaUQurswDktMMW54UUAS6V5iigPa9brqessVGnXTqe
LhlB9IWzjRUc9syqoWzCYYB6HwAj1QLPMUBVURcJb67hBDzz9B0WJ6BSWE+9
EryfSBnVBDDji0sRx7Cnv0Yph+GsqS5v40RTa6p+mwyBQl/ERSOazzCGuQ/3
vGfyYYWwcWiIlMBo8wkIohf2dLR69Obsue4wTaOa1SdL3UT3K4JoB+xJ34rY
Rre/Zyaqt23r9yU9kSIKgjgOVZMDcLKya3OWC859h7OAB4cFNQDDGQ/QkA85
ONmQICZN3cnGqsQAq5TDzx6X1/HIgLIfLifXoENmyANYIKkO6BJxtR5AGdmq
6nLcCDN4DMappZQaGibIAFhC8ogXiUqnvOfbSzykg21RIORRApw5FKiwk9ge
H367qC9RmoKqOkGcQNYEhR1Zbo5ol6ewRXz38ZkL3nzssrTU8IdP/QYgSAaL
uGhKD4BtugEGtEcLbGEW+GcjvnXuCzMFMj0JP8DAE9OgnOipAW4BH2NWE3Ey
IJwB3LQATBbfXY/8FaO06uNEJEJUxLtZlXz3O446YJeoCbdxEM1AyFo892dy
UYHLIaT9YDPwL/HLEcrdZFAYJtBqE0PeiHjN9KJixBHFU8PpKWzWRFcKNbvz
ej5rBQ8FsLL/p9hZderBKNu7S7bJ+B0mKN/PgZLtMKgDixQCJC6cAHewhEdU
uehP1a04OZJWj4ln7keuA3ny9Qu7Ze0XGC1ZvcSlo3BO+iCgmrna9Bsb66gD
DKNblliY5CmJDb0bVyQ3iR1bsEgQU8HDy/h0Wv+vurwLMNcw7rYYK9rlox17
lcWa3gRJOiDElSCFK14sLQAUaf032Pqj6d/yAxVBfnjbpKYRGEbflgiiP/id
HyEoEYVo8vXHGsmdnnl/rQ0fvnWw5go4uf/E1eGhUdfV/XQ02Qs/uvBmTT8k
bQDETQEP4ukPciQSR+4z2y33MWL82CRBnA/5qxGL8izKUYsBdrWKaR4AcWPw
EYtemcVRF9yOBcDPrpJEEOOiRm17i6OqhDm7FQCZ+BzjkZCUGb1i5Khq3b4Y
teieb/k/o9VFTZkCpynmSvSCG3cQbhzVANkpj4TxQqJTxSB1Rl414ybj2Lja
u9t6YFkHQIfR85MTwsUvKS5yYXQzqse92/24k8N3yqBUmAFaOvOWeCR59Auj
6PYXG/m4E6OeL0op2KgI1OgZ4uNHFAtYYMkAuDCg282rcNSxnWM1JC+ePXm4
6ZCDpe6VsE7hg1GUkghiBNjIN3sYcwSfKwRmlfQgFuFAhUpmEYUvkcSwiZsg
4qgS+CML8HuM5ZTExYxgBAM576XU6IpFBHEORl6BYWQBboNaqfmwpIRIBz8t
feKGMOO6AHrcPEAuRRAqrf95BUBBVS/EjWHHDXiNXX3HA3i2bEzki8vxAFKO
rltIEIMzbjvArBi9+s6tq4Cmd0Pn5Y9CII5aJ00QnTmmgsWMW+zNR9fgB7H2
tgFqtN9FjM5oA2ObJ6MiR7YNic4cN9IKRs7Fj32bqfUwKMcnEb/Cao56Mk+4
g0UpjJM3lRoEqoa4OLw45jS144r0h7HjbnqjKZDhyz/C5RBjodhywJrGmyoO
cPyWzZ9bwo7b8AVjT+LlaBdjiB2zaCPew/RvKaQsS1llxQpffiyoN564Mrga
2dYL420/PhamPNnn18AiBoWiKIJJBz+CS4veCRECotC5bNmOnbQkiJ4BO/IG
IEbcANJJn6OgYVa9BXnJz0zIX5yJIsQwAwFCzYzmyTJ4JMavWiCIBng4zpF3
Ro47r3vMKWHpyE8r2huNEfMRX3kCOrdIpo85Sh/z5dlqzBqknxg7ZXEmzC1F
O66DH9///sjfdMnhbTIBXBz8yBu1HXFxo+tHeYWH0u33aUu0PFjvF3sTgmGO
ISTb4EZUA2lA6qXhT7Djo5J1ZrgpCrAoQLJBQ1/FqPcaxxgA8kjwN5ipvoCR
c4XpG8kUiCp/MZYjAyUKcRtSIXl+O+kAXBZh6xTvUsSWTjW7k4vzAUUIwCCI
YW+GMOq9FtKtHqKF+OCd6v0Dqy2mrwtI5r5jIqdIXYFPcnTgRuz/WcSbMXWu
BYNbFgB0u1nlto6Qs3Zx7pthVYMUjplbk/McqA5zjXKwZWWUibK6riou8AA/
/NOIV3lmUIydmiU6ohHi8XEbY/x2jYteOQVy2BDh2KWAydnP/3FGR+XyC7fl
ThCgqoQFrMz/xMNbSQFYkgK/NDQ6cfwGIELyxDfvbmeX5YF8WF1IN3J9nV7K
AXHMHr+2MW94kKsBTTKkSuF0wPt/9TWOqV50TjzcylZ3NeSKteMDVFkHd/vX
VxvK0JodYuzjpohzEyesn3xc5y/YGYIutwN879fPj3yhBFFPjmKfUNCfzdzt
qKFbuhQddYY7w0YNApQvde6EyOj9hrujEEHk6AoPylJzDDFRPD7GU2rUssO/
rZHPlp5/HPqEVmNLAsDctk/OzuYid8n3f+97hhGzCXArVUDEpVFWsx/Xu+XL
c17vjsVaNekNLdzr49jDJxYbQM4AbO2jLIcCfMjLX419mQRRj3v8I3fkaGso
fX+3+GCJWdrlK8EQI4eog/FidNkNFqsXK+NuvsPE7FsZZY2mDYCYKAx9OM5B
deWaRqG3EoGru92gFRiDBBXjUjuvRyLivZGrTlyorPsq7uFA/Hxtp/PRcwQZ
OdAGQEwUEE4d56mXln+R5e82gwhrKhkQC80KFAEcoFB9O8JZf2f0srNqSLIu
NwCI+B9WVyRReYn45xAFsAigtbZYxCNbrwhiCCDoI5NpPP9aWeWyVfyx5hGU
i8Hkf9NRiaxfP8DjvbffOu+7VUMV8Sj7gHPK7z38Is6rYXP0r/gWi5l6+MET
DCJ9KkAEO6qKEkFskO/SI9elK6Ly6dcfx81kXINj7iP2Ww+jJpFd09m54eV7
aCJGI0OUVR6UY5Ti2zwk1+OdlZXkRq9eIIglyWpdrUrdKSGo0+E/w/j/envL
AhANyzLvAH3aAHq0DWBDDfgRvsPFvOo3pz18iIsNwM3migncrOnkCtIMJ6aC
s8lM1Ysbsls0IFv1M292GkAbWwsMCsNVb167xjdHWkm5EXA5Szmv8SqOmsyh
/EVXVK8xIBTgBJbdVSBWsYEwBcuFIGbV3cvDkeU0LovhmOe2JSAaNwD/ag4Z
9NbCy/DNkRYS5uqeheCJufea+rmff339passEKp0yOVQzqwlW10cu36JICog
HVDs6WOnfBqWz7mfbK7porHsLW0YfyFib8ffeMM30mpOq3vxrjkzm2+hbMOC
EmmP0MnB0shjMpWiKNzi1ykKQEwCkzwAf0qhqoJ8Fj5c+8q+ZZlMZ8llX0lx
Ptp48lzlj3hv7W2YbwDr7o0uIx4MCxdi9hc8xLlO2MhTVQliQS5UhaPa6mW6
5T2bfXk/3ef4o7WY2L6yIg7gcti8n4uPOFZ9Tdo2f/spvrD2lfzCks0f196I
eZGgxTgvFlruWHr86gWCyATB0oHtO9+PAFLkDIJ7+/E7n/41rpfkH1jexiQf
oZ8wQByty14m+5+t7z4+d1S5GALuaiA5tUx+QNptXf5pSgMQkwAiHGX/Q3mb
M4QC0eK6qBgcyPRFMXOin/ydG82Sdnnv2UiZuqz/FyJaiLtvQBZOTcaPZ+Ll
MkzoyQUgxidr1uS1eMIjxCyJLT4JuBiQdfjezs8X+qjg9ajGm7WhRO1TO8As
AypNWu3zbskSnd0DG/+M4lGpZE4WADE+PNfv3DkpkGZ+kx1cuyb9d7ABOHfG
8j5mZZ6iZn4iplH3quwOzmHRKORGq7JGZCgfz69ZkHI2MToO+Gz2EO+c8hgK
lWFcLk80d1Cix+W18wyeLuUzViRNZqmPpq2nagyQSqdNQKxvADz7SfJ/QXyU
Pxt3rDpBLDmxOJfLSgVzsRYhtlqV+MqpRrCRvWUTuyGTgR8bt69lCsSD2egB
zr6W9fbuq5+Wn1mqBCImATuxTb+841eDL1tKC5w8VtzFsVIAMVv2jRe/vjOE
ys5XMPPBzFTkEaN//PpDKN+AUS6eIHpG5KOMLzYA37LEDfLqdUerBOnCjpVJ
d/j4xT2b3Nq+xudNf4g/y4kBjaWCys/xA2QufZFqAa8OB7cx/m0D42Y6z8Kr
ANHStc9iIkfPFjdoi57if50HmKrkyn/Q/O3VBrCUK8ul0mVHsJ7/RDUveLzJ
5sRA3GJ21/sZ/yrYhTUObV3bHC1X4VDNQMPvnl4BLBeP0NkBQozY/CLd4gUZ
i8Is3KuyECi5STnoOhOSMwnAbmZUCDFhnD7FkoYsB+IC/jux3ADa3tVgQSF3
3UcHsoDYcXhh3es+NgiPGOJ/2U5hyuWjLWOgIP78ROS9Ivf/hDx5xaMoUx+L
oSmcZIGI0REnuaIivp1XIy7LXz22tQB8Pkn9rOh6DBosYBA7q+Uc82y7b2v6
waqoYdEIbVRQEYxj+XsOs6XjCixUNH4eLjHjDjUjiFlZmn5KNDqffBgdvgvL
x2t9rP0Q7zgHHeuBnIah+v8etiuHUGU6f/NrsNwRFqv7z4hsvrcl7whibpwy
L+S6S1hMTg1YUEMQMTJg+amxKBSwlObmHdazTgYAxLCulFWL+fSZsBDRZLFH
NZEtbDsLwAihhHCyfqNLC3zGINzDV9FXJUEetY8AthzC7mchJI+JL17/QC+F
IFoi8eSCFG9W08Bt6HCofYHJK2YMUQHs2TfM8shlIh2aa4tmlCg6T8sX8EmT
uqlVFi38Kz7C31TvSlr6SuQUIOBdYcopinPpgKPDEATRF3BaOjotXJnOsVWv
a5d72kSdTkH8/P0QRHNYr5yrhw8/MDq50Bs/pEdoqOEynf55T2rIBPhc7Zer
fEKoTJWsA5auk+PMVW3AelHCTElAYnycZqc4ogFnWi1b21zR2aj1Tz78o0q/
XsSmAqKY1/+/+Sb9Y7fX+2kljO6IFZhckMiNtvHXWD/cw1dzlhXiDypDP1iX
4yLFfEq6jDMvXTZo2A2mjIlrg88rXaA81OCoKcNpZYdSUL9uOcNfvP3Bf/sv
D77AeK9vg1kf4ftEDL4UA3VNBosuv2HSf8qa6HTim7Tc+SJy4aMElFZkU4Eq
AYkrIHuyAoqqHtge8QBFNTnXJ9d5MxJgAqukRl6eOZhCwDyd5TBrnbcoNwCG
MyWcWgX8bVZQTO6DRFIEIK4BSKYuQnmc6eMi9KqKp0Hyqze67E2MAvlbouqf
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
QmCC"

######

class Time
	def round_off(seconds = 60)
		Time.at((self.to_f / seconds).round * seconds)
	end

	def floor(seconds = 60)
		Time.at((self.to_f / seconds).floor * seconds)
	end
end


$dt = Time.now
$dymd = $dt.strftime("%Y%m%d")
$dy = $dt.strftime("%j").to_i
$dw = Time.now.strftime("%-d")
$d0 = Time.parse("#{$dymd} 00:00:00 +0900")
$d24 = $d0 + 24.hours
$d48 = $d0 + 48.hours
$dtame = "#{($dt-20.minutes).floor(10.minutes).strftime('%Y%m%d')}_#{($dt-20.minutes).floor(3.hours).strftime('%H')}"
$dh = ($dt-6.minutes).strftime("%H").to_i
$dtr = ($dt-1.minutes).floor(5.minutes).utc.strftime("%Y%m%d%H%M")
$dts = ($dt.utc-9.minutes).floor(10.minutes).utc.strftime("%Y%m%d%H%M")
$dtm = $dt.floor(3.hours).utc.strftime("%Y%m%d%H%M")

$sunmoon = MkSunmoon.new($dymd,$latlon[0],$latlon[1], 0)

$sunrise = Time.parse($sunmoon.sunrise[0])
$sunset = Time.parse($sunmoon.sunset[0])
unless $sunmoon.moonrise[0] == "--:--:--"
	$moonrise = Time.parse($sunmoon.moonrise[0])
else
	$moonrise = Time.parse("#{$dymd} 23:59")
end
unless $sunmoon.moonset[0] == "--:--:--"
	$moonset = Time.parse($sunmoon.moonset[0])
else
	$moonset = Time.parse("#{$dymd} 23:59")
end

def isnight
	if $dt > $sunset or $dt < $sunrise
		return true
	else
		return false
	end
end

def isdarkmode
	if ENV["SWIFTBAR"]
		if ENV["OS_APPEARANCE"] == "Light"
			return false
		else
			return true
		end
	# elsif ENV["?"]
	# 	if ENV["XBARDarkMode"]
	# 		return true
	# 	else
	# 		return false
	# 	end
	else
		if `/usr/bin/defaults read -g AppleInterfaceStyleSwitchesAutomatically 2> /dev/null`['1']
			if $dt < ($sunrise + 1.hours) or $dt > ($sunset - 1.hours)
				return true
			else
				return false
			end
		else
			return true
		end
	end
end

def winddirconv(degree)
	cardinals = ['北', '北北東', '北東', '東北東', '東', '東南東', '南東', '南南東', '南', '南南西', '南西', '西南西', '西', '西北西', '北西', '北北西']
	dir = ((degree * 16) / 360).round(0)
	cardinals[dir]
end

def winddegconv(str)
	cardinals = ['北', '北北東', '北東', '東北東', '東', '東南東', '南東', '南南東', '南', '南南西', '南西', '西南西', '西', '西北西', '北西', '北北西']
	if i = cardinals.index(str)
		return i * 22.5
	else
		return 0
	end
end

def median(values)
	q,r = values.sort!.length.divmod(2)
	m = [values[q], values[q-(r+1) % 2]].uniq
	m.length > 1 ? m.map(&:to_f).reduce(:+) / 2 : m[0]
end

SATMAP = Magick::Image.from_blob(Base64::decode64(satmap64)) do |img|
	img.format = 'PNG'
	img.background_color = 'transparent'
end.first

RADMAP = Magick::Image.from_blob(Base64::decode64(radmap64)) do |img|
	img.format = 'PNG'
	img.background_color = 'transparent'
end.first
RADMAP.negate unless isdarkmode
RADMAP.colorspace = Magick::RGBColorspace

# https://ja.ojit.com/so/ruby-on-rails/3795657

CLOUDICON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAAA90lEQVQ4y+WSIWtCYRSG3zt0sCDK0pjsB0wUBmZBm3nBoGHNINtPUK/d
tqIri1rWlgRhhhVRJsYFMWkzujDYs6Bc7vc5r+u+7ZzvPHzveTnSEcoxS0JK
KKEPfTocZAlTY81Gc9qcB4/HGAFv3JOlRAcYEg0CnoEHPIvk+OKdJJd/j2eA
J6t3t7W3oIxjAy4Q39lpQBOXKfBoA68sA8LoArlNdfKP5L9V0Y9uTWCkC9uS
D1lpppQJ9CXV95o61ZVmB2I13hpAcfub14yqr7QGetFEa990XAWV1FN+51gI
U/VOw1SLiLePBYV0rRud+VoLjZ29kR+JfgH7AZboXs3ksQAAACV0RVh0ZGF0
ZTpjcmVhdGUAMjAyMS0wMi0yNlQwNTo0MToxMyswMDowMFfbTEwAAAAldEVY
dGRhdGU6bW9kaWZ5ADIwMjEtMDItMjZUMDU6NDE6MTMrMDA6MDAmhvTwAAAA
JnRFWHRpY2M6Y29weXJpZ2h0AE5vIGNvcHlyaWdodCwgdXNlIGZyZWVseaea
8IIAAAAhdEVYdGljYzpkZXNjcmlwdGlvbgBzUkdCIElFQzYxOTY2LTIuMVet
2kcAAAAASUVORK5CYII="

SUN = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAAA3klEQVQ4y8WTMU7DUBBE32LalPgMdKaBAilVDkOAO8AhjBTS5Q5whsiC
guQMKSzZZ0CPAhAOMbGjgNhud3b0Z3b/wj+FmdluhMKiHTnYR8bM3OS7JBNz
Z+2EXL3aqF6r+VceDSjhgkXMTbnkFHhmEpXnnDCN15+FjazV0lKtHHX5SK1d
OQRw6MrKo+2EW31v/6DoTVtbZmFhBj5aNuph6UMT77sH95W0adowepnuHuv6
4sa8xNyUMWfAE5Ootyyu39c4bGAD7ph+DhpiCcA9xwy65/gn97D2wq4n+ovx
Bv6ToSCm/AsBAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIxLTAyLTI2VDA1OjQx
OjEzKzAwOjAwV9tMTAAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMS0wMi0yNlQw
NTo0MToxMyswMDowMCaG9PAAAAAmdEVYdGljYzpjb3B5cmlnaHQATm8gY29w
eXJpZ2h0LCB1c2UgZnJlZWx5p5rwggAAACF0RVh0aWNjOmRlc2NyaXB0aW9u
AHNSR0IgSUVDNjE5NjYtMi4xV63aRwAAAABJRU5ErkJggg=="

MOON0 = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAAAiUlEQVQ4y+2RwQ2CQBBF39qDhEb0JCea0Sa0DArRKqQMDpssRTwPmqho
WDDxxr/N5L/J/BlY9AeFz5YFBzZASxNSdoK1vRqNarLO2Qt7OysAKzuT63Hg
pHf7A9HjOHAxvlTB6PndsZp7pSHQUj5XYkdJOym0wTApdP6s3x+3ZwtcaUI/
N+Oin3QDmkJTk/raVNEAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjEtMDItMjZU
MDU6NDE6MTMrMDA6MDBX20xMAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIxLTAy
LTI2VDA1OjQxOjEzKzAwOjAwJob08AAAACZ0RVh0aWNjOmNvcHlyaWdodABO
byBjb3B5cmlnaHQsIHVzZSBmcmVlbHmnmvCCAAAAIXRFWHRpY2M6ZGVzY3Jp
cHRpb24Ac1JHQiBJRUM2MTk2Ni0yLjFXrdpHAAAAAElFTkSuQmCC"

MOON1 = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAAAjklEQVQ4y+2RsRGCUBAF91uDBBYCESZUo0VoG3RiBUbQhYEOaGZktCYQ
iA4fnTFjo5ub927u3cHMHwjvLRO2pEBNGa7RCRa26tmH2ljE5ImtJ3Mw9642
LscNezXv6oOqu1fFYuBIuYRjV9cAZOOGKENDzapfiRSAamro9aTQ8bN+ftyG
DKgow+3bjDM/8QTmH1LDDnvKmQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMS0w
Mi0yNlQwNTo0MToxMyswMDowMFfbTEwAAAAldEVYdGRhdGU6bW9kaWZ5ADIw
MjEtMDItMjZUMDU6NDE6MTMrMDA6MDAmhvTwAAAAJnRFWHRpY2M6Y29weXJp
Z2h0AE5vIGNvcHlyaWdodCwgdXNlIGZyZWVseaea8IIAAAAhdEVYdGljYzpk
ZXNjcmlwdGlvbgBzUkdCIElFQzYxOTY2LTIuMVet2kcAAAAASUVORK5CYII="

MOON2 = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAAAgElEQVQ4y+2Ryw2CUBAA51mDHCxET5yoRorQNiiELqALDyQgPYwHkUQ0
vGDkxpw2m53NfmBjBcJnyoScI1BThHu0g5md2qjamsXKEztvpqCDsp8XrmoK
o6CXeaG0GaIX5XvFbumVpkLN4TnSSPXfpeNn/f64Myegogj90h03fuIB3oFg
2/9mWpYAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjEtMDItMjZUMDU6NDE6MTMr
MDA6MDBX20xMAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIxLTAyLTI2VDA1OjQx
OjEzKzAwOjAwJob08AAAACZ0RVh0aWNjOmNvcHlyaWdodABObyBjb3B5cmln
aHQsIHVzZSBmcmVlbHmnmvCCAAAAIXRFWHRpY2M6ZGVzY3JpcHRpb24Ac1JH
QiBJRUM2MTk2Ni0yLjFXrdpHAAAAAElFTkSuQmCC"

MOON3 = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAAAfklEQVQ4y+2RvQqDQBCE5470Et/DNzDxnlwErcQmaQ4fw1rwS2Mg5ufu
AknnVw4zy+6OtPMHzKuE1UlOUqPWLNEJ5IzAhQHw5DG7ZaQn40gDgMeGAxWQ
YZm5c946nvNOVzOp0OFBCQa+Jb7S56PrpKPjb31fXLkW1yUUt/MLbuw3ZODd
jP3HAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIxLTAyLTI2VDA1OjQxOjEzKzAw
OjAwV9tMTAAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMS0wMi0yNlQwNTo0MTox
MyswMDowMCaG9PAAAAAmdEVYdGljYzpjb3B5cmlnaHQATm8gY29weXJpZ2h0
LCB1c2UgZnJlZWx5p5rwggAAACF0RVh0aWNjOmRlc2NyaXB0aW9uAHNSR0Ig
SUVDNjE5NjYtMi4xV63aRwAAAABJRU5ErkJggg=="

MOON4 = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAAAbUlEQVQ4y+2RwQ2AIBAEB2tQOsEGaEYqsifpBIo4H8ZExXDBxB/z47LD
ZQE6P2DKkVgCDoisJqk3iJcsJ0m8FreX+KFM98TwMALj7TwR6oIrlrq6oPIU
YpGIVV8v3fys7x+3MAMbq8mtHTuf2AFUpUuEYu+AZwAAACV0RVh0ZGF0ZTpj
cmVhdGUAMjAyMS0wMi0yNlQwNTo0MToxMyswMDowMFfbTEwAAAAldEVYdGRh
dGU6bW9kaWZ5ADIwMjEtMDItMjZUMDU6NDE6MTMrMDA6MDAmhvTwAAAAJnRF
WHRpY2M6Y29weXJpZ2h0AE5vIGNvcHlyaWdodCwgdXNlIGZyZWVseaea8IIA
AAAhdEVYdGljYzpkZXNjcmlwdGlvbgBzUkdCIElFQzYxOTY2LTIuMVet2kcA
AAAASUVORK5CYII="

MOON5 = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAAAlElEQVQ4y+2RwQ2CUBBE50sLEkMhcPqJhiKsQYqANujBOjxBCXrSRANS
AuR5kkQ0fDTxxjtNNjObzK408wfM+whfiUJJpXJzd24gpgYuXIGK2GX3qQE4
scFypmI5Hsh40rLCAumrYzFIhL3ytDUH3RSNB5wMA2WvOu2xClRMK31kPam0
+6yfH7dTJKlQbppvO878xAPtrVzCEFDlVgAAACV0RVh0ZGF0ZTpjcmVhdGUA
MjAyMS0wMi0yNlQwNTo0MToxMyswMDowMFfbTEwAAAAldEVYdGRhdGU6bW9k
aWZ5ADIwMjEtMDItMjZUMDU6NDE6MTMrMDA6MDAmhvTwAAAAJnRFWHRpY2M6
Y29weXJpZ2h0AE5vIGNvcHlyaWdodCwgdXNlIGZyZWVseaea8IIAAAAhdEVY
dGljYzpkZXNjcmlwdGlvbgBzUkdCIElFQzYxOTY2LTIuMVet2kcAAAAASUVO
RK5CYII="

MOON6 = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAAAg0lEQVQ4y+2RsQ3CQBAE5+kBi0ZMZEduBpqAMtwQES6DAPQuYkgg+Dfw
gOTMm91q56S9g0UzKEwtK/bUwEAfYnGDnaOqVzXaleLVIy7YejG6/gwc9QmA
rXpIE6uMqJPpxC1zJkBROTAkU8Mmc96XNnxVunzW14/bsQXO9GH8teOiv3QH
XX9VzO0wTyMAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjEtMDItMjZUMDU6NDE6
MTMrMDA6MDBX20xMAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIxLTAyLTI2VDA1
OjQxOjEzKzAwOjAwJob08AAAACZ0RVh0aWNjOmNvcHlyaWdodABObyBjb3B5
cmlnaHQsIHVzZSBmcmVlbHmnmvCCAAAAIXRFWHRpY2M6ZGVzY3JpcHRpb24A
c1JHQiBJRUM2MTk2Ni0yLjFXrdpHAAAAAElFTkSuQmCC"

MOON7 = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAAAj0lEQVQ4y+2Ruw3CQBAF5+gBi0ZMxJG4GWgCynAnVECEyyAAnVMikiGx
EJjPARKZJ9vVe7t6uzDwB8Jjy4IlJdBQh5SdYGWrnj2oySonL2zVkxGM7k2O
3xvWqm66Kqqre8Wo5ygBaLpqy7HrvDRk6Ruamz0wY3Ldlgk9N3wUOn/W549b
MAV21KH9NuPAT1wABsVS4mTqqMsAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjEt
MDItMjZUMDU6NDE6MTMrMDA6MDBX20xMAAAAJXRFWHRkYXRlOm1vZGlmeQAy
MDIxLTAyLTI2VDA1OjQxOjEzKzAwOjAwJob08AAAACZ0RVh0aWNjOmNvcHly
aWdodABObyBjb3B5cmlnaHQsIHVzZSBmcmVlbHmnmvCCAAAAIXRFWHRpY2M6
ZGVzY3JpcHRpb24Ac1JHQiBJRUM2MTk2Ni0yLjFXrdpHAAAAAElFTkSuQmCC"

ONCERAINSUN = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAABh0lEQVQ4y5XTvUvVcRgF8HNTLgUapVCaBA4J0WIUBRGUUFBbQ9Agd4jo
L2jpBWoqSLDGIAhBKGiwiLAXbAmHaoqgaOhNehGHcmkRJP00XFO89/7KzvR8
z3POeR54+CYF0K2S/4HrNOJXFTpmMvPv1Eue27hQt9q9UJVcNNHYcNScW3Xs
PjwsmtHnQKLNBWNeG7Y30eW41Y3l7fbbZrsPeOeFGfPON5aWnPDJEo4kiQ3G
cLBevsYo3rqs4rRxjFWX0Gba43rDIAaUF6dVzLlvnebEPd8Tm73yzcmqYId5
d5SWRZwCP41642ui1bAH+qrNc9hSt+RHt90wifHahe76sTy/uliSWOuJeTuX
t54W3LHa7cK1pfeqJO/TbX2RoTSZiWxdnrELA4UT2v0yWEs+MutYgeEs9tSS
m7w0q11ZzyLXo5y4imfqP4EWlcSQaR1JosO0ocRNV/4ctNH4LziUJA7jc6Il
f4Ne/ZqUlTXp15uVwYiRFUqTRCfoLOo31xKlKWeS0lSR4Td5GRZA6NT9bwAA
ACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMS0wMi0yNlQwNTo0MToxMyswMDowMFfb
TEwAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjEtMDItMjZUMDU6NDE6MTMrMDA6
MDAmhvTwAAAAJnRFWHRpY2M6Y29weXJpZ2h0AE5vIGNvcHlyaWdodCwgdXNl
IGZyZWVseaea8IIAAAAhdEVYdGljYzpkZXNjcmlwdGlvbgBzUkdCIElFQzYx
OTY2LTIuMVet2kcAAAAASUVORK5CYII="

ONCERAINMOON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAABVElEQVQ4y8WRTSjDARjGn/+soWElsbVy9JGDw8pBKSfihBJOHFzdFOXi
LLm5aEmjxD8lo9yknVwkDj52m62RCzKHYT+X0f77pJTn9j7v87zv2/NK/whq
GMUkTMXP5HVEgRegMZO35QgNnBI2BeTSsDqU0njhqQMccA9EOQFmJIlV3pim
KldczQbwwC5LBEkAc5KEm20gRSzb4AeWvybhZR+YSFc+Ytxa5b2A38KUE+Kd
MCYj+Phgx2pYJ4Era2cXcMYNAEnarM1LQnny8kgSPTxynd18ZbPITyaBZusf
Imot8sU9SYNWw5ba6Sxo8Ep6si6t5ZlzGgqctEAKdzY5RpILDBw4vjmnRBmL
wGG+Od1MSZiY6bqJO/qxEWeFykJ5eADScc4DQYmWTIXdajDizEpGHMNAa6pX
QDKuVArYMRkqKcsw9AGR/D17XvZUxzr6xYY/xSczUtz31H9DsAAAACV0RVh0
ZGF0ZTpjcmVhdGUAMjAyMS0wMi0yNlQwNTo0MToxMyswMDowMFfbTEwAAAAl
dEVYdGRhdGU6bW9kaWZ5ADIwMjEtMDItMjZUMDU6NDE6MTMrMDA6MDAmhvTw
AAAAJnRFWHRpY2M6Y29weXJpZ2h0AE5vIGNvcHlyaWdodCwgdXNlIGZyZWVs
eaea8IIAAAAhdEVYdGljYzpkZXNjcmlwdGlvbgBzUkdCIElFQzYxOTY2LTIu
MVet2kcAAAAASUVORK5CYII="

SOMERAINSUN = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAABr0lEQVQ4y5WTP2hTURTGfy+Vp1SjCBYKokKJohCoIA4FhRKIdCmii+gi
InQVrJRiuziqdCzSQungH3BQcBVBB9EpS8VBKDj4B4VUpQ7ahvTnkJfbPPNi
8Cz3nO9855zvHu6FDuaoD/kfc16z8FyKtM8DIVjiTcB3eDS76x1/WQ7R9uTc
6Wvr2QUH/eijxM87YATgKfVKJ+W95sGSFevqD2+6zdjdm4woUCOKHKdIlZhp
vnKfb5Qp8ZLhqF2Q/T6x1U40mnhdHW+nD1i17oxD5j3sNb/7xUMA5nznKwAL
HjMmAV+45smWBvv95AcvWrbXB/4Ej1hTbzfSZ9TJv2aWEmlrrvoWwLOO2ddI
3tLWPSTqZzzvqPfUJXPp5DPf/+OJ3FAvpKEFV+3pWBD727ubcQ54Sp4igCOJ
SsA+RwCidT7Tn+6xxw2f2wPWnA3orDUA96pXUxOiKpMMcy5Qp5wK/lbmgMft
Sscda0qyYqUpyctuOJ19uV3BW3Qx+Kctdd4gTjgIxsbgoBN0M3U+FHT4oltS
0QpVYA64RJWV7hMKxuHSsYWuE6JlaC4xWmc5q+APB+sRuh6kmHAAAAAldEVY
dGRhdGU6Y3JlYXRlADIwMjEtMDItMjZUMDU6NDE6MTMrMDA6MDBX20xMAAAA
JXRFWHRkYXRlOm1vZGlmeQAyMDIxLTAyLTI2VDA1OjQxOjEzKzAwOjAwJob0
8AAAACZ0RVh0aWNjOmNvcHlyaWdodABObyBjb3B5cmlnaHQsIHVzZSBmcmVl
bHmnmvCCAAAAIXRFWHRpY2M6ZGVzY3JpcHRpb24Ac1JHQiBJRUM2MTk2Ni0y
LjFXrdpHAAAAAElFTkSuQmCC"

SOMERAINMOON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAABc0lEQVQ4y63TP2jTURTF8ZNWY61iFQniIC5dzBIhgxaETuokaLsUcSmI
Il0UxE0QQfAPLm5OLkJxVQfbRbpVpUXExUUoKHaoCLVgocLHIRr9xSRE8E7v
vvs97953Hi/5v2FAVX+v8DHTvmKwN/ywDaue42A3bNCI0+r2WvJOxZDPHutr
D+/0wHe/41SSuIw5E0Za8aoPmDZp1FlzmFVO9DvjPdaL+GaL1hxv5iVTeKhq
IFG25G1RcBHnW3reA6umXcfdYvGJZaUWwX4vXHPbRyzbUSx+8rSjc7u8tmJT
I/tl2Lf0dRKUvuRSdudIUTCbQ42RHPjj7IpKkmQxydFi2zFcSAzbMNbcnTGT
JEZxsijY7pV1+9RxLnFFLbFgIbHFM2u2/v3OL9WV3VFJcD8xbjxxC1fbuTFk
T3O94kZzfdOJToZEyYRyYlg5UVNLuv4HNUw2s3nzrUQH9z3qMkbbkRqXrqn1
JEu8MdUj+lOw7Z/wbvED2dsEwF0biqsAAAAldEVYdGRhdGU6Y3JlYXRlADIw
MjEtMDItMjZUMDU6NDE6MTMrMDA6MDBX20xMAAAAJXRFWHRkYXRlOm1vZGlm
eQAyMDIxLTAyLTI2VDA1OjQxOjEzKzAwOjAwJob08AAAACZ0RVh0aWNjOmNv
cHlyaWdodABObyBjb3B5cmlnaHQsIHVzZSBmcmVlbHmnmvCCAAAAIXRFWHRp
Y2M6ZGVzY3JpcHRpb24Ac1JHQiBJRUM2MTk2Ni0yLjFXrdpHAAAAAElFTkSu
QmCC"

RAINICON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAABO0lEQVQ4y82SsS/DURSFv5b8SBujRARTGRhMFgwWIaGLgaRCWIxispgs
VoMYmA0kNlsXMZKUhFjaf6GVSGhJNJ+BVn+quvZM5553z73vvDxoOURqC2Ms
MsYwd6S5ipSaeB03q36Y9UUtOtesvWzelDEw6pS3vjnduD1m1rx9NUrcG4se
uOu87fWGNTX1Sxu2gmsHfxsO/TBWN2bZIXvdsuijneGjS3P/5FtRN8PSvu92
NDREffb0i0e/tTQBkwBuO1ptHHX7i/BC+MLGLZmzC9RjMDAAjxXAEXU9tCHy
ygL9LAEF8sARR0CeAtjDOWUu6m866yqYMAAzZsDABLjhk8m/w7VV2Y47VT7h
QOMXxLOfaSY9oxm+Q3fb/RO6FvW/5IF74ASY4Z6H5hviUAldqf7dEHkFYC9U
tTY+AeOQu7GwX+MjAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIxLTAyLTI2VDA1
OjQxOjEzKzAwOjAwV9tMTAAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMS0wMi0y
NlQwNTo0MToxMyswMDowMCaG9PAAAAAmdEVYdGljYzpjb3B5cmlnaHQATm8g
Y29weXJpZ2h0LCB1c2UgZnJlZWx5p5rwggAAACF0RVh0aWNjOmRlc2NyaXB0
aW9uAHNSR0IgSUVDNjE5NjYtMi4xV63aRwAAAABJRU5ErkJggg=="

HEAVYRAINICON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAABNklEQVQ4y82SvS9DYRjFz3tJyW2siDAyVKIWixgsJiIYSCoS/gExdbdY
DWJo/wKDzUC6iMFA0kradGk3cxdJe0vS5me4et2P1o2tZ3rOeZ9znvdLGjoY
P8HWvlaU0psKejLtGC+r1IAONZqAw2Zce5cGGWwJi3VKfLIxuN2mRoNZn5Lk
FYcrztliNGo4BjIhLUUPL8yHDdd0sCMxhywwwxkOVcaDS4/U/zjfEXAalC75
YmygweKDG7e2frSCElqTJLKkvcY0WbdQU8ENk6RNnQkJyEskSEjkQZJYBE4C
E0xLe5rTgZeQU84Lm9aturpzmXfD5p4dTXqGJd/4bU1p1zRCBsk8MNL3zFUt
m/ceCbyh6fbrN89+ZumfiBoqKnt1WZXYBJKSRJHiL/Mj8g9NS5J0EWDDjW9m
BJvAkwsd1gAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMS0wMi0yNlQwNTo0MTox
MyswMDowMFfbTEwAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjEtMDItMjZUMDU6
NDE6MTMrMDA6MDAmhvTwAAAAJnRFWHRpY2M6Y29weXJpZ2h0AE5vIGNvcHly
aWdodCwgdXNlIGZyZWVseaea8IIAAAAhdEVYdGljYzpkZXNjcmlwdGlvbgBz
UkdCIElFQzYxOTY2LTIuMVet2kcAAAAASUVORK5CYII="

RAINSNOWICON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAABOElEQVQ4y82RPS9DYRiGr3NINUesiOiGoQsGC4vFRMRHghSJSWIRf8Ev
MIjBPzBIDAZiIGwMTJbazI1EUlVCLkM5eipVo3t67vt5rvd537zw7xRUGyPm
GCLLDSecB88NWIfNq2/mLaolxxuNv1swZwSGjnpt2bH645F5C3ZXJa1eWXLb
TSds/gmsqLmaLOuXLu2tBXZ8M/pxzKJ9drlhyVvTydaZd7+8b1ldT0ZbvthS
Fwh9dK9Sh5/ZCSlGAFwzEw9mXKsUFImSwAVldm0DBmkH06aBdgYByNLFQQII
npghw3x8iyWW4j2d7PPOYXIDwRFTvMZA+N1hkg6mg0LFVH1JcGwT8EAxjoo8
ALcMBPf8Lldd5W+yxxTYbz+YsqcxcOpCXC942hhoBXDW2W9XrbA2CJ7qu3+q
DxuOmtouvECeAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIxLTAyLTI2VDA1OjQx
OjEzKzAwOjAwV9tMTAAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMS0wMi0yNlQw
NTo0MToxMyswMDowMCaG9PAAAAAmdEVYdGljYzpjb3B5cmlnaHQATm8gY29w
eXJpZ2h0LCB1c2UgZnJlZWx5p5rwggAAACF0RVh0aWNjOmRlc2NyaXB0aW9u
AHNSR0IgSUVDNjE5NjYtMi4xV63aRwAAAABJRU5ErkJggg=="

ONCESNOWSUN = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAABhElEQVQ4y5WTzStEYRjFzx1cmsnOlCRKk/KtNBZY2NDMYqKUNCIkLCzY
KDt7yUL8BbKQnR1FWVLERs2kLGQ1KRrDMPpZzHWZj2s4i7f3Oec9z/O8X5Ij
8Og/YJ6rfLzL0dGqloIGugnawb52bb6OqfxtrANzOWw1dzx/RcUZ2oqa1S5J
lMmvSl3oxkB1etPgb9s1WCRJGofUZKqGvcytYfnVrJhKFNKJtvSgPi3qXi3G
U27WLiJAighxAAYsPgSs5Vv+QYwwbgkXvZyTpN/STrmUMBhiFq/VDBFiVP9I
4OGUBBss08kOcYkG3oHVtDwBhLNqNvKNM0nCRwdmWtwkhTunzVHqqWKBBLeU
ZUrHRH855DFgIft+k5Q6Glw8svcduyQdyFSPcwnFZWYyHl6IUp79A9IRTcBk
dpIgr0xLHDFicyMcSVRyTYqK3LoBxiV8mBJttEmY+CRmeCCUv9Uie7bEkj3v
ptb5BMU2gR81t1UIBPBKeK0xUNBg2VatN/NXYGI6q58a4PEHz2BrWwAAACV0
RVh0ZGF0ZTpjcmVhdGUAMjAyMS0wMi0yNlQwNTo0MToxMyswMDowMFfbTEwA
AAAldEVYdGRhdGU6bW9kaWZ5ADIwMjEtMDItMjZUMDU6NDE6MTMrMDA6MDAm
hvTwAAAAJnRFWHRpY2M6Y29weXJpZ2h0AE5vIGNvcHlyaWdodCwgdXNlIGZy
ZWVseaea8IIAAAAhdEVYdGljYzpkZXNjcmlwdGlvbgBzUkdCIElFQzYxOTY2
LTIuMVet2kcAAAAASUVORK5CYII="

SOMESNOWSUN = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAABhElEQVQ4y5WTzStEYRjFzx1cmsnOlCRKk/KtNBZY2NDMYqKUNCIkLCzY
KDt7yUL8BbKQnR1FWVLERs2kLGQ1KRrDMPpZzHWZj2s4i7f3Oec9z/O8X5Ij
8Og/YJ6rfLzL0dGqloIGugnawb52bb6OqfxtrANzOWw1dzx/RcUZ2oqa1S5J
lMmvSl3oxkB1etPgb9s1WCRJGofUZKqGvcytYfnVrJhKFNKJtvSgPi3qXi3G
U27WLiJAighxAAYsPgSs5Vv+QYwwbgkXvZyTpN/STrmUMBhiFq/VDBFiVP9I
4OGUBBss08kOcYkG3oHVtDwBhLNqNvKNM0nCRwdmWtwkhTunzVHqqWKBBLeU
ZUrHRH855DFgIft+k5Q6Glw8svcduyQdyFSPcwnFZWYyHl6IUp79A9IRTcBk
dpIgr0xLHDFicyMcSVRyTYqK3LoBxiV8mBJttEmY+CRmeCCUv9Uie7bEkj3v
ptb5BMU2gR81t1UIBPBKeK0xUNBg2VatN/NXYGI6q58a4PEHz2BrWwAAACV0
RVh0ZGF0ZTpjcmVhdGUAMjAyMS0wMi0yNlQwNTo0MToxMyswMDowMFfbTEwA
AAAldEVYdGRhdGU6bW9kaWZ5ADIwMjEtMDItMjZUMDU6NDE6MTMrMDA6MDAm
hvTwAAAAJnRFWHRpY2M6Y29weXJpZ2h0AE5vIGNvcHlyaWdodCwgdXNlIGZy
ZWVseaea8IIAAAAhdEVYdGljYzpkZXNjcmlwdGlvbgBzUkdCIElFQzYxOTY2
LTIuMVet2kcAAAAASUVORK5CYII="

SNOWICON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAABJElEQVQ4y9WQoUsDYRjGnztRZlhYGGhZ8BicIlwYBpmC2Bd0aRb/A5MM
jFZhQRRhxTKxq0GYBuOC4IpZQVQ2DgwDUWT7GRR397E7V/ek73ve9/c+3/tJ
oy8reMHSvBY0pztdWe1/WaY4o69bZuPbZ/DpUmGRJC7bvPFCNrrd5oZPlgNO
hmee2KTA9CBgDdgxvNW/51VJmsAekDI8iwolCpwAdaxw8ZqHmP12gY2wdc47
iUhggg+Of872r3evSeUjI77UlhOekaVLvZ9BkWKg6gFVM3YfuCQhsUSJJk1K
5CWJFBfAigmMcQrkJA4BHx84kMjwChwNWs1iHUfCoUWZMi0ciRyPbBmfaoA1
enTo0KMmMY6teJHGpUEDl7SGFR7e0M0jp2+a/8uALB476wAAACV0RVh0ZGF0
ZTpjcmVhdGUAMjAyMS0wMi0yNlQwNTo0MToxMyswMDowMFfbTEwAAAAldEVY
dGRhdGU6bW9kaWZ5ADIwMjEtMDItMjZUMDU6NDE6MTMrMDA6MDAmhvTwAAAA
JnRFWHRpY2M6Y29weXJpZ2h0AE5vIGNvcHlyaWdodCwgdXNlIGZyZWVseaea
8IIAAAAhdEVYdGljYzpkZXNjcmlwdGlvbgBzUkdCIElFQzYxOTY2LTIuMVet
2kcAAAAASUVORK5CYII="

HEAVYSNOWICON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAABG0lEQVQ4y92RMUtCYRSG33tJw6KxsKlB0YjCIRqFoKAlCHERf4CDDm0t
Qf6IfkBT0Q9oChIEiWizpUG3CMOhW4IFRTwNV+ze+3G9s73Td97vPN855zvS
PxMpTrljQJNjNqOSLaoM+eGBC5p8AEeTgTJwz9ooSnIOHIanJ3nlkYTHsbkE
brmizpIJ1IDtgLfMNw49oM9OEDjjkxnjmQ1iEnme6LPov7qhM2G+PHDinu2R
11KKhVCipRdt+YFrWToIBWzN6t1fNMYzDisSaeJjN05aktgFCsE+V+lRkWhQ
GnslGhLrOLwxZ46WZV9iXpIoUpTciAptMuE/YgIZ70JNwGgpQu7Q5Mj9De2V
sV2rK0nak9S2vtSNrDCF+gUmfKcgrLCpAwAAACV0RVh0ZGF0ZTpjcmVhdGUA
MjAyMS0wMi0yNlQwNTo0MToxMyswMDowMFfbTEwAAAAldEVYdGRhdGU6bW9k
aWZ5ADIwMjEtMDItMjZUMDU6NDE6MTMrMDA6MDAmhvTwAAAAJnRFWHRpY2M6
Y29weXJpZ2h0AE5vIGNvcHlyaWdodCwgdXNlIGZyZWVseaea8IIAAAAhdEVY
dGljYzpkZXNjcmlwdGlvbgBzUkdCIElFQzYxOTY2LTIuMVet2kcAAAAASUVO
RK5CYII="

FOGICON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAAAt0lEQVQ4y2NgGAWEASMy5z8ngxWDE4MFw1WGfQwHGD/g1fCfkSGYQQhF
7i/DYsZf6BqY4CwRNOUMDMwMyjht+C/LsB7VeVDwneExw2aG7Yzv0TUoMAjj
9es7xvsQBgtUwIvBAK+GT/8rGX8j+4GfQGjyMYSjOkmdgYeAlo+Md5CdZMGQ
R0DDBYZkJA2MC/9/ZhDBq+EYhELEwxMCNrxF8QMDAwPDfxWGSQziWBV/Zkhl
vM0wCogGAHCtJNE21N/PAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIxLTAyLTI2
VDA1OjQxOjEzKzAwOjAwV9tMTAAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMS0w
Mi0yNlQwNTo0MToxMyswMDowMCaG9PAAAAAmdEVYdGljYzpjb3B5cmlnaHQA
Tm8gY29weXJpZ2h0LCB1c2UgZnJlZWx5p5rwggAAACF0RVh0aWNjOmRlc2Ny
aXB0aW9uAHNSR0IgSUVDNjE5NjYtMi4xV63aRwAAAABJRU5ErkJggg=="

THENICON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAAAbUlEQVQ4y+2PuwmAQBAF3x2nXRjZglUIVmZgB4IKgg0IdmIxyhj4yQ7P
RBCcZNnHG9iVfj4BBQPRE6EBWmy4EDMCFWbfj0Gq0esYJVqVmVmS3BUvXsGK
Jz/ETEB5nnQvdEAdXJfI6XHB9Z+X2ACstyj09mmqeAAAACV0RVh0ZGF0ZTpj
cmVhdGUAMjAyMS0wMi0yNlQwNTo0MToxMyswMDowMFfbTEwAAAAldEVYdGRh
dGU6bW9kaWZ5ADIwMjEtMDItMjZUMDU6NDE6MTMrMDA6MDAmhvTwAAAAJnRF
WHRpY2M6Y29weXJpZ2h0AE5vIGNvcHlyaWdodCwgdXNlIGZyZWVseaea8IIA
AAAhdEVYdGljYzpkZXNjcmlwdGlvbgBzUkdCIElFQzYxOTY2LTIuMVet2kcA
AAAASUVORK5CYII="

SOMEICON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAAAk0lEQVQ4y+2QMQrCYAyFX35ab+EBunsHoeDJHDq4F1tRFEeh4B08gLvn
qJ+DFcXkAB36lpDHy8tLpAkjAzlnSseuOJFH8sQeqB3fAC3pnzY2wMV7MaMD
KuzdD4VCNyU9RLDcNFevhd0lKftaCfV6BgMpsMGogC6MdAXWn0i/R7fA1g3s
gNrJh7ceWTq25ECmCSPDCzT5UOOUFiG1AAAAJXRFWHRkYXRlOmNyZWF0ZQAy
MDIxLTAyLTI2VDA1OjQxOjEzKzAwOjAwV9tMTAAAACV0RVh0ZGF0ZTptb2Rp
ZnkAMjAyMS0wMi0yNlQwNTo0MToxMyswMDowMCaG9PAAAAAmdEVYdGljYzpj
b3B5cmlnaHQATm8gY29weXJpZ2h0LCB1c2UgZnJlZWx5p5rwggAAACF0RVh0
aWNjOmRlc2NyaXB0aW9uAHNSR0IgSUVDNjE5NjYtMi4xV63aRwAAAABJRU5E
rkJggg=="

ONCEICON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAAAe0lEQVQ4y2NgGAVUAP+l/8eSpmHn//8kafkv///J/z//fWF8RpwKe+FM
YYZwhp8MOoxP8JuMDjQh4iw4dSih8Z+iaPjPxiBHWlho/icE0Jz0meEDAwfD
coY3OM18h26H1//f/5/+VyDFWdH////fTZpPYv7LkKRhFOAAAADaWYo0h5nS
AAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIxLTAyLTI2VDA1OjQxOjEzKzAwOjAw
V9tMTAAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMS0wMi0yNlQwNTo0MToxMysw
MDowMCaG9PAAAAAmdEVYdGljYzpjb3B5cmlnaHQATm8gY29weXJpZ2h0LCB1
c2UgZnJlZWx5p5rwggAAACF0RVh0aWNjOmRlc2NyaXB0aW9uAHNSR0IgSUVD
NjE5NjYtMi4xV63aRwAAAABJRU5ErkJggg=="

TWICEICON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAAAgklEQVQ4y2NgGAVUAP+l/8eSpmHn//8kafkv///J/z//fWF8RqiwOEMZ
Tj3CDOEMPxl0GJ8gm6P5nxDQRLWBjUGagNueMv5iYGBgYIELMJMWFkQ7CWbD
Z4YPDBwMyxne4DTzHbodXv9//3/6X4EUZ0X///9/N2k+ifkvQ5KGUYADAAAB
jWt4wkFIGwAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMS0wMi0yNlQwNTo0MTox
MyswMDowMFfbTEwAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjEtMDItMjZUMDU6
NDE6MTMrMDA6MDAmhvTwAAAAJnRFWHRpY2M6Y29weXJpZ2h0AE5vIGNvcHly
aWdodCwgdXNlIGZyZWVseaea8IIAAAAhdEVYdGljYzpkZXNjcmlwdGlvbgBz
UkdCIElFQzYxOTY2LTIuMVet2kcAAAAASUVORK5CYII="

MOUNTAINICON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAAAbElEQVQ4y2NgGAX0A/9T/udhl2HBoUObgR+7BBOG2df/azMwMPxn+A/l
6RLQwCCHIiZH0AZCgPYasIVSyH8rBl0Gzv/p2ORZsBhhy/CJ4SvDVwZPBgYG
ZpwBDwP/0/4LIvES/4uT6uhRQAYAAAHIFuQn0EGBAAAAJXRFWHRkYXRlOmNy
ZWF0ZQAyMDIxLTAyLTI2VDA1OjQxOjEzKzAwOjAwV9tMTAAAACV0RVh0ZGF0
ZTptb2RpZnkAMjAyMS0wMi0yNlQwNTo0MToxMyswMDowMCaG9PAAAAAmdEVY
dGljYzpjb3B5cmlnaHQATm8gY29weXJpZ2h0LCB1c2UgZnJlZWx5p5rwggAA
ACF0RVh0aWNjOmRlc2NyaXB0aW9uAHNSR0IgSUVDNjE5NjYtMi4xV63aRwAA
AABJRU5ErkJggg=="

COASTICON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwSh1RzH
Zqma+19gBMKZJJX3kUcVBW4k0bTa6W+t6c8cUjTBHCisVUmbETAtSJt2Y0NB
NkYEOaTIiQDWZWYA5OKr7/Pln1fSrGRkwFkc5Qq/GMNvnYzyDTTC9mD25Uhf
xl/KKkYaF2U4Aqae/GFgaBwHvA+4mrlCcOMlVg9wvofLsfFzx2NNLueSMQ7a
/4QXvB8P3J7xUW98FmLvTFDFWy4ET/iM/xCfJlVDbfF9a4zsjagm+i76nVlV
tIvIPkfcYmenODsl7g+XBhiXVYDdK+xemQxIfXohKnvvE50Azdie4nAZ8AsG
d9gkwN2zR4qbZwEdzsr35jeag+qrOqAu9Owe1og1CfYqO1dnfApgzfm88vgV
nsZ0LrwZ172kRPQIDGdXDkBaH3MQyvq2st4wWoGFX2dea9s3UVvtr6A9fWKg
I2xCx4iCru+nOOQygvLBq2uXVvpYEIutczvWmo/mgGa3S34Ko/tpqDoF88J4
WoggZSVS2AtOuV789to6OKnZYiRs11y51hVYSllvw30BDKnpHy3n/5Md+xJz
AAAA00lEQVQ4y+2RP0tCcRSGn59GdsE2aW1u6Dv4CcJJKFpdXFybg6Ah24SW
+hYhKE79GRIdGlriYoFLcIeWEiR53AINrkK4+UznwPuec14OrFk9Zq0ZmbXl
3nKGyKYdD9WBsbFvns8qwpwhsEWJKy7pArDBY0jSNlS889iOiU9+eu8fcWau
v6FHnhZ9Grxwxs/CLBY8cujQVz989svr1AzgBWN2eWCTHdqcUgyTtPk5E4sO
HDny27ETT9IPOjA2763bYN13q4sSBPd/67Jlo6Xet+a/TAEgDGwkeiDQowAA
ACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMS0wMi0yNlQwNTo0MToxMyswMDowMFfb
TEwAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjEtMDItMjZUMDU6NDE6MTMrMDA6
MDAmhvTwAAAAJnRFWHRpY2M6Y29weXJpZ2h0AE5vIGNvcHlyaWdodCwgdXNl
IGZyZWVseaea8IIAAAAhdEVYdGljYzpkZXNjcmlwdGlvbgBzUkdCIElFQzYx
OTY2LTIuMVet2kcAAAAASUVORK5CYII="

FINECLOUDSUN = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAABUElEQVQ4y8WRzyuDARjHv+9rwgqhlSmH1UR+lIMkcVeOzooTF1Ir7eDk
D1AOcmKO3Kx2We2w01iLGy4ypyVJI1kzbx8HP98fU1I8t+f7PJ/n+T490r8F
ASZ+BmxQ8dLN39mIsk+z2xILHHoDs8C2Sx0BMu+Z72vJiPEgS8KvaY0pqGPt
GKe6VlSb3ht8dNNGJ0dAkTxQZr6a/0kylACwgBlMiTBZLIbdzbVsAQViRFjj
DNilRpIIck/cDawAMZo+jEWAGKYkkaAgESDJEVOvDb08kcL2EVaBEnm2yHHl
BJaBPsfORm5Jk+AOSDsN7VHEcNmse7shS4UeeynFxTffDwPrn7kp6VghWqoB
xrkuNWAHDiTNVd1gqlXXDok0ZcarANPAolMMcYPFGqP4bXoHSzxyQr17Tjtx
vCNLl+2mD8RQv4Y0qIYv1YJyShrP+tN4AbCn9qMuTlMhAAAAJXRFWHRkYXRl
OmNyZWF0ZQAyMDIxLTAyLTI2VDA1OjQxOjEzKzAwOjAwV9tMTAAAACV0RVh0
ZGF0ZTptb2RpZnkAMjAyMS0wMi0yNlQwNTo0MToxMyswMDowMCaG9PAAAAAm
dEVYdGljYzpjb3B5cmlnaHQATm8gY29weXJpZ2h0LCB1c2UgZnJlZWx5p5rw
ggAAACF0RVh0aWNjOmRlc2NyaXB0aW9uAHNSR0IgSUVDNjE5NjYtMi4xV63a
RwAAAABJRU5ErkJggg=="

FINECLOUDMOON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAABKUlEQVQ4y92RsUrDYBSFT0JEHVRcRDpZ3czgIiK41ElEEHFysC9gl/oO
rt3q4tCxgnTTJ5AqlaBIhhbUWR0VNabU5nNoG0mKoXPv9N9zz7mce35pqAuL
dYpUGRuMPkED+AFSg9ANyvjkWAXy/9PWKOHyyS3nwJEkcYZHFrOfPEqBAJ8a
ZRzaQE6SmOMSeOcuLigAFWa6nc0Vbba79jZ55SVuJqCCETn6nm+qFMmQpslF
VFDC720PsQ3gmTegRcBKdOhS67vKZAkDk3086vHhB6cJIeeBdBSq4SYIUsBh
593L15HNYuJfTkV3LPCFw3iCpa04eAA0yDDSd3oWjxusTh8mj6E9HWtaTT2o
FfJNzWtSde0YjzGBJDGrXS3LlvUH6UnXOjF8DVH9AmTXx8AXLtT3AAAAJXRF
WHRkYXRlOmNyZWF0ZQAyMDIxLTAyLTI2VDA1OjQxOjEzKzAwOjAwV9tMTAAA
ACV0RVh0ZGF0ZTptb2RpZnkAMjAyMS0wMi0yNlQwNTo0MToxMyswMDowMCaG
9PAAAAAmdEVYdGljYzpjb3B5cmlnaHQATm8gY29weXJpZ2h0LCB1c2UgZnJl
ZWx5p5rwggAAACF0RVh0aWNjOmRlc2NyaXB0aW9uAHNSR0IgSUVDNjE5NjYt
Mi4xV63aRwAAAABJRU5ErkJggg=="

LIGHTNINGICON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAABN0lEQVQ4y82RPyiEcRzGn9/LoFfOIgPKIIZ3VFxJsVwKxYROyigDhltu
NKIsspAymm9RstzIcDeI4Z2JdHUlvXflro/l9XZ3L/e6iWd7vr/n+f55ftK/
g6kl2FrSmBzldaWsKUV4mcAFKri8Ax5zUfIqBZLYEhbT5CiT+Flu41JgoKbS
yS0eR+wyT3vYsA4kG2oOX7hhuNFwTAU71GaVEfrYweOejvqnLG6T+9aArbpY
udCsug0+MzpQTNKHUqYkYamoS7NS2yMNTAVs1N993+cWL1zXD+3hjRy9PjsE
4JGuIHLYa9xzE3hlQaKNZwCWg7TuKOOET9umAvSTAKDMKSfEmcSjysb3aQyR
ljgP8s8wSJ4M44oCi8ADsUhhYDijGPrdJnKLJ2Z+LZeIk2pBLuFgWjL8LT4B
HQvf4Jmq4YoAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjEtMDItMjZUMDU6NDE6
MTMrMDA6MDBX20xMAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIxLTAyLTI2VDA1
OjQxOjEzKzAwOjAwJob08AAAACZ0RVh0aWNjOmNvcHlyaWdodABObyBjb3B5
cmlnaHQsIHVzZSBmcmVlbHmnmvCCAAAAIXRFWHRpY2M6ZGVzY3JpcHRpb24A
c1JHQiBJRUM2MTk2Ni0yLjFXrdpHAAAAAElFTkSuQmCC"

WINDICON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAABSklEQVQ4y7WRvUtCURyG3yNhCKXUFAUKoVQSCUHQUkMQjRVREAi1Ba0O
+Q+0SFJ/QdFqEAgtfQxRY0M2uEVCYYMIRYMgZE+DmN3bveZQz3TOe96X38eR
/hvTOGA0qglFdatzU/o1Rx9Zmtww0to+SJkaaSbpZpgELzwTcbd7uKTK1Dcl
SJEn1lgg6BRYBJI2bearvX0C9kAK6LFphjSrrJABTumwPl5QcG3XsE2NZauY
5RUjVxhgunnzSMoroKiL2UtSXebKKkZ45wKPYyBMmQ9m7fIecIDfMRKjwhFh
Cuzgl+rzJ9Srdc1xppwqtkRMPj3oUTklVNRucxvz3OPMNUGJfiqcNCrIoCxx
hbShO1uFqvIaI6OQfDqub6nBm1pRUFyH1vHGKbm31MDyYXRpSZ0/ht5Uymyp
Xeprbd/u/HEtAl6SDLVt/xM+AYOo54FM/HzxAAAAJXRFWHRkYXRlOmNyZWF0
ZQAyMDIxLTAyLTI2VDA1OjQxOjEzKzAwOjAwV9tMTAAAACV0RVh0ZGF0ZTpt
b2RpZnkAMjAyMS0wMi0yNlQwNTo0MToxMyswMDowMCaG9PAAAAAmdEVYdGlj
Yzpjb3B5cmlnaHQATm8gY29weXJpZ2h0LCB1c2UgZnJlZWx5p5rwggAAACF0
RVh0aWNjOmRlc2NyaXB0aW9uAHNSR0IgSUVDNjE5NjYtMi4xV63aRwAAAABJ
RU5ErkJggg=="

ICEICON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAABcElEQVQ4y72RMUiVYRSGn+/e0LiSGi7qUGJCXloMFVxyMBJp0DGRWt0D
FycJlyAnhxRFHHRxbyhIQQgT805BomgugmBgkDrcEp+W6+3/vf7S5Bm+j3PO
+77n/c4H1x7WW/O/0Drn3VfPXHPUe5ejQhHeyyzVvOcLp7TRywGdYStZvdET
t+0o5i3uumdjMmHJvA9ilfsem/fEVYe8cRF+Wx0vEZn0uwtuqp+8GW89Vp+V
EMoNYMph9XW81ad2J9oNLvrTwnpSACxzRjuAKauiVgGCfKSahrjKihtmwBYn
ItXPhXvCX5ZHJ8AMzbwB0qQBfAFAGYC19PEu5C86HTIHtjoFYC5ybvjHJ+e4
4obDmF8TXp3hUVgtIUD4kEB4GA7/JakE0O+I0CGA/ZZdRXha/IMB52y2gkHu
RCzZQy78sLJkwjRHvGInSFfc0nNagTHeApjlmxUAHIWXYTtIUjhSWGsWwHWb
uDq85d1IljVw7fEXVWawSSVzipoAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjEt
MDItMjZUMDU6NDE6MTMrMDA6MDBX20xMAAAAJXRFWHRkYXRlOm1vZGlmeQAy
MDIxLTAyLTI2VDA1OjQxOjEzKzAwOjAwJob08AAAACZ0RVh0aWNjOmNvcHly
aWdodABObyBjb3B5cmlnaHQsIHVzZSBmcmVlbHmnmvCCAAAAIXRFWHRpY2M6
ZGVzY3JpcHRpb24Ac1JHQiBJRUM2MTk2Ni0yLjFXrdpHAAAAAElFTkSuQmCC"

UNKNOWNICON = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAQAAABKfvVzAAAAAmJLR0QAAKqN
IzIAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQflAhoFKQ3zBeW3AAAB
uXpUWHRSYXcgcHJvZmlsZSB0eXBlIGljYwAAOI2dU1my4yAM/OcUcwShFY5j
s1TN/S8wAtmZJJX3kUcVBW4k0bTa6W9r6c8aUjXBGiisTUm7ETBtSLsOY0NB
NkYEKVLlQAAbsjIAcvXV92gAVJJmJSMDzuIoN/jFmH7rYpRvoBP2B7MvR/oy
/lRWMdK4KEMJmEbyh4GhcRzwdcDNzBWCG6+xeoDzLS7HhR9XPLbkcm4Z46D/
T3jBR3ng9ozPduOrEHtngireciF4wmf8h/i0qBpqj+9bY2RvRDPRd9HvzKai
Q0Suc8RL7OwUV6fE/eHSAOO2CrB7hd0riwGpTy9E9dr7RCdAK3akONwG/ILB
HbYI8PDsmeLmVUCns/K9+Y3moPqqDqgLvbqHLWJNgr3KlasrPgWw53peffwK
T2M5F96M615SInoEhrMbByB9zDUIZX9b3W+YvcLGzyPvtV83Ud/tb6AjfWKg
M2xCZUZB1/dTHHKdQbnw7tqpjT4WxGr73Mpec+kOaHa75Kcwup+GqkswL4yH
hQhSdyKFveCQ88Vvr62Dg7ptRsJ2rpVb24G11v02vC6AKS39A7wt/0A6usWN
AAABDUlEQVQ4y+2QsS5DYRiGn9OiGlNJMGGphEUMjaSIgTB06SZhYCgmowsQ
1yAkvQODWUKsEoK4A9HBYDLU0IbH4FRzek56AeJZ/vz/97z5vu+Hf34wHZ6B
ewbgJhi4myz3eOybT5YBHHMZXALXHE0OlDwz47Y1q2bAEXMOmnM4WV/0xnMn
waxVH50CU2DaCUsW4oFrVY/CW9maV16409qqU9+wruqzc+FLrwuu2OeAeWei
cr8ntml6YBBWpsEiOB75J/ftpABg1lWwYqpznMtY4BDAdXPQ6tbWB2zEAndJ
e7YaNfiK1epdAkGTh1jtlm5Y9DMy0KtDdMeKH7/6i/PJVmR782wxS517ToN3
/izfjC3cDxA6lqoAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjEtMDItMjZUMDU6
NDE6MTMrMDA6MDBX20xMAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIxLTAyLTI2
VDA1OjQxOjEzKzAwOjAwJob08AAAACZ0RVh0aWNjOmNvcHlyaWdodABObyBj
b3B5cmlnaHQsIHVzZSBmcmVlbHmnmvCCAAAAIXRFWHRpY2M6ZGVzY3JpcHRp
b24Ac1JHQiBJRUM2MTk2Ni0yLjFXrdpHAAAAAElFTkSuQmCC"


CLOUD = [CLOUDICON]
FINE = [SUN,MOON0,MOON1,MOON2,MOON3,MOON4,MOON5,MOON6,MOON7]
ONCERAIN = [ONCERAINSUN,ONCERAINMOON]
SOMERAIN = [SOMERAINSUN,SOMERAINMOON]
RAIN = [RAINICON]
HEAVYRAIN = [HEAVYRAINICON]
RAINSNOW = [RAINSNOWICON]
ONCESNOW = [ONCESNOWSUN]
SOMESNOW = [SOMESNOWSUN]
SNOW = [SNOWICON]
HEAVYSNOW = [HEAVYSNOWICON]
FOG = [FOGICON]

THEN = [THENICON]
SOME = [SOMEICON]
ONCE = [ONCEICON]
TWICE = [TWICEICON]
MOUNTAIN = [MOUNTAINICON]
COAST = [COASTICON]

FINECLOUD = [FINECLOUDSUN,FINECLOUDMOON]
LIGHTNINGRAIN = [LIGHTNINGICON]
LIGHTNINGSNOW = [LIGHTNINGICON]
WINDRAIN = [WINDICON]
WINDSNOW = [WINDICON]
ICE = [ICEICON]

UNKNOWN = [UNKNOWNICON]

WEEK = {
	"1" => "月",
	"2" => "火",
	"3" => "水",
	"4" => "木",
	"5" => "金",
	"6" => "土",
	"7" => "日"
}

WEATHERCODE = {
	100 => "晴",
	101 => "晴時々曇",
	102 => "晴一時雨",
	103 => "晴時々雨",
	104 => "晴一時雪",
	105 => "晴時々雪",
	106 => "晴一時雨か雪",
	107 => "晴時々雨か雪",
	108 => "晴一時雨か雷雨",
	110 => "晴後時々曇",
	111 => "晴後曇",
	112 => "晴後一時雨",
	113 => "晴後時々雨",
	114 => "晴後雨",
	115 => "晴後一時雪",
	116 => "晴後時々雪",
	117 => "晴後雪",
	118 => "晴後雨か雪",
	119 => "晴後雨か雷雨",
	120 => "晴朝夕一時雨",
	121 => "晴朝の内一時雨",
	122 => "晴夕方一時雨",
	123 => "晴山沿い雷雨",
	124 => "晴山沿い雪",
	125 => "晴午後は雷雨",
	126 => "晴昼頃から雨",
	127 => "晴夕方から雨",
	128 => "晴夜は雨",
	130 => "朝の内霧後晴",
	131 => "晴明け方霧",
	132 => "晴朝夕曇",
	140 => "晴時々雨で雷を伴う",
	160 => "晴一時雪か雨",
	170 => "晴時々雪か雨",
	181 => "晴後雪か雨",
	200 => "曇",
	201 => "曇時々晴",
	202 => "曇一時雨",
	203 => "曇時々雨",
	204 => "曇一時雪",
	205 => "曇時々雪",
	206 => "曇一時雨か雪",
	207 => "曇時々雨か雪",
	208 => "曇一時雨か雷雨",
	209 => "霧",
	210 => "曇後時々晴",
	211 => "曇後晴",
	212 => "曇後一時雨",
	213 => "曇後時々雨",
	214 => "曇後雨",
	215 => "曇後一時雪",
	216 => "曇後時々雪",
	217 => "曇後雪",
	218 => "曇後雨か雪",
	219 => "曇後雨か雷雨",
	220 => "曇朝夕一時雨",
	221 => "曇朝の内一時雨",
	222 => "曇夕方一時雨",
	223 => "曇日中時々晴",
	224 => "曇昼頃から雨",
	225 => "曇夕方から雨",
	226 => "曇夜は雨",
	228 => "曇昼頃から雪",
	229 => "曇夕方から雪",
	230 => "曇夜は雪",
	231 => "曇海上海岸は霧か霧雨",
	240 => "曇時々雨で雷を伴う",
	250 => "曇時々雪で雷を伴う",
	260 => "曇一時雪か雨",
	270 => "曇時々雪か雨",
	281 => "曇後雪か雨",
	300 => "雨",
	301 => "雨時々晴",
	302 => "雨時々止む",
	303 => "雨時々雪",
	304 => "雨か雪",
	306 => "大雨",
	308 => "雨で暴風を伴う",
	309 => "雨一時雪",
	311 => "雨後晴",
	313 => "雨後曇",
	314 => "雨後時々雪",
	315 => "雨後雪",
	316 => "雨か雪後晴",
	317 => "雨か雪後曇",
	320 => "朝の内雨後晴",
	321 => "朝の内雨後曇",
	322 => "雨朝晩一時雪",
	323 => "雨昼頃から晴",
	324 => "雨夕方から晴",
	325 => "雨夜は晴",
	326 => "雨夕方から雪",
	327 => "雨夜は雪",
	328 => "雨一時強く降る",
	329 => "雨一時霙",
	340 => "雪か雨",
	350 => "雨で雷を伴う",
	361 => "雪か雨後晴",
	371 => "雪か雨後曇",
	400 => "雪",
	401 => "雪時々晴",
	402 => "雪時々止む",
	403 => "雪時々雨",
	405 => "大雪",
	406 => "風雪強い",
	407 => "暴風雪",
	409 => "雪一時雨",
	411 => "雪後晴",
	413 => "雪後曇",
	414 => "雪後雨",
	420 => "朝の内雪後晴",
	421 => "朝の内雪後曇",
	422 => "雪昼頃から雨",
	423 => "雪夕方から雨",
	425 => "雪一時強く降る",
	426 => "雪後霙",
	427 => "雪一時霙",
	450 => "雪で雷を伴う"
}

WARNINGCODE = {
	"02" => {:name => "暴風雪", :type => "警報"},
	"03" => {:name => "大雨", :type => "警報"},
	"04" => {:name => "洪水", :type => "警報"},
	"05" => {:name => "暴風", :type => "警報"},
	"06" => {:name => "大雪", :type => "警報"},
	"07" => {:name => "波浪", :type => "警報"},
	"08" => {:name => "高潮", :type => "警報"},
	"10" => {:name => "大雨", :type => "注意報"},
	"12" => {:name => "大雪", :type => "注意報"},
	"13" => {:name => "風雪", :type => "注意報"},
	"14" => {:name => "雷", :type => "注意報"},
	"15" => {:name => "強風", :type => "注意報"},
	"16" => {:name => "波浪", :type => "注意報"},
	"17" => {:name => "融雪", :type => "注意報"},
	"18" => {:name => "洪水", :type => "注意報"},
	"19" => {:name => "高潮", :type => "注意報"},
	"20" => {:name => "濃霧", :type => "注意報"},
	"21" => {:name => "乾燥", :type => "注意報"},
	"22" => {:name => "雪崩", :type => "注意報"},
	"23" => {:name => "低温", :type => "注意報"},
	"24" => {:name => "霜", :type => "注意報"},
	"25" => {:name => "着氷", :type => "注意報"},
	"26" => {:name => "着雪", :type => "注意報"},
	"32" => {:name => "暴風雪", :type => "特別警報"},
	"33" => {:name => "大雨", :type => "特別警報"},
	"35" => {:name => "暴風", :type => "特別警報"},
	"36" => {:name => "大雪", :type => "特別警報"},
	"37" => {:name => "波浪", :type => "特別警報"},
	"38" => {:name => "高潮", :type => "特別警報"}
}

WEATHERCODEICON = {
	100 => [FINE], # 晴
	101 => [FINE,SOME,CLOUD], # 晴時々曇
	102 => [FINE,ONCE,RAIN], # 晴一時雨
	103 => [FINE,ONCE,CLOUD], # 晴時々雨
	104 => [FINE,ONCE,SNOW], # 晴一時雪
	105 => [FINE,SOME,SNOW], # 晴時々雪
	106 => [FINE,ONCE,RAIN], # 晴一時雨か雪
	107 => [FINE,SOME,RAIN], # 晴時々雨か雪
	108 => [FINE,ONCE,LIGHTNINGRAIN], # 晴一時雨か雷雨
	110 => [FINE,THEN,FINECLOUD], # 晴後時々曇
	111 => [FINE,THEN,CLOUD], # 晴後曇
	112 => [FINE,THEN,ONCERAIN], # 晴後一時雨
	113 => [FINE,THEN,SOMERAIN], # 晴後時々雨
	114 => [FINE,THEN,RAIN], # 晴後雨
	115 => [FINE,ONCE,ONCESNOW], # 晴後一時雪
	116 => [FINE,THEN,SOMESNOW], # 晴後時々雪
	117 => [FINE,THEN,SNOW], # 晴後雪
	118 => [FINE,THEN,RAINSNOW], # 晴後雨か雪
	119 => [FINE,THEN,LIGHTNINGRAIN], # 晴後雨か雷雨
	120 => [FINE,TWICE,RAIN], # 晴朝夕一時雨
	121 => [RAIN,THEN,FINE], # 晴朝の内一時雨
	122 => [FINE,ONCE,RAIN], # 晴夕方一時雨
	123 => [FINE,MOUNTAIN,LIGHTNINGRAIN], # 晴山沿い雷雨
	124 => [FINE,MOUNTAIN,SNOW], # 晴山沿い雪
	125 => [FINE,ONCE,LIGHTNINGRAIN], # 晴午後は雷雨
	126 => [FINE,THEN,RAIN], # 晴昼頃から雨
	127 => [FINE,THEN,RAIN], # 晴夕方から雨
	128 => [FINE,THEN,RAIN], # 晴夜は雨
	130 => [FOG,THEN,FINE], # 朝の内霧後晴
	131 => [FOG,THEN,FINE], # 晴明け方霧
	132 => [FINE,TWICE,CLOUD], # 晴朝夕曇
	140 => [FINE,SOME,LIGHTNINGRAIN], # 晴時々雨で雷を伴う
	160 => [FINE,ONCE,RAINSNOW], # 晴一時雪か雨
	170 => [FINE,SOME,RAINSNOW], # 晴時々雪か雨
	181 => [FINE,THEN,RAINSNOW], # 晴後雪か雨
	200 => [CLOUD], # 曇
	201 => [CLOUD,SOME,FINE], # 曇時々晴
	202 => [CLOUD,ONCE,RAIN], # 曇一時雨
	203 => [CLOUD,SOME,RAIN], # 曇時々雨
	204 => [CLOUD,ONCE,SNOW], # 曇一時雪
	205 => [CLOUD,SOME,RAIN], # 曇時々雪
	206 => [CLOUD,ONCE,RAINSNOW], # 曇一時雨か雪
	207 => [CLOUD,SOME,RAINSNOW], # 曇時々雨か雪
	208 => [CLOUD,ONCE,LIGHTNINGRAIN], # 曇一時雨か雷雨
	209 => [FOG], # 霧
	210 => [CLOUD,THEN,FINECLOUD], # 曇後時々晴
	211 => [CLOUD,THEN,FINE], # 曇後晴
	212 => [CLOUD,THEN,RAIN], # 曇後一時雨
	213 => [CLOUD,THEN,RAIN], # 曇後時々雨
	214 => [CLOUD,THEN,RAIN], # 曇後雨
	215 => [CLOUD,THEN,SNOW], # 曇後一時雪
	216 => [CLOUD,THEN,SNOW], # 曇後時々雪
	217 => [CLOUD,THEN,SNOW], # 曇後雪
	218 => [CLOUD,THEN,RAINSNOW], # 曇後雨か雪
	219 => [CLOUD,THEN,LIGHTNINGRAIN], # 曇後雨か雷雨
	220 => [CLOUD,TWICE,RAIN], # 曇朝夕一時雨
	221 => [ONCERAIN,THEN,CLOUD], # 曇朝の内一時雨
	222 => [CLOUD,ONCE,RAIN], # 曇夕方一時雨
	223 => [CLOUD,SOME,RAIN], # 曇日中時々晴
	224 => [CLOUD,THEN,RAIN], # 曇昼頃から雨
	225 => [CLOUD,THEN,RAIN], # 曇夕方から雨
	226 => [CLOUD,THEN,RAIN], # 曇夜は雨
	228 => [CLOUD,THEN,SNOW], # 曇昼頃から雪
	229 => [CLOUD,THEN,SNOW], # 曇夕方から雪
	230 => [CLOUD,THEN,SNOW], # 曇夜は雪
	231 => [CLOUD,COAST,FOG], # 曇海上海岸は霧か霧雨
	240 => [CLOUD,SOME,LIGHTNINGRAIN], # 曇時々雨で雷を伴う
	250 => [CLOUD,SOME,LIGHTNINGSNOW], # 曇時々雪で雷を伴う
	260 => [CLOUD,ONCE,RAINSNOW], # 曇一時雪か雨
	270 => [CLOUD,SOME,RAINSNOW], # 曇時々雪か雨
	281 => [CLOUD,THEN,RAINSNOW], # 曇後雪か雨
	300 => [RAIN], # 雨
	301 => [RAIN,SOME,FINE], # 雨時々晴
	302 => [RAIN,SOME,CLOUD], # 雨時々止む
	303 => [RAIN,SOME,SNOW], # 雨時々雪
	304 => [RAINSNOW], # 雨か雪
	306 => [HEAVYRAIN], # 大雨
	308 => [WINDRAIN], # 雨で暴風を伴う
	309 => [RAIN,ONCE,SNOW], # 雨一時雪
	311 => [RAIN,THEN,FINE], # 雨後晴
	313 => [RAIN,THEN,CLOUD], # 雨後曇
	314 => [RAIN,SOME,SNOW], # 雨後時々雪
	315 => [RAIN,THEN,SNOW], # 雨後雪
	316 => [RAINSNOW,THEN,FINE], # 雨か雪後晴
	317 => [RAINSNOW,THEN,CLOUD], # 雨か雪後曇
	320 => [RAIN,THEN,FINE], # 朝の内雨後晴
	321 => [RAIN,THEN,CLOUD], # 朝の内雨後曇
	322 => [RAIN,TWICE,SNOW], # 雨朝晩一時雪
	323 => [RAIN,THEN,FINE], # 雨昼頃から晴
	324 => [RAIN,THEN,FINE], # 雨夕方から晴
	325 => [RAIN,THEN,FINE], # 雨夜は晴
	326 => [RAIN,THEN,SNOW], # 雨夕方から雪
	327 => [RAIN,THEN,SNOW], # 雨夜は雪
	328 => [RAIN,ONCE,HEAVYRAIN], # 雨一時強く降る
	329 => [RAIN,ONCE,ICE], # 雨一時霙
	340 => [RAINSNOW], # 雪か雨
	350 => [LIGHTNINGRAIN], # 雨で雷を伴う
	361 => [SNOW], # 雪か雨後晴
	371 => [RAINSNOW,THEN,CLOUD], # 雪か雨後曇
	400 => [SNOW], # 雪
	401 => [SNOW,SOME,FINE], # 雪時々晴
	402 => [SNOW,SOME,CLOUD], # 雪時々止む
	403 => [SNOW,SOME,RAIN], # 雪時々雨
	405 => [HEAVYSNOW], # 大雪
	406 => [WINDSNOW], # 風雪強い
	407 => [WINDSNOW], # 暴風雪
	409 => [SNOW,ONCE,RAIN], # 雪一時雨
	411 => [SNOW,THEN,FINE], # 雪後晴
	413 => [SNOW,THEN,CLOUD], # 雪後曇
	414 => [SNOW,THEN,RAIN], # 雪後雨
	420 => [SNOW,THEN,FINE], # 朝の内雪後晴
	421 => [SNOW,THEN,CLOUD], # 朝の内雪後曇
	422 => [SNOW,THEN,RAIN], # 雪昼頃から雨
	423 => [SNOW,THEN,RAIN], # 雪夕方から雨
	425 => [SNOW,ONCE,HEAVYSNOW], # 雪一時強く降る
	426 => [SNOW,THEN,ICE], # 雪後霙
	427 => [SNOW,ONCE,ICE], # 雪一時霙
	450 => [LIGHTNINGSNOW], # 雪で雷を伴う
}

$forecast = JSON.parse(URI.open("https://www.jma.go.jp/bosai/forecast/data/forecast/#{$pref}.json", :read_timeout => 120).read)

def forecastdays
	fcarea = $forecast.first['timeSeries'][0]['areas'].select {|x| x['area']['code'] == $area }.first
	fctime = $forecast.first['timeSeries'][0]['timeDefines']
	
	tmarea = $forecast.first['timeSeries'][2]['areas'].select {|x| x['area']['code'] == $amedas }.first['temps']
	tmtime = $forecast.first['timeSeries'][2]['timeDefines']
	
	pparea = $forecast.first['timeSeries'][1]['areas'].select {|x| x['area']['code'] == $area }.first['pops']
	pptime = $forecast.first['timeSeries'][1]['timeDefines']
	
	temp = [[],[],[]]
	pop = [[],[],[]]
	
	tmtime.each_with_index do |t,i|
		if Time.parse(t) - Time.parse("#{$dymd}T00:00:00+09:00") < 24.hours
			temp[0].push(tmarea[i])
		elsif Time.parse(t) - Time.parse("#{$dymd}T00:00:00+09:00") >= 24.hours and Time.parse(t) - Time.parse("#{$dymd}T00:00:00+09:00") <= 48.hours
			temp[1].push(tmarea[i])
		elsif Time.parse(t) - Time.parse("#{$dymd}T00:00:00+09:00") > 48.hours
			temp[2].push(tmarea[i])
		end
	end
	
	pptime.each_with_index do |t,i|
		if Time.parse(t) - Time.parse("#{$dymd}T00:00:00+09:00") < 24.hours
			pop[0].push(pparea[i])
		elsif Time.parse(t) - Time.parse("#{$dymd}T00:00:00+09:00") >= 24.hours and Time.parse(t) - Time.parse("#{$dymd}T00:00:00+09:00") <= 48.hours
			pop[1].push(pparea[i])
		elsif Time.parse(t) - Time.parse("#{$dymd}T00:00:00+09:00") > 48.hours
			pop[2].push(pparea[i])
		end
	end
	
	if Time.parse(fctime[0]) < $d0
		fctime.delete_at(0)
		fcarea['weatherCodes'].delete_at(0)
		pptime.delete_at(0)
		pop[0].delete_at(0)
	end
	out = []
	for i in 0..fctime.length-1
		out.push({
			:date => Time.parse(fctime[i]),
			:weather => fcarea['weatherCodes'][i].to_i,
			:wind => fcarea['winds'][i],
			:wave => fcarea['waves'][i],
			:temp => temp[i],
			:pop => pop[i]
		})
	end
	return out
end

def forecastweek
	fcarea = $forecast.last['timeSeries'][0]['areas'].select {|x| x['area']['code'] == $area }.first
	fctime = $forecast.last['timeSeries'][0]['timeDefines']
	
	tmarea = $forecast.last['timeSeries'][1]['areas'].select {|x| x['area']['code'] == $amedas }.first
	tmtime = $forecast.last['timeSeries'][1]['timeDefines']
	
	temp = []
	tmtime.each_with_index do |t,i|
		temp.push({
			:min => tmarea['tempsMin'][i],
			:minup => tmarea['tempsMinUpper'][i],
			:minlo => tmarea['tempsMinLower'][i],
			:max => tmarea['tempsMax'][i],
			:maxup => tmarea['tempsMaxUpper'][i],
			:maxlo => tmarea['tempsMaxLower'][i]
		})
	end
	out = []
	for i in 0..fctime.length-1
		out.push({
			:date => Time.parse(fctime[i]),
			:weather => fcarea['weatherCodes'][i].to_i,
			:temp => temp[i],
			:pop => fcarea['pops'][i]
		})
	end
	return out
end

def overviewdays
	json = JSON.parse(URI.open("https://www.jma.go.jp/bosai/forecast/data/overview_forecast/#{$pref}.json", :read_timeout => 120).read)
	
	text = "#{json['text']}"
	text = "#{json['headlineText']}\n\n" + text unless json['headlineText'].empty?
	text.gsub!(/([\p{Hiragana}\p{Katakana}])\s*$\n/, '\1')
	text.gsub!(/^　/, '')
	text.gsub!(/[＞】）]/, '\0\n')
	text.gsub!(/[（]/, '\n\0')
	text.gsub!(/[^線][しりが]、/, '\0\n')
	text.gsub!(/[^の]ため、/, '\0\n')
	text.gsub!(/時間降水量は、/, '\0\n')
	text.gsub!(/。/, '\0\n')
	text.gsub!(/\\n/, "\n")
	text.gsub!(/\n^　+$\n/, "\n")
	text.gsub!(/\n\s*\n\s*\n/, "\n\n")
	text = "#{Time.parse(json['reportDatetime']).strftime("%Y年%m月%d日 %H時%M分")}\n\n" + text
	text = NKF.nkf('-X -w', text).tr('０-９．', '0-9.')
	return text
end

def overviewweek
	json = JSON.parse(URI.open("https://www.jma.go.jp/bosai/forecast/data/overview_week/#{$pref}.json", :read_timeout => 120).read)
	
	text = "#{json['headTitle']}\n\n"
	text += "#{json['text']}"
	date = "#{text.lines.first.strip}　#{Time.parse(json['reportDatetime']).strftime("%Y年%m月%d日 %H時%M分")}"
	a = [date] + text.lines[1..-1]
	text = a.join("\n\n")
	text.gsub!(/([\p{Hiragana}\p{Katakana}])\s*$\n/, '\1')
	text.gsub!(/^　/, '')
	text.gsub!(/[＞】）]/, '\0\n')
	text.gsub!(/[（]/, '\n\0')
	text.gsub!(/[^線][くしりが]、/, '\0\n')
	text.gsub!(/[^の]ため、/, '\0\n')
	text.gsub!(/まで　/, '\0\n\n')
	text.gsub!(/。/, '\0\n\n')
	text.gsub!(/\\n/, "\n")
	text.gsub!(/\n^　+$\n/, "\n")
	text.gsub!(/\n\s*\n\s*\n/, "\n\n")
	text = NKF.nkf('-X -w', text).tr('０-９．', '0-9.')
	return text.strip
end

def minmax(list,st,et)
	a = list.map {|date,val| val if date >= st and date <= et }.reject(&:blank?)
	if a.min == a.max
		return "#{a.min}"
	else
		return "#{a.min}〜#{a.max}"
	end
end

def rangewarn(a,u)
	if a.length > 1
		return "#{a.min}〜#{a.max} #{u}"
	else
		return "#{a.join('')} #{u}"
	end
end

def windwarn(a)
	if a.length > 1
		dir = a.map {|d,s| d}.uniq
		spd = a.map {|d,s| s}.uniq
		min = a.map{|d,s|s}.min
		max = a.map{|d,s|s}.max
		if dir.length > 1 and spd.length == 1
			return "#{dir.join('〜')} #{spd.join('')} m/s"
		elsif dir.length > 1 and spd.length > 2
			return "#{dir.join('〜')} #{min}〜#{max} m/s"
		elsif dir.length > 1 and spd.length > 1
			return "#{dir.join('〜')} #{spd.join('〜')} m/s"
		else
			return "#{dir.join('')} #{min}〜#{max} m/s"
		end
	else
		return "#{a[0][0]} #{a[0][1]} m/s"
	end
end

def warningtimes(t,l,s,i)
	v = l.select {|x| x['type'] == s }.map {|x| x['localAreas'][i]['values'] }
	return Hash[t.zip(v.flatten)]
end

def warning
	json = JSON.parse(URI.open("https://www.jma.go.jp/bosai/warning/data/warning/#{$pref}.json", :read_timeout => 120).read)
	
	warnings = json['areaTypes'].last['areas'].select {|x| x['warnings'] if x['code'] == $local and not x['warnings'].any?{|y| y['status'] == "解除" or y['status'] == "発表警報・注意報はなし"}}.map {|x| x['warnings']}.flatten
	return [] if warnings.empty?
	
	times = []
	json['timeSeries'].each do |x|
		h = {
			:times => x['timeDefines'],
			:warnings => x['areaTypes'].last['areas'].select {|y| y['code'] == $local}.map {|x| x['warnings']}.flatten
		}
		times.push(h)
	end
	
	sort = Hash.new{|h,k| h[k] = [] }
	warnings.each do |x|
		name = WARNINGCODE[x['code']][:name]
		time = times.select {|y| y[:warnings].any? {|z| z['code'] == x['code']}}.first
		warning = time[:warnings].select {|y| y['code'] == x['code']}.first
		# ['status'] 発表 継続 発表警報・注意報はなし
		sort[name].push({:time=>time[:times],:warning=>warning}) unless x['status'].match? /なし$/
	end
	
	listtoday = []
	listtomorrow = []
	sort.each do |k,v|
		today = []
		tomorrow = []
		v.each do |t|
			times = t[:time].map {|x| Time.parse(x)}
			
			if local = t[:warning]['levels'][0]['localAreas'].find_index {|x| x['localAreaName'] == "陸上"}
			else
				local = 0
			end
			data = t[:warning]['levels'][0]['localAreas']
			unless data.first['localAreaName'].nil?
				areas = data.map {|x| "#{x['localAreaName']} "}
			else
				areas = [""]
			end
			
			i = data[0]['values'].each_index.select {|y| data[0]['values'][y] != "" and data[0]['values'][y] != "00"}[0]
			j = data[0]['values'].each_index.select {|y| data[0]['values'][y] != "" and data[0]['values'][y] != "00"}[-1]
			
			warning = WARNINGCODE[t[:warning]['code']][:type]
			
			if k == "雷" or k == "融雪" or k == "霜" or k == "雪崩" or k == "着氷" or k == "着雪"
				unless data[0]['additions'].nil?
					details = "#{data[0]['additions'].join('　')}"
				else
					details = ''
				end
				if times[i] >= $d24
					tomorrow.push("#{warning}　#{details}")
				elsif times[i] < $d24 and times[j] >= $d24
					today.push("#{warning}　#{details}")
					tomorrow.push("#{warning}　#{details}")
				else
					today.push("#{warning}　#{details}")
				end
			elsif k == "乾燥"
				effhum = warningtimes(times,t[:warning]['properties'],"実効湿度",local)
				minhum = warningtimes(times,t[:warning]['properties'],"最小湿度",local)
				if times[i] >= $d24
					tomorrow.push("#{warning}　実効湿度 #{minmax(effhum,$d24,$d48)}% 最小湿度 #{minmax(minhum,$d24,$d48)}%")
				elsif times[i] < $d24 and times[j] >= $d24
					today.push("#{warning}　実効湿度 #{minmax(effhum,$d0,$d24)}%　最小湿度 #{minmax(minhum,$d24,$d48)}%")
					tomorrow.push("#{warning}　実効湿度 #{minmax(effhum,$d24,$d48)}%  最小湿度 #{minmax(minhum,$d24,$d48)}%")
				else
					today.push("#{warning}　実効湿度 #{minmax(effhum,$d0,$d24)}%  最小湿度 #{minmax(minhum,$d0,$d24)}%")
				end
			elsif k == "低温"
				if times[i] >= $d24
					tomorrow.push("#{warning}")
				elsif times[i] < $d24 and times[j] >= $d24
					today.push("#{warning}")
					tomorrow.push("#{warning}")
				else
					today.push("#{warning}")
				end
			elsif k == "大雨"
				unless data[0]['attentions'].nil?
					details = " #{data[0]['attentions'].join('　')}"
				else
					details = ""
				end
				todayarea = []
				tomorrowarea = []
				for area in 0..data.length-1
					types = {}
					unless t[:warning]['properties'].nil?
						t[:warning]['properties'].select {|x| x['type'] == "１時間最大雨量" }.each do |x|
							h = Hash[times.zip(x['localAreas'][area]['values'])]
							if times[i] >= $d24
								a = h.select {|k,v| k >= $d24 and not v.join('').empty? }.map {|k,v| v}.uniq
								tomorrowarea.push("#{areas[area]}#{rangewarn(a,'mm/h')}")
							elsif times[i] < $d24 and times[j] >= $d24
								a = h.select {|k,v| k >= $d0 and k <= $d24 and not v.empty? }.map {|k,v| v}.uniq
								todayarea.push("#{areas[area]}#{rangewarn(a,'mm/h')}")
								b = h.select {|k,v| k >= $d24 and not v.empty? }.map {|k,v| v}.uniq
								tomorrowarea.push("#{areas[area]}#{rangewarn(b,'mm/h')}")
							else
								a = h.select {|k,v| k >= $d0 and k <= $d24 and not v.empty? }.map {|k,v| v}.uniq
								todayarea.push("#{areas[area]}#{rangewarn(a,'mm/h')}")
							end
						end
					else
						t[:warning]['levels'].select {|x| x['type'] == "土砂災害危険度" }.each do |x|
							details = "土砂災害"
							if times[i] >= $d24
								tomorrowarea.push("")
							elsif times[i] < $d24 and times[j] >= $d24
								todayarea.push("")
								tomorrowarea.push("")
							else
								todayarea.push("")
							end
						end
					end
				end # areas[area] 空白 20210702
				today.push("#{warning}　#{details}　#{todayarea.join('　')}") if todayarea.length > 0
				tomorrow.push("#{warning}　#{details}　#{tomorrowarea.join('　')}") if tomorrowarea.length > 0
			elsif k == "大雪"
				unless data[0]['additions'].nil?
					details = "　#{data[0]['additions'].join('　')}"
				else
					details = ""
				end
				snowfall = t[:warning]['snowfall']['localAreas'][0]['depths'][0]['value']
				if times[i] >= $d24
					tomorrow.push("#{warning}　#{snowfall} cm/12h#{details}")
				elsif times[i] < $d24 and times[j] >= $d24
					today.push("#{warning}　#{snowfall} cm/12h#{details}")
					tomorrow.push("#{warning}　#{snowfall} cm/12h#{details}")
				else
					today.push("#{warning}　#{snowfall} cm/12h#{details}")
				end
			elsif k == "強風" or k == "暴風" or k == "風雪" or k == "暴風雪"
				todayarea = []
				tomorrowarea = []
				for area in 0..data.length-1
					speed = []
					dir = []
					t[:warning]['properties'].select {|x| x['type'] == "最大風速" }.each do |x|
						speed += x['localAreas'][area]['values']
					end
					t[:warning]['properties'].select {|x| x['type'] == "風向" }.each do |x|
						dir += x['localAreas'][area]['windDirections'].map {|y| y['value']}
					end
					h = Hash[times.zip(dir.zip(speed))]
					if times[i] >= $d24
						a = h.select {|k,v| k >= $d24 and not v.join('').empty? }.map {|k,v| v}.uniq
						tomorrowarea.push("#{areas[area]}#{windwarn(a)}")
					elsif times[i] < $d24 and times[j] >= $d24
						a = h.select {|k,v| k >= $d0 and k <= $d24 and not v.join('').empty? }.map {|k,v| v}.uniq
						todayarea.push("#{areas[area]}#{windwarn(a)}")
						b = h.select {|k,v| k >= $d24 and not v.join('').empty? }.map {|k,v| v}.uniq
						tomorrowarea.push("#{areas[area]}#{windwarn(b)}")
					else
						a = h.select {|k,v| k >= $d0 and k <= $d24 and not v.join('').empty? }.map {|k,v| v}.uniq
						todayarea.push("#{areas[area]}#{windwarn(a)}")
					end
				end
				today.push("#{warning}　#{todayarea.join('　')}") if todayarea.length > 0
				tomorrow.push("#{warning}　#{tomorrowarea.join('　')}") if tomorrowarea.length > 0
			elsif k == "波浪"
				wave = warningtimes(times,t[:warning]['properties'],"波高",0)
				if times[i] >= $d24
					tomorrow.push("#{warning}　#{minmax(wave,$d24,$d48)} m")
				elsif times[i] < $d24 and times[j] >= $d24
					today.push("#{warning}　#{minmax(wave,$d0,$d24)} m")
					tomorrow.push("#{warning}　#{minmax(wave,$d24,$d48)} m")
				else
					today.push("#{warning}　#{minmax(wave,$d0,$d24)} m")
				end
			elsif k == "洪水"
				if times[i] >= $d24
					tomorrow.push("#{warning}")
				elsif times[i] < $d24 and times[j] >= $d24
					today.push("#{warning}")
					tomorrow.push("#{warning}")
				else
					today.push("#{warning}")
				end
			elsif k == "濃霧"
				vis = t[:warning]['properties'].detect {|x| x['type'] == "視程" }['localAreas'][0]['values'][0]
				if times[i] >= $d24
					tomorrow.push("#{warning}　視程 < #{vis} m")
				elsif times[i] < $d24 and times[j] >= $d24
					today.push("#{warning}　視程 < #{vis} m")
					tomorrow.push("#{warning}　視程 < #{vis} m")
				else
					today.push("#{warning}　視程 < #{vis} m")
				end
			elsif k == "高潮"
				unless t[:warning]['levels'][0]['localAreas'][0]['peakTime'].nil?
					details = " #{t[:warning]['levels'][0]['localAreas'][0]['peakTime']}"
				else
					details = ""
				end
				tide = warningtimes(times,t[:warning]['properties'],"最高潮位",0)
				if times[i] >= $d24
					tomorrow.push("#{warning}　#{minmax(tide,$d24,$d48)} m#{details}")
				elsif times[i] < $d24 and times[j] >= $d24
					today.push("#{warning}　#{minmax(tide,$d0,$d24)} m#{details}")
					tomorrow.push("#{warning}　#{minmax(tide,$d24,$d48)} m#{details}")
				else
					today.push("#{warning}　#{minmax(tide,$d0,$d24)} m#{details}")
				end
			end
			unless k == "乾燥" or k == "雪崩" or k == "低温" or k == "霜"
				if times[i] >= $d24 and times[j] >= $d48
					tomorrow[-1] += "　 #{times[i].strftime('%k').strip}〜"
				elsif times[i] >= $d24
					tomorrow[-1] += "　 #{times[i].strftime('%k').strip}〜#{(times[j]+3.hours).strftime('%k').strip}時"
				elsif times[j] >= $d48
					today[-1] += "　#{times[i].strftime('%k').strip}時〜"
					tomorrow[-1] += "　今後も"
				elsif times[j] >= $d24
					today[-1] += "　#{times[i].strftime('%k').strip}時〜"
					tomorrow[-1] += "　〜#{(times[j]+3.hours).strftime('%k').strip}時"
				else
					today[-1] += "  #{times[i].strftime('%k').strip}〜#{(times[j]+3.hours).strftime('%k').strip}時"
				end
			end
		end
		today.map! {|x| x.gsub(/〜0時/,'〜24時')}
		tomorrow.map! {|x| x.gsub(/〜0時/,'〜24時')}
		listtoday.push("#{k}　#{today.join(' ')}") if today.length > 0
		listtomorrow.push("#{k}　#{tomorrow.join(' ')}") if tomorrow.length > 0
	end
	return listtoday,listtomorrow
end

def degpix(latdeg,londeg)
	lat = latdeg*Math::PI/180
	lon = londeg*Math::PI/180
	x = (lon - $left) * $xf
	y = ($ymax - Math::log(Math::tan((lat / 2) + (Math::PI / 4)))) * $yf
	return x,y
end

def drawtext(ilist,latdeg,londeg,radius,dir,speed,color,opacity,text)
	angle = (90 - dir) % 360
	x,y = degpix(latdeg,londeg)
	# xr = radius/10000 * Math::cos(dir*Math::PI/180)
	# yr = radius/10000 * Math::sin(dir*Math::PI/180)
	xr = speed * Math::cos(angle * Math::PI/180) * 2
	yr = speed * Math::sin(angle * Math::PI/180) * 2
	xp = x+xr
	yp = y-yr
	rgba = ilist.pixel_color(xp,yp+8)
	lum = ([rgba.red,rgba.green,rgba.blue].max - [rgba.red,rgba.green,rgba.blue].min) / 2
	unless text.nil?
		number = Magick::Draw.new
		number.pointsize = 24
		number.font_weight = Magick::BoldWeight
		number.stroke = 'black' if lum > 30000
		number.fill = "rgba(#{color.join(',')},#{opacity})"
		number.align = Magick::CenterAlign
		number.gravity = Magick::CenterGravity
		number.annotate(ilist,ilist.rows,ilist.columns,xp,yp+8,text)
	end
	return ilist
end

def drawdots(ilist,latdeg,londeg,fill,stroke,factor,opacity)
	x,y = degpix(latdeg,londeg)
	dots = Magick::Draw.new
	dots.fill_opacity(opacity)
	dots.stroke_opacity(opacity)
	dots.fill(fill)
	dots.stroke(stroke)
	dots.circle(x,y,x+x/factor,y)
	dots.draw(ilist)
	return ilist
end

def drawcircle(ilist,latdeg,londeg,radius,color,opacity,text)
	x,y = degpix(latdeg,londeg)
	r = londeg + (radius/6378000.0) * (180/Math::PI) / Math::cos(latdeg*Math::PI/180)
	xr = (r*Math::PI/180 - $left) * $xf
	circle = Magick::Draw.new
	circle.fill_opacity(0)
	circle.stroke_opacity(opacity).stroke_width(2)
	circle.fill(color)
	circle.stroke(color)
	circle.circle(x,y,xr,y)
	circle.draw(ilist)
	unless text.nil?
		number = Magick::Draw.new
		number.pointsize = 24
		number.font_weight = Magick::BoldWeight
		number.fill = 'yellow'
		number.align = Magick::CenterAlign
		number.gravity = Magick::CenterGravity
		number.annotate(ilist,ilist.rows,ilist.columns,xr,y+10,text)
	end
	return ilist
end

def typhoonimgdl(type)
	satlist = Magick::ImageList.new
	for i in $typhxa..$typhxb
		xlist = Magick::ImageList.new
		for j in $typhya..$typhyb
			url = "https://www.jma.go.jp/bosai/himawari/data/satimg/#{$dts}00/fd/#{$dts}00/#{type}/4/#{i}/#{j}.jpg"
			jpg = Magick::Image.from_blob(URI.open(url, :read_timeout => 120).read) do |image|
				image.format = 'JPG'
			end
			img = jpg[0].to_blob
			ylist = Magick::ImageList.new
			xlist.from_blob(img)
			xlist += ylist
		end
		row = xlist.append(true)
		rowlist = Magick::ImageList.new
		satlist.push(row)
	end
	
	typhimg = satlist.append(false)

	maplist = Magick::ImageList.new
	maplist.from_blob(Base64::decode64($typhmap64))
	
	satimglist = Magick::ImageList.new
	satimglist.from_blob(typhimg.to_blob)
	
	return satimglist.composite_layers(maplist,Magick::SoftLightCompositeOp)
end

def typhoonimg(list)
	begin
		typhcenters = []
		
		ilist = typhoonimgdl($typhtype)
		
		$left = 89.913889*Math::PI/180
		$right = 179.866667*Math::PI/180
		$top = 55.666667*Math::PI/180
		$bottom = -21.833333*Math::PI/180
		$ymin = Math::log(Math::tan(($bottom / 2) + (Math::PI / 4)))
		$ymax = Math::log(Math::tan(($top / 2) + (Math::PI / 4)))
		$xf = ilist.rows / ($right - $left)
		$yf = ilist.columns / ($ymax - $ymin)
		# https://gis.stackexchange.com/questions/74174/partial-map-pixel-projections
		
		list.each do |typh|
			text = typh[:num]
			forecast = JSON.parse(URI.open("https://www.jma.go.jp/bosai/typhoon/data/#{typh[:id]}/forecast.json").read)
			
			forecast[1]['track']['preTyphoon'].each do |c|
				ilist = drawdots(ilist,c[0],c[1],'lightskyblue','lightskyblue',256,0.7)
			end
			forecast[1]['track']['typhoon'].each do |c|
				ilist = drawdots(ilist,c[0],c[1],'dodgerblue','dodgerblue',256,0.7)
			end
			
			center = degpix(forecast[1]['center'][0],forecast[1]['center'][1])
			
			dir = winddegconv(typh[:course])
			unless typh[:wind].nil?
				if typh[:wind] < 44
					color = [255,255,0]
					opacity = 0.7
				elsif typh[:wind] < 54
					color = [255,140,0]
					opacity = 0.8
				else
					color = [255,70,0]
					opacity = 0.8
				end
				ilist = drawtext(ilist,forecast[1]['center'][0],forecast[1]['center'][1],forecast[1]['galeWarningArea']['radius'],dir,typh[:speed],color,opacity,text)
			else
				ilist = drawtext(ilist,forecast[1]['center'][0],forecast[1]['center'][1],320000,dir,typh[:speed],[255,255,255],0.7,text)
			end
			
			advanced = forecast.select { |x| not x['advancedHours'].nil? and x['advancedHours'] != 0 }
			advanced.each do |c|
				speed = typh[:advanced].reverse.find { |x| x[:hours] <= c['advancedHours'] } or typh[:advanced].find { |x| x[:hours] > c['advancedHours'] }
				if speed.nil? or speed[:wind].nil?
					color = 'cyan'
				elsif speed[:wind] < 25
					color = 'yellow'
				elsif speed[:wind] < 44
					color = 'orangered'
				elsif speed[:wind] < 54
					color = 'darkorange'
				else
					color = 'red'
				end
				ilist = drawdots(ilist,c['center'][0],c['center'][1],color,'cyan',128,0.7)
			end
			ilist = drawdots(ilist,forecast[1]['center'][0],forecast[1]['center'][1],'magenta','magenta',256,1)
			typhcenters.push(degpix(forecast[1]['center'][0],forecast[1]['center'][1]))
		end
		
		mapcenter = typhcenters.transpose.map { |c| median(c) }
		
		out = " | refresh=true image=#{Base64.encode64(ilist.crop(mapcenter[0]-384,mapcenter[1]-384,768,768,true).to_blob).gsub(/\n/, '')}"
		
		if ENV["SWIFTBAR"] and $typhtype != 'SND/ETC'
			ilistalt = typhoonimgdl('SND/ETC')
			out += "\n-- | refresh=true alternate=true image=#{Base64.encode64(ilistalt.crop(mapcenter[0]-384,mapcenter[1]-384,768,768,true).to_blob).gsub(/\n/, '')}"
		end
		
		return out
	rescue
		return '⚠️'
	end
end

def typhooninfo(ids)
	info = []
	list = []
	ids.each do |id|
		data  = JSON.parse(URI.open("https://www.jma.go.jp/bosai/typhoon/data/#{id}/specifications.json").read)
		analysis = data.select{|x|x['part']['jp']=='実況'}.first
		category = analysis['category']['jp']
		num = ''
		name = ''
		if data.first['typhoonNumber'][0..1].to_s == $dt.strftime("%y")
			num = data.first['typhoonNumber'][2..3].sub(/^0/,'')
			name = "第#{num}号　"
		end
		
		advanced = data.select{ |x| not x['part']['jp'].nil? and x['part']['jp'].match?('予報') }.map { |x| { :hours => x['advancedHours'], :wind => x['maximumWind']['sustained']['m/s'].to_i } }
		if analysis['speed']['km/h'].nil?
			speedtext = analysis['speed']['note']['jp']
			speed = 0
		else
			speedtext = "#{analysis['speed']['km/h']} km/h"
			speed = analysis['speed']['km/h']
		end
		
		if category == "台風"
			if analysis['maximumWind']['sustained']['m/s'].to_i >= 54
				color = $wrncolor
			elsif analysis['maximumWind']['sustained']['m/s'].to_i >= 44
				color = $advcolor
			else
				color = $textcolor
			end
			info.push("--#{category}　#{name}#{analysis['location']}　#{analysis['course']}　#{speedtext}　#{analysis['pressure']} hPa　#{analysis['maximumWind']['sustained']['m/s']} m/s (#{analysis['maximumWind']['gust']['m/s']} m/s) | color=#{color}")
			wind = analysis['maximumWind']['sustained']['m/s'].to_i
		else
			info.push("--#{category}　#{name}#{analysis['location']}　#{analysis['course']}　#{speedtext}　#{analysis['pressure']} hPa | color=#{$textcolor}")
			wind = nil
		end
		list.push({ :id => id, :num => num, :wind => wind, :speed => speed.to_i, :course => analysis['course'], :advanced => advanced })
	end
	return info,list
end

def earthquake
	json = JSON.parse(URI.open("https://www.jma.go.jp/bosai/quake/data/list.json", :read_timeout => 120).read)
	
	list = json.select do |x|
		x['int'].any? {|y| y['city'].any? {|z| z['code'] == $quakearea and z['maxi'].to_i > 1} }
	end
	if list.length > 0
		q = list.first
		mag = q['int'].select {|x| x['city'].any? {|y| y['code'] == $quakearea}}[0]['city'].select {|x| x['code'] == $quakearea}[0]['maxi']
		dep = (q['acd'].to_i / 5)#.round(-1)
	
		return "#{q['mag']} (#{mag})  #{q['anm']} #{dep} km  #{Time.parse(q['at']).strftime('%-m/%-d %H:%M')}"
	else
		return nil
	end
end

# 🌞🌝🌛🌜🌚🌕🌖🌗🌘🌑🌒🌓🌔🌙

def julian(year, month, day)
	a = (14 - month) / 12
	y = year + 4800- a
	m = (12 * a) - 3 + month
	return day + (153 *m + 2) / 5 + (365 * y) + y/4 - y/100 + y/400 - 32045
end

def forecasticon(forecast,istoday)
	icons = WEATHERCODEICON[forecast].clone
	$list = Magick::ImageList.new
	
	icons.each do |i|
		if i.length > 2 and $dt > $sunset and istoday
			p = (julian($dt.year, $dt.month, $dt.day) - julian(2000, 1, 6)) % 29.530588853
			if p < 1.84566
				j = 1  # new
			elsif p < 5.53699
				j = 2  # waxing crescent
			elsif p < 9.22831
				j = 3  # first quarter
			elsif p < 12.91963
				j = 4  # waxing gibbous
			elsif p < 16.61096
				j = 5  # full
			elsif p < 20.30228
				j = 6  # waning gibbous
			elsif p < 23.99361
				j = 7  # last quarter
			elsif p < 27.68493
				j = 8  # waning crescent
			else
				j = 2  # new
			end
		elsif i.length > 1 and $dt > $sunset and istoday
			j = 1
		else
			j = 0
		end
		png = Magick::Image.from_blob(Base64.decode64(i[j])) do |img|
			img.format = 'PNG'
			img.background_color = 'transparent'
		end
		img = png[0].to_blob
		list = Magick::ImageList.new
		list.from_blob(img)
		$list += list
	end

	img = $list.append(false).resize_to_fit!(72,24)
	if img.properties['png:IHDR.width,height'] == "24, 24"
		newimg = ::Magick::Image.new(72,24){ |i|
			i.format = 'PNG'
			i.background_color = 'transparent'
		}.matte_floodfill(1,1)
		newimg.composite!(img, Magick::CenterGravity, Magick::OverCompositeOp)
		img = newimg
	end
	img = img.modulate(0.01,1.0,1.0) unless isdarkmode
	return Base64.encode64(img.to_blob).gsub(/\n/, '')
end

def moon(thedate)
	p = (julian(thedate.year, thedate.month, thedate.day) - julian(2000, 1, 6)) % 29.530588853
	if ($moonrise > $moonset and $dt < $moonrise) or ($moonrise < $moonset and $dt > $moonset)
		return "✨"
	elsif p < 1.84566
		return "🌑"  # new
	elsif p < 5.53699
		return "🌒"  # waxing crescent
	elsif p < 9.22831
		return "🌓"  # first quarter
	elsif p < 12.91963
		return "🌔"  # waxing gibbous
	elsif p < 16.61096
		return "🌕"  # full
	elsif p < 20.30228
		return "🌖"  # waning gibbous
	elsif p < 23.99361
		return "🌗"  # last quarter
	elsif p < 27.68493
		return "🌘"  # waning crescent
	else
		return "🌑"  # new
	end
end

def currenticon(code)
case code.to_s
	# darksky/visualcrossing
	when "clear-day"
		icon = "☀️"
	when "clear-night"
		# icon = "🌙"
		icon = moon($dt)
	when "rain"
		icon = "☔️"
	when "snow"
		icon = "❄️"
	when "sleet"
		icon = "💦"
	when "wind"
		icon = "💨"
	when "fog"
		icon = "🌫"
	when "cloudy"
		icon = "☁️"
	when "partly-cloudy-day"
		icon = "⛅️"
	when "partly-cloudy-night"
		icon = "☁️"
	# climacell
	when "0" # Unknown
		icon = "❓"
	when "1000" # Clear
		isnight ? (icon = moon($dt)) : (icon = "☀️")
	when "1001" # Cloudy
		icon = "☁️"
	when "1100" # Mostly Clear
		isnight ? (icon = moon($dt)) : (icon = "⛅️")
	when "1101" # Partly Cloudy
		isnight ? (icon = "☁️") : (icon = "⛅️")
	when "1102" # Mostly Cloudy
		isnight ? (icon = "☁️") : (icon = "🌥")
	when "2000" # Fog
		icon = "🌫"
	when "2100" # Light Fog
		icon = "🌫"
	when "3000" # Light Wind
		icon = "💨"
	when "3001" # Wind
		icon = "💨"
	when "3002" # Strong Wind
		icon = "💨"
	when "4000" # Drizzle
		icon = "💧"
	when "4001" # Rain
		icon = "💧"
	when "4200" # Light Rain
		icon = "💧"
	when "4201" # Heavy Rain
		icon = "💦"
	when "5000" # Snow
		icon = "❄️"
	when "5001" # Flurries
		icon = "❄️"
	when "5100" # Light Snow
		icon = "❄️"
	when "5101" # Heavy Snow
		icon = "☃️"
	when "6000" # Freezing Drizzle
		icon = "💧"
	when "6001" # Freezing Rain
		icon = "🧊"
	when "6200" # Light Freezing Rain
		icon = "🧊"
	when "6201" # Heavy Freezing Rain
		icon = "🧊"
	when "7000" # Ice Pellets
		icon = "🧊"
	when "7101" # Heavy Ice Pellets
		icon = "🧊"
	when "7102" # Light Ice Pellets
		icon = "🧊"
	when "8000" # Thunderstorm
		icon = "⚡️"
	# 気象庁
	when "晴"
		isnight ? (icon = moon($dt)) : (icon = "☀️")
	when "雨"
		icon = "☔️"
	when "雪"
		icon = "❄️"
	when "霧"
		icon = "🌫"
	when "曇"
		icon = "☁️"
	when /[一-龠々]/
		icon = code
	else
		icon = "❓"
	end
end

def formatnum(s)
	return NKF.nkf('-X -w', s).tr('０-９．', '0-9.')
end

def formatdaysmenu(h)
	wind = h[:wind].split('　')[0].gsub('メートル',' m/s')
	if i = h[:wind].split('　').index{|x| x.match?(/では/)}
		wind += "　" + h[:wind].split('　')[1..i-2].join('　').gsub('メートル',' m/s')
		wind += "\n" + h[:wind].split('　')[i-1..-1].join('　').gsub('メートル',' m/s')
	else
		wind += "　" + h[:wind].split('　')[1..-1].join('　').gsub('メートル',' m/s')
	end
	wave = h[:wave].gsub('メートル',' m')
	text = "#{WEATHERCODE[h[:weather]]}\n#{wind}\n波　#{wave}"
	return formatnum(text)
end

def subdot(i)
	if i > 3
		'͔'
	elsif i > 2
		'⃨'
	elsif i > 1
		'̤'
	elsif i > 0
		'̣'
	else
		''
	end
end

def superdot(i)
	if i > 3
		# '⃜'
		'͐'
	elsif i > 2
		'⃛'
	elsif i > 1
		'̈'
	elsif i > 0
		'̇'
	else
		''
	end
end

def temprange(lt,t,ht)
	l = t-lt
	h = ht-t
	if t > 9
		return "#{t.to_s[0..-2]}#{subdot(l)}#{t.to_s[-1]}#{superdot(h)}"
	else
		return "#{t.to_s}#{subdot(l)}#{superdot(h)}"
	end
end

def percentbar(s)
	i = s.to_i
	if i > 90
		return "▓"
	elsif i > 80
		return "█"
	elsif i > 70
		return "▇"
	elsif i > 60
		return "▆"
	elsif i > 50
		return "▅"
	elsif i > 40
		return "▄"
	elsif i > 30
		return "▃"
	elsif i > 20
		return "▂"
	elsif i > 10
		return "▁"
	elsif i > 0
		return "＿"
	else
		return "　"
	end
end


mapurl = JSON.parse(URI.open("https://www.jma.go.jp/bosai/weather_map/data/list.json", :read_timeout => 120).read)['near']['now'][-1]

png = Magick::Image.from_blob(URI.open("https://www.jma.go.jp/bosai/weather_map/data/png/#{mapurl}", :read_timeout => 120).read) do |img|
	img.format = 'PNG'
	img.background_color = 'transparent'
end

isdarkmode ? (map = png[0].negate.modulate(1.0,1.0,2.0)) : (map = png[0])

m64 = "| refresh=true image=#{Base64.encode64(map.to_blob).gsub(/\n/, '')}"

begin
	$radimglist = Magick::ImageList.new
	
	for i in $radxa..$radxb
		ilist = Magick::ImageList.new
		for j in $radya..$radyb
			url = "https://www.jma.go.jp/bosai/jmatile/data/nowc/#{$dtr}00/none/#{$dtr}00/surf/hrpns/8/#{i}/#{j}.png"
			png = Magick::Image.from_blob(URI.open(url, :read_timeout => 120).read) do |image|
				image.format = 'PNG'
				image.background_color = 'transparent'
			end
			img = png[0].to_blob
			list = Magick::ImageList.new
			ilist.from_blob(img)
			ilist += list
		end
		row = ilist.append(true)
		rowlist = Magick::ImageList.new
		$radimglist.push(row)
	end
	
	radpng = $radimglist.append(false).modulate(0.9,2.0,1.0).level(0,0.4)
	
	if isdarkmode
		radimg = RADMAP.dissolve(radpng,0.2,1, Magick::CenterGravity)
	else
		radimg = RADMAP.modulate(0.7,1.0,1.0).dissolve(radpng,0.7,1, Magick::CenterGravity).level(Magick::QuantumRange/30,Magick::QuantumRange*0.85)
	end
	
	r64 = "| refresh=true image=#{Base64.encode64(radimg.to_blob).gsub(/\n/, '')}"
rescue
	r64 = '⚠️'
end

begin
	$satimglist = Magick::ImageList.new
	
	for i in $satxa..$satxb
		ilist = Magick::ImageList.new
		for j in $satya..$satyb
			url = "https://www.jma.go.jp/bosai/himawari/data/satimg/#{$dts}00/fd/#{$dts}00/#{$sattype}/5/#{i}/#{j}.jpg"
			jpg = Magick::Image.from_blob(URI.open(url, :read_timeout => 120).read) do |image|
				image.format = 'JPG'
			end
			img = jpg[0].to_blob
			list = Magick::ImageList.new
			ilist.from_blob(img)
			ilist += list
		end
		row = ilist.append(true)
		rowlist = Magick::ImageList.new
		$satimglist.push(row)
	end
	
	satjpg = $satimglist.append(false)
	
	satimg = Magick::Image.new(768,768){ |image|
		image.format = 'PNG'
		image.background_color = 'transparent'
	}
	satimg.composite!(satjpg, Magick::CenterGravity, Magick::OverCompositeOp)
	satimg.composite!(SATMAP, Magick::CenterGravity, Magick::SoftLightCompositeOp)

	s64 = " | refresh=true image=#{Base64.encode64(satimg.to_blob).gsub(/\n/, '')}"
rescue
	s64 = '⚠️'
end


if isdarkmode
	$textcolor = 'lightgray'
	$advcolor = 'yellow'
	$wrncolor = 'orange'
	# $textansi = '97' # SwiftBar不具合
	$textansi = '33'
	$rainansi = '36'
else
	$textcolor = 'darkslategray'
	$advcolor = 'orange red'
	$wrncolor = 'red'
	$textansi = '39'
	$rainansi = '1;36'
end

### 観測データ

if not $darkskyapi.nil?
	darksky = JSON.parse(URI.open("https://api.darksky.net/forecast/#{$darkskyapi}/#{$latlon.join(',')}?units=si").read)
	
	temp = darksky['currently']['temperature'].to_f.round(1)
	apptemp = darksky['currently']['apparentTemperature'].to_f.round(1)
	dewpoint = darksky['currently']['dewPoint'].to_f.round(1)
	humidity = (darksky['currently']['humidity'].to_f * 100).round(0) # %
	pressure = darksky['currently']['pressure'] # hectopascal
	windspeed = darksky['currently']['windSpeed'].to_f.round(1) # m/s
	gust = darksky['currently']['windGust'].to_f.round(1) # m/s
	winddir = darksky['currently']['windBearing'].to_i # deg
	uv = darksky['currently']['uvIndex']
	precip = darksky['currently']['precipIntensity'].to_f.round(1) # mm/h
	precipprob = darksky['currently']['precipProbability'].to_f.round(1)
	clouds = (darksky['currently']['cloudCover'] * 100).round(0) # %
	visibility = darksky['currently']['visibility'].to_f.round(0) # km
	icon = currenticon(darksky['currently']['icon'])
	
elsif not $openweatherapi.nil?
	openweather =  JSON.parse(URI.open("https://api.openweathermap.org/data/2.5/weather?id=#{$location}&units=metric&lang=ja&appid=#{$openweatherapi}").read)
	
	temp = openweather['main']['temp'].to_f.round(1)
	apptemp = openweather['main']['feels_like'].to_f.round(1)
	# dewpoint =
	humidity = (openweather['main']['humidity'].to_f * 100).round(0) # %
	pressure = openweather['main']['pressure'] # hectopascal
	windspeed = openweather['wind']['speed'].to_f.round(1) # m/s
	# gust = openweather['wind']['gust'].to_f.round(1) # m/s
	winddir = openweather['wind']['deg'].to_i # deg
	# uv =
	precip = openweather['rain']['rain.1h'].to_f.round(1) # mm 1hr
	snow = openweather['snow']['snow.1h'].to_f.round(1) # mm 1hr
	# precipprob =
	clouds = (openweather['clouds']['all']).round(0) # %
	visibility = openweather['visibility'].to_f.round(0) # km
	icon = openweather['weather']['main']
	
elsif not $visualcrossingapi.nil?
	visualcrossing = JSON.parse(URI.open("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/#{$latlon.join(',')}?unitGroup=metric&key=#{$visualcrossingapi}&include=alerts%2Ccurrent").read)
	
	temp = visualcrossing['currentConditions']['temp'].to_f.round(1)
	apptemp = visualcrossing['currentConditions']['feelslike'].to_f.round(1)
	dewpoint = visualcrossing['currentConditions']['dew'].to_f.round(1)
	humidity = visualcrossing['currentConditions']['humidity'].to_f.round(0) # %
	pressure = visualcrossing['currentConditions']['pressure'] # hectopascal
	windspeed = visualcrossing['currentConditions']['windspeed'].to_f.round(1) # m/s
	gust = visualcrossing['currentConditions']['windgust'].to_f.round(1) # m/s
	winddir = visualcrossing['currentConditions']['winddir'].to_i # deg
	if gust.nil?
		wind = "#{windspeed} m/s #{winddirconv(winddir)}"
	else
		wind = "#{windspeed} m/s (#{gust} m/s) #{winddirconv(winddir)}"
	end
	# 2021/02/02 wind, pressure, precip null
	unless visualcrossing['currentConditions']['cloudcover'].nil?
		cloudcover = visualcrossing['currentConditions']['cloudcover'].round(0) # %
	else
		cloudcover = 0
	end
	clouds = "#{cloudcover}%"
	visibility = visualcrossing['currentConditions']['visibility'].to_f.round(0) # km
	icon = currenticon(visualcrossing['currentConditions']['icon'])
	
elsif not $climacellapi.nil?
	climacell = JSON.parse(URI.open("https://data.climacell.co/v4/timelines?location=#{$latlon.join(',')}&timesteps=1m&timezone=Asia/Tokyo&fields=temperature,temperatureApparent,dewPoint,humidity,windSpeed,windDirection,windGust,pressureSurfaceLevel,precipitationIntensity,precipitationProbability,precipitationType,visibility,cloudCover,cloudBase,cloudCeiling,weatherCode,epaIndex,epaPrimaryPollutant,epaHealthConcern", 'content-type' => 'application/json', 'apikey' => $climacellapi).read)

	cccurrent = climacell['data']['timelines'][0]['intervals'].detect{|x| not x['values']['temperature'].nil? }['values']

	temp = cccurrent['temperature'].to_f.round(1)
	apptemp = cccurrent['temperatureApparent'].to_f.round(1)
	dewpoint = cccurrent['dewPoint'].to_f.round(1)
	humidity = cccurrent['humidity'].to_f.round(0) # %
	pressure = cccurrent['pressureSurfaceLevel'] # hectopascal
	windspeed = cccurrent['windSpeed'].to_f.round(1) # m/s
	gust = cccurrent['windGust'].to_f.round(1) # m/s
	winddir = cccurrent['windDirection'].to_i # deg
	wind = "#{windspeed} m/s (#{gust} m/s) #{winddirconv(winddir)}"
	# uv = cccurrent['uvIndex']
	precip = cccurrent['precipitationIntensity'].to_f.round(1) # mm/h
	precipprob = cccurrent['precipitationProbability'].to_f.round(1)
	preciptype = cccurrent['precipitationType'].to_i
	# 0: N/A, 1: Rain, 2: Snow, 3: Freezing Rain, 4: Ice Pellets
	cloudcover = (cccurrent['cloudCover']) # %
	cloudbase = cccurrent['cloudBase'] # km
	cloudceiling = cccurrent['cloudCeiling'] # km
	clouds = "#{cloudcover.round(0)}%"
	clouds += " (" unless cloudbase.nil? and cloudceiling.nil?
	clouds += "#{cloudbase}" unless cloudbase.nil?
	clouds += "~#{cloudceiling}" unless cloudceiling.nil?
	clouds += " km)" unless cloudbase.nil? and cloudceiling.nil?
	visibility = cccurrent['visibility'].to_f.round(0) # km
	icon = currenticon(cccurrent['weatherCode'].to_i)
	epaindex = cccurrent['epaIndex'].to_i
	epapol = cccurrent['epaPrimaryPollutant'].to_i
	# 0: PM2.5, 1: PM10, 2: O3, 3: NO2, 4: CO, 5: SO2
	epaconcern = cccurrent['epaHealthConcern'].to_i
	# 0: Good (0-50), 1: Moderate (51-100), 2: Unhealthy for Sensitive Groups (101-150)
	# 3: Unhealthy (151-200), 4: Very Unhealthy (201-300), 5: Hazardous (>301)
end

jma = JSON.parse(URI.open("https://www.jma.go.jp/bosai/amedas/data/point/#{$amedas}/#{$dtame}.json", :read_timeout => 120).read)

temp = humidity = pressure = precip = 0
wind = gust = mintemp = maxtemp = ''

current = jma.map {|k,v| v}.last
update = Time.parse(jma.map {|k,v| k}.last).strftime("%H:%M")
temp = windspeed = humidity = pressure = snow = 0
winddir = ''

temp = current['temp'].first
unless current['wind'].first.nil?
	wind = "#{winddirconv(current['windDirection'].first)} #{current['wind'].first} m/s"
	gust = "#{winddirconv(current['gustDirection'].first)} #{current['gust'].first} m/s #{(current['gustTime']['hour'].to_i+9)%24}時"
else
	wind = nil # 休止中らしい
	gust = nil
end
humidity = current['humidity'].first
pressure = current['normalPressure'].first
precip = current['precipitation1h'].first.to_i.round(0)
precipday = current['precipitation24h'].first.to_i.round(0)
snow = current['snow1h'].first.to_i.round(0) unless current['snow1h'].nil?
snowday = current['snow24h'].first.to_i.round(0) unless current['snow24h'].nil?
mintemp = "#{current['minTemp'].first}° #{(current['minTempTime']['hour'].to_i+9)%24}時"
maxtemp = "#{current['maxTemp'].first}° #{(current['maxTempTime']['hour'].to_i+9)%24}時"

dewpoint = (temp - (100 - humidity)/5).round(1)
capptemp = (temp + 0.33 * (6.105 * humidity/100 * Math::E**((17.27*temp)/(237.7+temp))) - 0.7 * windspeed - 4).round(1)
# http://www.bom.gov.au/info/thermal_stress/#atapproximation
efftemp = ( 37 - (37-temp)/(0.68-0.0014*humidity+1/(1.76+1.4*windspeed**0.75))-0.29*temp*(1-0.01*humidity)).round(1)
# https://link.springer.com/article/10.1007/s00484-011-0453-2

lastquake = earthquake

days = forecastdays
week = forecastweek
warnings = warning

icon = (currenticon(WEATHERCODE[days[0][:weather]][0])) if icon.nil?

######

puts "#{icon} #{temp}°"
puts "---"
puts "#{$place} | color=lightslategray"
puts "---"
# puts "温  #{temp}° (#{apptemp}°) | color=#{$textcolor}"
puts "\033[#{$textansi}m温  #{temp}° (#{efftemp}°)  \033[34m#{mintemp}  \033[31m#{maxtemp} | color=#{$textcolor} ansi=true"
puts "湿  #{humidity}% (#{dewpoint}°) | color=#{$textcolor}"
puts "圧  #{pressure} hPa | color=#{$textcolor}" unless pressure.nil?
puts "風  #{wind} (#{gust})| color=#{$textcolor}" unless wind.nil?
puts "雨  #{precip} mm/h (#{precipday} mm/d) | color=#{$textcolor}" if precip > 0
puts "雪  #{precip} mm/h (#{snowday} mm/d) | color=#{$textcolor}" if not snow.nil? and snow > 0
# puts "雨  #{precip} mm/h (#{precipprob} mm/h) #{rainfall if rainfall > 0} #{'mm' if rainfall > 0} | color=#{$textcolor}" if precip > 0 or precipprob > 0
puts "雲  #{clouds} | color=#{$textcolor}" unless clouds.nil?
puts "視  #{visibility} km | color=#{$textcolor}" unless visibility.nil?
puts "紫  #{uv} | color=#{$textcolor}" unless uv.nil?
puts "時  #{update} | color=lightslategray"
puts "震  #{lastquake} | color=#{$textcolor}" unless lastquake.nil?

puts "---"

# forecastdays today & tomorrow

for i in 0..1
	icon = ''
	case i
	when 0
		date = "今日#{days[0][:date].strftime('%-d')}日"
		istoday = true
	when 1
		date = "明日#{days[1][:date].strftime('%-d')}日"
		istoday = false
	end
	unless warnings[i].blank?
		if warnings[i].any? {|line| line.match("警報")}
			puts "#{date} | color=#{$wrncolor}"
		else
			puts "#{date} | color=#{$advcolor}"
		end
	else
		puts "#{date} | color=#{$textcolor}"
	end
	"#{formatdaysmenu(days[i])}".each_line do |line|
		puts "--#{line.strip} | color=#{$textcolor}"
	end
	rain = ['－','－','－','－']
	if i == 1 and $dt < $sunrise
		rain = [week[1][:pop]]
	else
		days[i][:pop].reverse.each_with_index do |x,i|
			rain[3-i] = x
		end
	end
	print "--雨　#{rain.join(' ')} | color=white\n"
	unless warnings[i].blank?
		warnings[i].each do |line|
			if line.match("警報")
				puts "--#{line.strip} | color=#{$wrncolor}"
			else
				puts "--#{line.strip} | color=#{$advcolor}"
			end
		end
	end
	icon = forecasticon(days[i][:weather],istoday)
	print "\033[#{$textansi}m"
	
	if i == 1 and days[i][:temp].empty?
		print "\t\033[34m#{week[1][:temp][:min]}˚"
		print "\t\033[31m#{week[1][:temp][:max]}˚"
	elsif days[i][:temp].empty?
		print "\t\t\t"
	elsif days[i][:temp][0] == days[i][:temp][1]
		print "\t\t\033[31m#{days[i][:temp][1]}˚"
	else
		print "\t\033[34m#{days[i][:temp][0]}˚"
		print "\t\033[31m#{days[i][:temp][1]}˚"
	end
	
	# print "\033[#{$textansi}m　▕\033[#{$rainansi}m"
	print "\033[#{$textansi}m　\033[#{$rainansi}m"
	if i == 1 and days[i][:pop].empty?
		print "\t\t "
		print percentbar(week[1][:pop])
	elsif days[i][:pop].is_a? Array
			print days[i][:pop].map {|x| "#{percentbar(x)}"}.join('').rjust(4,'　')
	else
		print percentbar(days[i][:pop])
	end
	# print "\033[#{$textansi}m▏"
	print "\033[#{$textansi}m　"
	print "| image=#{icon} color=#{$textcolor} size=16 ansi=true trim=false\n"
end

# forecastweek

week[1][:date] - $dt < 24.hours ? (w = 2) : (w = 1)

for i in w..6
	date = "#{week[i][:date].strftime('%-d')}日（#{WEEK[week[i][:date].strftime('%u')]}）"
	puts "#{date} | color=#{$textcolor}"

	if i == 1 and not days[2].nil?
		"#{formatdaysmenu(days[2])}".each_line do |line|
			puts "--#{line.strip} | color=#{$textcolor}"
		end
		print "--雨　#{week[i][:pop]} | color=white\n"
	end
	
	icon = forecasticon(week[i][:weather],false)
	
	print "\033[34m"
	print "\t"
	print temprange(week[i][:temp][:minlo].to_i,week[i][:temp][:min].to_i,week[i][:temp][:minup].to_i)
	print "\033[31m"
	print "\t"
	print temprange(week[i][:temp][:maxlo].to_i,week[i][:temp][:max].to_i,week[i][:temp][:maxup].to_i)
	
	print "\033[#{$rainansi}m"
	print "\t\t "
	print percentbar(week[i][:pop])
	print "| image=#{icon} color=#{$textcolor} size=16 ansi=true trim=false\n"
end


puts "---"
puts "天気概況 | color=#{$textcolor}"
overviewdays.each_line do |line|
	puts "--#{line.strip} | color=#{$textcolor}"
end
puts "二週間気温予報 | color=#{$textcolor}"
overviewweek.each_line do |line|
	puts "--#{line.strip} | color=#{$textcolor}"
end
puts "---"
puts "天気図 | color=#{$textcolor}"
puts "--#{m64}"
puts "レーダー | color=#{$textcolor}"
puts "--#{r64}"
puts "衛星 | color=#{$textcolor}"
puts "--#{s64}"

typhtarget = JSON.parse(URI.open("https://www.jma.go.jp/bosai/typhoon/data/targetTc.json", :read_timeout => 120).read).map {|x| x['tropicalCyclone']}

if typhtarget.length > 0
	typhtext,typhlist = typhooninfo(typhtarget)
	puts "台風情報 | ansi=false color=#{$textcolor} href=https://www.jma.go.jp/bosai/map.html#elem=root&typhoon=all&contents=typhoon"
	puts "--#{typhoonimg(typhlist)}"
	puts typhtext
end

puts "---"
puts "更新 | refresh=true ansi=false color=limegreen"
puts "気象庁…|href=https://www.jma.go.jp/forecast/#area_type=class20s&area_code=#{$local} ansi=false color=lightslategray"
