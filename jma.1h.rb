#!/usr/bin/env ruby

# <bitbar.title>Japan Weather</bitbar.title>
# <bitbar.version>0.6</bitbar.version>
# <bitbar.author.github>tsurezuregusa</bitbar.author.github>
# <bitbar.desc>Display local weather in Japan</bitbar.desc>
# <bitbar.dependencies>ruby >= 2.4, nokogiri (gem), activesupport (gem), faraday (gem), rmagick (gem), darksky-weather</bitbar.dependencies>

require 'open-uri'
require 'faraday'
require 'time'
require 'json'
require 'nkf'
require 'base64'
require 'rubygems'
require 'active_support'
require 'active_support/core_ext/numeric'
require 'nokogiri'
require 'rmagick'

$darkskyapi = 'x'
$latlon = '35.6895,139.6917'
$place = 'Êù±‰∫¨'

# $openweatherapi = 'x'
$openweatherloc = '1850147'
$visualcrossingapi = 'x'
$climacellapi = 'x'

$pref = '130000' # Êù±‰∫¨ÈÉΩ
$subarea = '1311300' # Ê∏ãË∞∑Âå∫
$area = '130010'
$quakearea = '1310100' # ÂçÉ‰ª£Áî∞Âå∫
# http://www.jma.go.jp/jp/amedas/000.html
$amedas = '44132'
# http://www.jma.go.jp/jp/warn/
$local = '1311300'

$naoopt = 13


######

class Time
	def round_off(seconds = 60)
		Time.at((self.to_f / seconds).round * seconds)
	end

	def floor(seconds = 60)
		Time.at((self.to_f / seconds).floor * seconds)
	end
end

$dt = Time.now
$dymd = $dt.strftime("%Y%m%d")
$dy = $dt.strftime("%j").to_i
$dw = Time.now.strftime("%-d")
$d0 = Time.parse("#{$dymd} 00:00:00 +0900")
$d24 = $d0 + 24.hours
$d48 = $d0 + 48.hours
$dtame = "#{($dt-20.minutes).floor(10.minutes).strftime('%Y%m%d')}_#{($dt-20.minutes).floor(3.hours).strftime('%H')}"
$dh = ($dt-6.minutes).strftime("%H").to_i
$dtr = $dt.utc.floor(5.minutes).strftime("%Y%m%d%H%M")
$dts = ($dt.utc-8.minutes).floor(10.minutes).strftime("%Y%m%d%H%M")

begin
	$koyomi = Nokogiri::HTML(URI.open("http://eco.mtk.nao.ac.jp/cgi-bin/koyomi/sunmoon.cgi"))
	$sunrise = Time.parse($koyomi.css('td').select{|text| text['class'] != 'left'}[0].text.strip)
	$sunset = Time.parse($koyomi.css('td').select{|text| text['class'] != 'left'}[2].text.strip)
	moonrisetext = $koyomi.css('td').select{|text| text['class'] != 'left'}[3].text.strip
	if not moonrisetext['-']
		$moonrise = moonrisetext
	else
		$moonrise = Time.parse('0:00')
	end
	moonsettext = $koyomi.css('td').select{|text| text['class'] != 'left'}[5].text.strip
	if not moonsettext['-']
		$moonrise = moonsettext
	else
		$moonrise = Time.parse('0:00')
	end
rescue
	$koyomi = Nokogiri::HTML(URI.open("http://www.hinode-hinoiri.com/131130.html"))
	$sunrise = Time.parse($koyomi.css('td').select{|text| text['table_line'] != 'left'}[1].text.sub('ÊôÇ',':').sub('ÂàÜ','').strip)
	$sunset = Time.parse($koyomi.css('td').select{|text| text['table_line'] != 'left'}[3].text.sub('ÊôÇ',':').sub('ÂàÜ','').strip)
	# TODO moonrise/set
	moonrisetext = $koyomi.css('td').select{|text| text['class'] != 'left'}[3].text.strip
	if not moonrisetext['-']
		$moonrise = moonrisetext
	else
		$moonrise = Time.parse('0:00')
	end
	moonsettext = $koyomi.css('td').select{|text| text['class'] != 'left'}[5].text.strip
	if not moonsettext['-']
		$moonrise = moonsettext
	else
		$moonrise = Time.parse('0:00')
	end
end

# cloudy, fine, fine night, rain, heavy rain, snow, heavy snow; then, occasional, once
# üåûüåùüåõüåúüåöüåïüåñüåóüåòüåëüåíüåìüåîüåô‚òÄÔ∏èüå§‚õÖÔ∏èüå•‚òÅÔ∏èüå¶üåß‚õàüå©üå®‚ùÑÔ∏è‚òÉÔ∏è‚õÑÔ∏èüå¨üí®üíßüí¶‚òîÔ∏è‚òÇÔ∏èüåà‚ö°Ô∏è‚ú®‚òÅÔ∏é‚òÄÔ∏é‚òº‚òæ‚òÇÔ∏é‚ùÜ‚ùÑÔ∏é

CLOUDY = '‚òÅÔ∏è'
FINE = '‚òÄÔ∏è'
FINENIGHT = 'üåô'
RAIN = 'üíß'
HEAVYRAIN = 'üí¶'
SNOW = '‚ùÑÔ∏è'
HEAVYSNOW = '‚òÉÔ∏è'
FOG = 'üå´'

# THEN = '‚àï'
# THEN = ' ‚Üí '
# THEN = ' > '
# THEN = '>'
# THEN = '‚ü∂'
THEN = '‚§á'
# THEN = '‚û°Ô∏è'

# OCCASIONAL = ' ‚áå '
# OCCASIONAL = '<->'
# OCCASIONAL = '‚àï'
# OCCASIONAL = '‚üã'
# OCCASIONAL = '‚ü∑'
# OCCASIONAL = '‚ü∫'
OCCASIONAL = '‚ü≥'
# OCCASIONAL = 'üîÅ'

# ONCE = ' ‚ùò '
# ONCE = '|' % does not work with bitbar
# ONCE = ' ‚•Ñ '
# ONCE = ' ‚•Ñ '
# ONCE = '‚ü∑'
# ONCE = '‚üª'
ONCE = '‚•Ñ'
# ONCE = '‚Ü©Ô∏è'

FINECLOUD = 'üå§'
CLOUDFINE = '‚õÖÔ∏è'
MOSTCLOUD = 'üå•'
LIGHTNING = '‚ö°Ô∏è'
LIGHTNINGRAIN = '‚õà'
WIND = 'üí®'
ICE = 'üßä'
UNKNOWN = '‚ùì'

ICONLENGTH = 7.5

WEEK = {
	"1" => "Êúà",
	"2" => "ÁÅ´",
	"3" => "Ê∞¥",
	"4" => "Êú®",
	"5" => "Èáë",
	"6" => "Âúü",
	"7" => "Êó•"
}

WEATHERCODE = {
	100 => "Êô¥",
	101 => "Êô¥ÊôÇ„ÄÖÊõá",
	102 => "Êô¥‰∏ÄÊôÇÈõ®",
	103 => "Êô¥ÊôÇ„ÄÖÈõ®",
	104 => "Êô¥‰∏ÄÊôÇÈõ™",
	105 => "Êô¥ÊôÇ„ÄÖÈõ™",
	106 => "Êô¥‰∏ÄÊôÇÈõ®„ÅãÈõ™",
	107 => "Êô¥ÊôÇ„ÄÖÈõ®„ÅãÈõ™",
	108 => "Êô¥‰∏ÄÊôÇÈõ®„ÅãÈõ∑Èõ®",
	110 => "Êô¥ÂæåÊôÇ„ÄÖÊõá",
	111 => "Êô¥ÂæåÊõá",
	112 => "Êô¥Âæå‰∏ÄÊôÇÈõ®",
	113 => "Êô¥ÂæåÊôÇ„ÄÖÈõ®",
	114 => "Êô¥ÂæåÈõ®",
	115 => "Êô¥Âæå‰∏ÄÊôÇÈõ™",
	116 => "Êô¥ÂæåÊôÇ„ÄÖÈõ™",
	117 => "Êô¥ÂæåÈõ™",
	118 => "Êô¥ÂæåÈõ®„ÅãÈõ™",
	119 => "Êô¥ÂæåÈõ®„ÅãÈõ∑Èõ®",
	120 => "Êô¥ÊúùÂ§ï‰∏ÄÊôÇÈõ®",
	121 => "Êô¥Êúù„ÅÆÂÜÖ‰∏ÄÊôÇÈõ®",
	122 => "Êô¥Â§ïÊñπ‰∏ÄÊôÇÈõ®",
	123 => "Êô¥Â±±Ê≤ø„ÅÑÈõ∑Èõ®",
	124 => "Êô¥Â±±Ê≤ø„ÅÑÈõ™",
	125 => "Êô¥ÂçàÂæå„ÅØÈõ∑Èõ®",
	126 => "Êô¥ÊòºÈ†É„Åã„ÇâÈõ®",
	127 => "Êô¥Â§ïÊñπ„Åã„ÇâÈõ®",
	128 => "Êô¥Â§ú„ÅØÈõ®",
	130 => "Êúù„ÅÆÂÜÖÈúßÂæåÊô¥",
	131 => "Êô¥Êòé„ÅëÊñπÈúß",
	132 => "Êô¥ÊúùÂ§ïÊõá",
	140 => "Êô¥ÊôÇ„ÄÖÈõ®„ÅßÈõ∑„Çí‰º¥„ÅÜ",
	160 => "Êô¥‰∏ÄÊôÇÈõ™„ÅãÈõ®",
	170 => "Êô¥ÊôÇ„ÄÖÈõ™„ÅãÈõ®",
	181 => "Êô¥ÂæåÈõ™„ÅãÈõ®",
	200 => "Êõá",
	201 => "ÊõáÊôÇ„ÄÖÊô¥",
	202 => "Êõá‰∏ÄÊôÇÈõ®",
	203 => "ÊõáÊôÇ„ÄÖÈõ®",
	204 => "Êõá‰∏ÄÊôÇÈõ™",
	205 => "ÊõáÊôÇ„ÄÖÈõ™",
	206 => "Êõá‰∏ÄÊôÇÈõ®„ÅãÈõ™",
	207 => "ÊõáÊôÇ„ÄÖÈõ®„ÅãÈõ™",
	208 => "Êõá‰∏ÄÊôÇÈõ®„ÅãÈõ∑Èõ®",
	209 => "Èúß",
	210 => "ÊõáÂæåÊôÇ„ÄÖÊô¥",
	211 => "ÊõáÂæåÊô¥",
	212 => "ÊõáÂæå‰∏ÄÊôÇÈõ®",
	213 => "ÊõáÂæåÊôÇ„ÄÖÈõ®",
	214 => "ÊõáÂæåÈõ®",
	215 => "ÊõáÂæå‰∏ÄÊôÇÈõ™",
	216 => "ÊõáÂæåÊôÇ„ÄÖÈõ™",
	217 => "ÊõáÂæåÈõ™",
	218 => "ÊõáÂæåÈõ®„ÅãÈõ™",
	219 => "ÊõáÂæåÈõ®„ÅãÈõ∑Èõ®",
	220 => "ÊõáÊúùÂ§ï‰∏ÄÊôÇÈõ®",
	221 => "ÊõáÊúù„ÅÆÂÜÖ‰∏ÄÊôÇÈõ®",
	222 => "ÊõáÂ§ïÊñπ‰∏ÄÊôÇÈõ®",
	223 => "ÊõáÊó•‰∏≠ÊôÇ„ÄÖÊô¥",
	224 => "ÊõáÊòºÈ†É„Åã„ÇâÈõ®",
	225 => "ÊõáÂ§ïÊñπ„Åã„ÇâÈõ®",
	226 => "ÊõáÂ§ú„ÅØÈõ®",
	228 => "ÊõáÊòºÈ†É„Åã„ÇâÈõ™",
	229 => "ÊõáÂ§ïÊñπ„Åã„ÇâÈõ™",
	230 => "ÊõáÂ§ú„ÅØÈõ™",
	231 => "ÊõáÊµ∑‰∏äÊµ∑Â≤∏„ÅØÈúß„ÅãÈúßÈõ®",
	240 => "ÊõáÊôÇ„ÄÖÈõ®„ÅßÈõ∑„Çí‰º¥„ÅÜ",
	250 => "ÊõáÊôÇ„ÄÖÈõ™„ÅßÈõ∑„Çí‰º¥„ÅÜ",
	260 => "Êõá‰∏ÄÊôÇÈõ™„ÅãÈõ®",
	270 => "ÊõáÊôÇ„ÄÖÈõ™„ÅãÈõ®",
	281 => "ÊõáÂæåÈõ™„ÅãÈõ®",
	300 => "Èõ®",
	301 => "Èõ®ÊôÇ„ÄÖÊô¥",
	302 => "Èõ®ÊôÇ„ÄÖÊ≠¢„ÇÄ",
	303 => "Èõ®ÊôÇ„ÄÖÈõ™",
	304 => "Èõ®„ÅãÈõ™",
	306 => "Â§ßÈõ®",
	308 => "Èõ®„ÅßÊö¥È¢®„Çí‰º¥„ÅÜ",
	309 => "Èõ®‰∏ÄÊôÇÈõ™",
	311 => "Èõ®ÂæåÊô¥",
	313 => "Èõ®ÂæåÊõá",
	314 => "Èõ®ÂæåÊôÇ„ÄÖÈõ™",
	315 => "Èõ®ÂæåÈõ™",
	316 => "Èõ®„ÅãÈõ™ÂæåÊô¥",
	317 => "Èõ®„ÅãÈõ™ÂæåÊõá",
	320 => "Êúù„ÅÆÂÜÖÈõ®ÂæåÊô¥",
	321 => "Êúù„ÅÆÂÜÖÈõ®ÂæåÊõá",
	322 => "Èõ®ÊúùÊô©‰∏ÄÊôÇÈõ™",
	323 => "Èõ®ÊòºÈ†É„Åã„ÇâÊô¥",
	324 => "Èõ®Â§ïÊñπ„Åã„ÇâÊô¥",
	325 => "Èõ®Â§ú„ÅØÊô¥",
	326 => "Èõ®Â§ïÊñπ„Åã„ÇâÈõ™",
	327 => "Èõ®Â§ú„ÅØÈõ™",
	328 => "Èõ®‰∏ÄÊôÇÂº∑„ÅèÈôç„Çã",
	329 => "Èõ®‰∏ÄÊôÇÈúô",
	340 => "Èõ™„ÅãÈõ®",
	350 => "Èõ®„ÅßÈõ∑„Çí‰º¥„ÅÜ",
	361 => "Èõ™„ÅãÈõ®ÂæåÊô¥",
	371 => "Èõ™„ÅãÈõ®ÂæåÊõá",
	400 => "Èõ™",
	401 => "Èõ™ÊôÇ„ÄÖÊô¥",
	402 => "Èõ™ÊôÇ„ÄÖÊ≠¢„ÇÄ",
	403 => "Èõ™ÊôÇ„ÄÖÈõ®",
	405 => "Â§ßÈõ™",
	406 => "È¢®Èõ™Âº∑„ÅÑ",
	407 => "Êö¥È¢®Èõ™",
	409 => "Èõ™‰∏ÄÊôÇÈõ®",
	411 => "Èõ™ÂæåÊô¥",
	413 => "Èõ™ÂæåÊõá",
	414 => "Èõ™ÂæåÈõ®",
	420 => "Êúù„ÅÆÂÜÖÈõ™ÂæåÊô¥",
	421 => "Êúù„ÅÆÂÜÖÈõ™ÂæåÊõá",
	422 => "Èõ™ÊòºÈ†É„Åã„ÇâÈõ®",
	423 => "Èõ™Â§ïÊñπ„Åã„ÇâÈõ®",
	425 => "Èõ™‰∏ÄÊôÇÂº∑„ÅèÈôç„Çã",
	426 => "Èõ™ÂæåÈúô",
	427 => "Èõ™‰∏ÄÊôÇÈúô",
	450 => "Èõ™„ÅßÈõ∑„Çí‰º¥„ÅÜ"
}

WARNINGCODE = {
	"02" => {:name => "Êö¥È¢®Èõ™", :type => "Ë≠¶Â†±"},
	"03" => {:name => "Â§ßÈõ®", :type => "Ë≠¶Â†±"},
	"04" => {:name => "Ê¥™Ê∞¥", :type => "Ë≠¶Â†±"},
	"05" => {:name => "Êö¥È¢®", :type => "Ë≠¶Â†±"},
	"06" => {:name => "Â§ßÈõ™", :type => "Ë≠¶Â†±"},
	"07" => {:name => "Ê≥¢Êµ™", :type => "Ë≠¶Â†±"},
	"08" => {:name => "È´òÊΩÆ", :type => "Ë≠¶Â†±"},
	"10" => {:name => "Â§ßÈõ®", :type => "Ê≥®ÊÑèÂ†±"},
	"12" => {:name => "Â§ßÈõ™", :type => "Ê≥®ÊÑèÂ†±"},
	"13" => {:name => "È¢®Èõ™", :type => "Ê≥®ÊÑèÂ†±"},
	"14" => {:name => "Èõ∑", :type => "Ê≥®ÊÑèÂ†±"},
	"15" => {:name => "Âº∑È¢®", :type => "Ê≥®ÊÑèÂ†±"},
	"16" => {:name => "Ê≥¢Êµ™", :type => "Ê≥®ÊÑèÂ†±"},
	"17" => {:name => "ËûçÈõ™", :type => "Ê≥®ÊÑèÂ†±"},
	"18" => {:name => "Ê¥™Ê∞¥", :type => "Ê≥®ÊÑèÂ†±"},
	"19" => {:name => "È´òÊΩÆ", :type => "Ê≥®ÊÑèÂ†±"},
	"20" => {:name => "ÊøÉÈúß", :type => "Ê≥®ÊÑèÂ†±"},
	"21" => {:name => "‰πæÁá•", :type => "Ê≥®ÊÑèÂ†±"},
	"22" => {:name => "Èõ™Â¥©", :type => "Ê≥®ÊÑèÂ†±"},
	"23" => {:name => "‰ΩéÊ∏©", :type => "Ê≥®ÊÑèÂ†±"},
	"24" => {:name => "Èúú", :type => "Ê≥®ÊÑèÂ†±"},
	"25" => {:name => "ÁùÄÊ∞∑", :type => "Ê≥®ÊÑèÂ†±"},
	"26" => {:name => "ÁùÄÈõ™", :type => "Ê≥®ÊÑèÂ†±"},
	"32" => {:name => "Êö¥È¢®Èõ™", :type => "ÁâπÂà•Ë≠¶Â†±"},
	"33" => {:name => "Â§ßÈõ®", :type => "ÁâπÂà•Ë≠¶Â†±"},
	"35" => {:name => "Êö¥È¢®", :type => "ÁâπÂà•Ë≠¶Â†±"},
	"36" => {:name => "Â§ßÈõ™", :type => "ÁâπÂà•Ë≠¶Â†±"},
	"37" => {:name => "Ê≥¢Êµ™", :type => "ÁâπÂà•Ë≠¶Â†±"},
	"38" => {:name => "È´òÊΩÆ", :type => "ÁâπÂà•Ë≠¶Â†±"}
}

$forecast = JSON.parse(URI.open("https://www.jma.go.jp/bosai/forecast/data/forecast/#{$pref}.json").read)

def forecastdays
	fcarea = $forecast.first['timeSeries'][0]['areas'].select {|x| x['area']['code'] == $area }.first
	fctime = $forecast.first['timeSeries'][0]['timeDefines']
	
	tmarea = $forecast.first['timeSeries'][2]['areas'].select {|x| x['area']['code'] == $amedas }.first['temps']
	tmtime = $forecast.first['timeSeries'][2]['timeDefines']
	
	pparea = $forecast.first['timeSeries'][1]['areas'].select {|x| x['area']['code'] == $area }.first['pops']
	pptime = $forecast.first['timeSeries'][1]['timeDefines']
	
	temp = [[],[],[]]
	pop = [[],[],[]]
	
	tmtime.each_with_index do |t,i|
		if Time.parse(t) - Time.parse("#{$dymd}T00:00:00+09:00") < 24.hours
			temp[0].push(tmarea[i])
		elsif Time.parse(t) - Time.parse("#{$dymd}T00:00:00+09:00") >= 24.hours and Time.parse(t) - Time.parse("#{$dymd}T00:00:00+09:00") <= 48.hours
			temp[1].push(tmarea[i])
		elsif Time.parse(t) - Time.parse("#{$dymd}T00:00:00+09:00") > 48.hours
			temp[2].push(tmarea[i])
		end
	end
	
	pptime.each_with_index do |t,i|
		if Time.parse(t) - Time.parse("#{$dymd}T00:00:00+09:00") < 24.hours
			pop[0].push(pparea[i])
		elsif Time.parse(t) - Time.parse("#{$dymd}T00:00:00+09:00") >= 24.hours and Time.parse(t) - Time.parse("#{$dymd}T00:00:00+09:00") <= 48.hours
			pop[1].push(pparea[i])
		elsif Time.parse(t) - Time.parse("#{$dymd}T00:00:00+09:00") > 48.hours
			pop[2].push(pparea[i])
		end
	end
	out = []
	for i in 0..fctime.length-1
		out.push({
			:date => Time.parse(fctime[i]),
			:weather => fcarea['weatherCodes'][i].to_i,
			:wind => fcarea['winds'][i],
			:wave => fcarea['waves'][i],
			:temp => temp[i],
			:pop => pop[i]
		})
	end
	return out
end

def forecastweek
	fcarea = $forecast.last['timeSeries'][0]['areas'].select {|x| x['area']['code'] == $area }.first
	fctime = $forecast.last['timeSeries'][0]['timeDefines']
	
	tmarea = $forecast.last['timeSeries'][1]['areas'].select {|x| x['area']['code'] == $amedas }.first
	tmtime = $forecast.last['timeSeries'][1]['timeDefines']
	
	temp = []
	tmtime.each_with_index do |t,i|
		temp.push({
			:min => tmarea['tempsMin'][i],
			:minup => tmarea['tempsMinUpper'][i],
			:minlo => tmarea['tempsMinLower'][i],
			:max => tmarea['tempsMax'][i],
			:maxup => tmarea['tempsMaxUpper'][i],
			:maxlo => tmarea['tempsMaxLower'][i]
		})
	end
	out = []
	for i in 0..fctime.length-1
		out.push({
			:date => Time.parse(fctime[i]),
			:weather => fcarea['weatherCodes'][i].to_i,
			:temp => temp[i],
			:pop => fcarea['pops'][i]
		})
	end
	return out
end

def overviewdays
	json = JSON.parse(URI.open("https://www.jma.go.jp/bosai/forecast/data/overview_forecast/#{$pref}.json").read)
	
	text = "#{json['headlineText']}\n\n"
	text += "#{json['text']}"
	text.gsub!(/([\p{Hiragana}\p{Katakana}])\s*$\n/, '\1')
	text.gsub!(/^„ÄÄ/, '')
	text.gsub!(/[Ôºû„ÄëÔºâ]/, '\0\n')
	text.gsub!(/[Ôºà]/, '\n\0')
	text.gsub!(/[^Á∑ö][„Åó„Çä„Åå]„ÄÅ/, '\0\n')
	text.gsub!(/[^„ÅÆ]„Åü„ÇÅ„ÄÅ/, '\0\n')
	text.gsub!(/„ÄÇ/, '\0\n')
	text.gsub!(/\\n/, "\n")
	text.gsub!(/\n^„ÄÄ+$\n/, "\n")
	text.gsub!(/\n\s*\n\s*\n/, "\n\n")
	text = "#{Time.parse(json['reportDatetime']).strftime("%YÂπ¥%mÊúà%dÊó• %HÊôÇ%MÂàÜ")}\n\n" + text
	text = NKF.nkf('-X -w', text).tr('Ôºê-ÔºôÔºé', '0-9.')
	return text
end

def overviewweek
	json = JSON.parse(URI.open("https://www.jma.go.jp/bosai/forecast/data/overview_week/#{$pref}.json").read)
	
	text = "#{json['headTitle']}\n\n"
	text += "#{json['text']}"
	date = "#{text.lines.first.strip}„ÄÄ#{Time.parse(json['reportDatetime']).strftime("%YÂπ¥%mÊúà%dÊó• %HÊôÇ%MÂàÜ")}"
	a = [date] + text.lines[1..-1]
	text = a.join("\n\n")
	text.gsub!(/([\p{Hiragana}\p{Katakana}])\s*$\n/, '\1')
	text.gsub!(/^„ÄÄ/, '')
	text.gsub!(/[Ôºû„ÄëÔºâ]/, '\0\n')
	text.gsub!(/[Ôºà]/, '\n\0')
	text.gsub!(/[^Á∑ö][„Åè„Åó„Çä„Åå]„ÄÅ/, '\0\n')
	text.gsub!(/[^„ÅÆ]„Åü„ÇÅ„ÄÅ/, '\0\n')
	text.gsub!(/„Åæ„Åß„ÄÄ/, '\0\n\n')
	text.gsub!(/„ÄÇ/, '\0\n\n')
	text.gsub!(/\\n/, "\n")
	text.gsub!(/\n^„ÄÄ+$\n/, "\n")
	text.gsub!(/\n\s*\n\s*\n/, "\n\n")
	text = NKF.nkf('-X -w', text).tr('Ôºê-ÔºôÔºé', '0-9.')
	return text.strip
end

def minmax(list,st,et)
	a = list.map {|date,val| val if date >= st and date <= et }.reject(&:blank?)
	if a.min == a.max
		return "#{a.min}"
	else
		return "#{a.min}„Äú#{a.max}"
	end
end

def windwarn(a)
	if a.length > 1
		dir = a.map {|d,s| d}.uniq
		spd = a.map {|d,s| s}.uniq
		min = a.map{|d,s|s}.min
		max = a.map{|d,s|s}.max
		if dir.length > 1 and spd.length == 1
			return "#{dir.join('„Äú')} #{spd.join('')} m/s"
		elsif dir.length > 1 and spd.length > 2
			return "#{dir.join('„Äú')} #{min}„Äú#{max} m/s"
		elsif dir.length > 1 and spd.length > 1
			return "#{dir.join('„Äú')} #{spd.join('„Äú')} m/s"
		else
			return "#{dir.join('')} #{min}„Äú#{max} m/s"
		end
	else
		return "#{a[0][0]} #{a[0][1]} m/s"
	end
end

def warningtimes(t,l,s,i)
	v = l.select {|x| x['type'] == s }.map {|x| x['localAreas'][i]['values'] }
	return Hash[t.zip(v.flatten)]
end

def warning
	json = JSON.parse(URI.open("https://www.jma.go.jp/bosai/warning/data/warning/#{$pref}.json").read)
	
	warnings = json['areaTypes'].last['areas'].select {|x| x['warnings'] if x['code'] == $local and not x['warnings'].any?{|y| y['status'] == "Ëß£Èô§"}}.map {|x| x['warnings']}.flatten
	
	times = []
	json['timeSeries'].each do |x|
		h = {
			:times => x['timeDefines'],
			:warnings => x['areaTypes'].last['areas'].select {|y| y['code'] == $local}.map {|x| x['warnings']}.flatten
		}
		times.push(h)
	end
	
	sort = Hash.new{|h,k| h[k] = [] }
	warnings.each do |x|
		name = WARNINGCODE[x['code']][:name]
		time = times.select {|y| y[:warnings].any? {|z| z['code'] == x['code']}}.first
		warning = time[:warnings].select {|y| y['code'] == x['code']}.first
		# ['status'] Áô∫Ë°® Á∂ôÁ∂ö Áô∫Ë°®Ë≠¶Â†±„ÉªÊ≥®ÊÑèÂ†±„ÅØ„Å™„Åó
		sort[name].push({:time=>time[:times],:warning=>warning}) unless x['status'].match? /„Å™„Åó$/
	end
	# puts sort.pretty_inspect
	listtoday = []
	listtomorrow = []
	sort.each do |k,v|
		today = []
		tomorrow = []
		v.each do |t|
			times = t[:time].map {|x| Time.parse(x)}
			
			if local = t[:warning]['levels'][0]['localAreas'].find_index {|x| x['localAreaName'] == "Èô∏‰∏ä"}
			else
				local = 0
			end
			data = t[:warning]['levels'][0]['localAreas']
			unless data.first['localAreaName'].nil?
				areas = data.map {|x| "#{x['localAreaName']} "}
			else
				areas = [""]
			end
			
			i = data[0]['values'].each_index.select {|y| data[0]['values'][y] != "" and data[0]['values'][y] != "00"}[0]
			j = data[0]['values'].each_index.select {|y| data[0]['values'][y] != "" and data[0]['values'][y] != "00"}[-1]
			
			warning = WARNINGCODE[t[:warning]['code']][:type]
			
			if k == "Èõ∑" or k == "ËûçÈõ™" or k == "Èúú" or k == "Èõ™Â¥©" or k == "ÁùÄÊ∞∑" or k == "ÁùÄÈõ™"
				unless data[0]['additions'].nil?
					details = " #{data[0]['additions'].join('„ÄÄ')}"
				else
					details = ''
				end
				if times[i] >= $d24
					tomorrow.push("#{warning}„ÄÄ#{details}")
				elsif times[i] < $d24 and times[j] >= $d24
					today.push("#{warning}„ÄÄ#{details}")
					tomorrow.push("#{warning}„ÄÄ#{details}")
				else
					today.push("#{warning}„ÄÄ#{details}")
				end
			elsif k == "‰πæÁá•"
				effhum = warningtimes(times,t[:warning]['properties'],"ÂÆüÂäπÊπøÂ∫¶",local)
				minhum = warningtimes(times,t[:warning]['properties'],"ÊúÄÂ∞èÊπøÂ∫¶",local)
				if times[i] >= $d24
					tomorrow.push("#{warning}„ÄÄÂÆüÂäπÊπøÂ∫¶ #{minmax(effhum,$d24,$d48)}% ÊúÄÂ∞èÊπøÂ∫¶ #{minmax(minhum,$d24,$d48)}%")
				elsif times[i] < $d24 and times[j] >= $d24
					today.push("#{warning}„ÄÄÂÆüÂäπÊπøÂ∫¶ #{minmax(effhum,$d0,$d24)}%„ÄÄÊúÄÂ∞èÊπøÂ∫¶ #{minmax(minhum,$d24,$d48)}%")
					tomorrow.push("#{warning}„ÄÄÂÆüÂäπÊπøÂ∫¶ #{minmax(effhum,$d24,$d48)}%  ÊúÄÂ∞èÊπøÂ∫¶ #{minmax(minhum,$d24,$d48)}%")
				else
					today.push("#{warning}„ÄÄÂÆüÂäπÊπøÂ∫¶ #{minmax(effhum,$d0,$d24)}%  ÊúÄÂ∞èÊπøÂ∫¶ #{minmax(minhum,$d0,$d24)}%")
				end
			elsif k == "‰ΩéÊ∏©"
				if times[i] >= $d24
					tomorrow.push("#{warning}")
				elsif times[i] < $d24 and times[j] >= $d24
					today.push("#{warning}")
					tomorrow.push("#{warning}")
				else
					today.push("#{warning}")
				end
			elsif k == "Â§ßÈõ®"
				if times[i] >= $d24
					tomorrow.push("#{warning}")
				elsif times[i] < $d24 and times[j] >= $d24
					today.push("#{warning}")
					tomorrow.push("#{warning}")
				else
					today.push("#{warning}")
				end
			elsif k == "Â§ßÈõ™"
				if times[i] >= $d24
					tomorrow.push("#{warning}")
				elsif times[i] < $d24 and times[j] >= $d24
					today.push("#{warning}")
					tomorrow.push("#{warning}")
				else
					today.push("#{warning}")
				end
			elsif k == "Âº∑È¢®" or k == "Êö¥È¢®" or k == "È¢®Èõ™" or k == "Êö¥È¢®Èõ™"
				todayarea = []
				tomorrowarea = []
				for area in 0..data.length-1
					speed = []
					dir = []
					t[:warning]['properties'].select {|x| x['type'] == "ÊúÄÂ§ßÈ¢®ÈÄü" }.each do |x|
						speed += x['localAreas'][area]['values']
					end
					t[:warning]['properties'].select {|x| x['type'] == "È¢®Âêë" }.each do |x|
						dir += x['localAreas'][area]['windDirections'].map {|y| y['value']}
					end
					h = Hash[times.zip(dir.zip(speed))]
					if times[i] >= $d24
						a = h.select {|k,v| k >= $d24 and not v.join('').empty? }.map {|k,v| v}.uniq
						tomorrowarea.push("#{areas[area]}#{windwarn(a)}")
					elsif times[i] < $d24 and times[j] >= $d24
						a = h.select {|k,v| k >= $d0 and k <= $d24 and not v.join('').empty? }.map {|k,v| v}.uniq
						todayarea.push("#{areas[area]}#{windwarn(a)}")
						b = h.select {|k,v| k >= $d24 and not v.join('').empty? }.map {|k,v| v}.uniq
						tomorrowarea.push("#{areas[area]}#{windwarn(b)}")
					else
						a = h.select {|k,v| k >= $d0 and k <= $d24 and not v.join('').empty? }.map {|k,v| v}.uniq
						todayarea.push("#{areas[area]}#{windwarn(a)}")
					end
				end
				today.push("#{warning}„ÄÄ#{todayarea.join('„ÄÄ')}") if todayarea.length > 0
				tomorrow.push("#{warning}„ÄÄ#{tomorrowarea.join('„ÄÄ')}") if tomorrowarea.length > 0
			elsif k == "Ê≥¢Êµ™"
				wave = warningtimes(times,t[:warning]['properties'],"Ê≥¢È´ò",0)
				if times[i] >= $d24
					tomorrow.push("#{warning}„ÄÄ#{minmax(wave,$d24,$d48)}m")
				elsif times[i] < $d24 and times[j] >= $d24
					today.push("#{warning}„ÄÄ#{minmax(wave,$d0,$d24)}m")
					tomorrow.push("#{warning}„ÄÄ#{minmax(wave,$d24,$d48)}m")
				else
					today.push("#{warning}„ÄÄ#{minmax(wave,$d0,$d24)}m")
				end
			elsif k == "Ê¥™Ê∞¥"
				if times[i] >= $d24
					tomorrow.push("#{warning}")
				elsif times[i] < $d24 and times[j] >= $d24
					today.push("#{warning}")
					tomorrow.push("#{warning}")
				else
					today.push("#{warning}")
				end
			elsif k == "ÊøÉÈúß"
				if times[i] >= $d24
					tomorrow.push("#{warning}")
				elsif times[i] < $d24 and times[j] >= $d24
					today.push("#{warning}")
					tomorrow.push("#{warning}")
				else
					today.push("#{warning}")
				end
			elsif k == "È´òÊΩÆ"
				if times[i] >= $d24
					tomorrow.push("#{warning}")
				elsif times[i] < $d24 and times[j] >= $d24
					today.push("#{warning}")
					tomorrow.push("#{warning}")
				else
					today.push("#{warning}")
				end
			end
			
			if times[i] >= $d24 and times[j] >= $d48
				tomorrow[-1] += "„ÄÄ #{times[i].strftime('%k').strip}„Äú"
			elsif times[i] >= $d24
				tomorrow[-1] += "„ÄÄ #{times[i].strftime('%k').strip}„Äú#{(times[j]+3.hours).strftime('%k').strip}ÊôÇ"
			elsif times[j] >= $d48
				today[-1] += "„ÄÄ#{times[i].strftime('%k').strip}ÊôÇ„Äú"
				tomorrow[-1] += "„ÄÄ‰ªäÂæå„ÇÇ"
			elsif times[j] >= $d24
				today[-1] += "„ÄÄ#{times[i].strftime('%k').strip}ÊôÇ„Äú"
				tomorrow[-1] += "„ÄÄ„Äú#{(times[j]+3.hours).strftime('%k').strip}ÊôÇ"
			else
				today[-1] += "  #{times[i].strftime('%k').strip}„Äú#{(times[j]+3.hours).strftime('%k').strip}ÊôÇ"
			end
		end
		listtoday.push("#{k}„ÄÄ#{today.join(' ')}") if today.length > 0
		listtomorrow.push("#{k}„ÄÄ#{tomorrow.join(' ')}") if tomorrow.length > 0
	end
	return listtoday,listtomorrow
end

def typhoonimg
	begin
		img = Magick::Image::from_blob(URI.open('http://www.jma.go.jp/jp/typh/images/wide/all-00.png').read).first.crop(0,0,480,335,true)
		return "| refresh=true image=#{Base64.encode64(img.to_blob).gsub(/\n/, '')}"
	rescue
		return '‚ùå'
	end
end

def typhooninfo(list)
	info = []
	list.each do |id|
		data  = JSON.parse(URI.open("https://www.jma.go.jp/bosai/typhoon/data/#{id}/specifications.json").read)
		analysis = data.select{|x|x['part']['jp']=='ÂÆüÊ≥Å'}.first
		name = analysis['category']['jp']
		if name == "Âè∞È¢®"
			info.push("#{name} Á¨¨#{id[-2..-1].to_i}Âè∑  #{analysis['location']}  #{analysis['course']}  #{analysis['speed']['km/h']} km/h  #{analysis['pressure']} hPa  #{analysis['maximumWind']['sustained']['m/s']} m/s (#{analysis['maximumWind']['gust']['m/s']} m/s)")
		else
			info.push("--#{name} Á¨¨#{id[-2..-1].to_i}Âè∑  #{analysis['location']}  #{analysis['course']}  #{analysis['speed']['km/h']} km/h  #{analysis['pressure']} hPa | color=#{$textcolor}")
		end
	end
	return info
end

def earthquake
	# json = JSON.parse(URI.open("https://www.jma.go.jp/bosai/quake/data/list.json").read)
	
	json = JSON.parse(URI.open("#{Dir.home}/src/bitbar-plugins/jma/quake.json").read)
	
	list = json.select do |x|
		x['int'].any? {|y| y['city'].any? {|z| z['code'] == $quakearea and z['maxi'].to_i > 1} }
	end
	if list.length > 0
		q = list.first
		mag = q['int'].select {|x| x['city'].any? {|y| y['code'] == $quakearea}}[0]['city'].select {|x| x['code'] == $quakearea}[0]['maxi']
		dep = (q['acd'].to_i / 5)#.round(-1)
	
		return "#{q['mag']} (#{mag})  #{q['anm']} #{dep} km  #{Time.parse(q['at']).strftime('%-m/%-d %H:%M')}"
	else
		return nil
	end
end

# üåûüåùüåõüåúüåöüåïüåñüåóüåòüåëüåíüåìüåîüåô

def isnight
	if $dt > $sunset
		return true
	else
		return false
	end
end

def ifdarkmode
	if ENV["SWIFTBAR"]
		if ENV["OS_APPEARANCE"] == "Light"
			return false
		else
			return true
		end
	else
		if `/usr/bin/defaults read -g AppleInterfaceStyleSwitchesAutomatically 2> /dev/null`['1']
			if $dt < ($sunrise + 1.hours) or $dt > ($sunset - 1.hours)
				return true
			else
				return false
			end
		else
			return true
		end
	end
end

def julian(year, month, day)
	a = (14 - month) / 12
	y = year + 4800- a
	m = (12 * a) - 3 + month
	return day + (153 *m + 2) / 5 + (365 * y) + y/4 - y/100 + y/400 - 32045
end

def moon(thedate)
	p = (julian(thedate.year, thedate.month, thedate.day) - julian(2000, 1, 6)) % 29.530588853

	if p < 1.84566
		return "üåë"  # new
	elsif p < 5.53699
		return "üåí"  # waxing crescent
	elsif p < 9.22831
		return "üåì"  # first quarter
	elsif p < 12.91963
		return "üåî"  # waxing gibbous
	elsif p < 16.61096
		return "üåï"  # full
	elsif p < 20.30228
		return "üåñ"  # waning gibbous
	elsif p < 23.99361
		return "üåó"  # last quarter
	elsif p < 27.68493
		return "üåò"  # waning crescent
	else
		return "üåë"  # new
	end
end

def forecasticon(forecast,istoday)
	icon = WEATHERCODE[forecast].clone
	
	icon = "#{SNOW}#{WIND}" if icon == "Êö¥È¢®Èõ™" or icon == "È¢®Èõ™Âº∑„ÅÑ"
	icon = HEAVYRAIN if icon == "Èõ®‰∏ÄÊôÇÂº∑„ÅèÈôç„Çã" or icon == "Â§ßÈõ®"
	icon = HEAVYSNOW if icon == "Èõ™‰∏ÄÊôÇÂº∑„ÅèÈôç„Çã"
	
	icon.sub!(/Â±±Ê≤ø„ÅÑ.+/,'')
	icon.sub!("Êô¥Êòé„ÅëÊñπÈúß","#{FOG} #{THEN} Êô¥")
	icon.sub!("ÊõáÊµ∑‰∏äÊµ∑Â≤∏„ÅØÈúß„ÅãÈúßÈõ®",CLOUDY)
	
	if istoday and isnight
		icon.sub!("Êô¥",moon($dt))
	else
		icon.sub!("Êô¥",FINE)
	end
	
	icon.sub!("„ÅßÈõ∑„Çí‰º¥„ÅÜ",LIGHTNING)
	icon.sub!("Èõ®„ÅãÈõ∑Èõ®","#{RAIN}#{LIGHTNING}")
	icon.sub!("Èõ∑Èõ®",LIGHTNINGRAIN)
	icon.sub!("„ÅßÊö¥È¢®„Çí‰º¥„ÅÜ",WIND)
	
	icon.sub!(/^Êúù„ÅÆÂÜÖ/,'')
	icon = icon.sub("Êúù„ÅÆÂÜÖ‰∏ÄÊôÇ",'').reverse.insert(1,"‰∏ÄÊôÇ") if icon.match?("Êúù„ÅÆÂÜÖ‰∏ÄÊôÇ")
		
	icon.sub!("Âæå"," #{THEN} ")
	icon.sub!("‰∏ÄÊôÇ"," #{ONCE} ")
	icon.sub!("Â§ú„ÅØ"," #{THEN} ")
	icon.sub!("ÊôÇ„ÄÖ"," #{OCCASIONAL} ")
	icon.sub!("ÊúùÂ§ï"," #{OCCASIONAL} ")
	icon.sub!("Âæå‰∏ÄÊôÇ"," #{ONCE} ")
	icon.sub!("ÂæåÊôÇ„ÄÖ"," #{OCCASIONAL} ")
	icon.sub!("ÊôÇ„ÄÖÊ≠¢„ÇÄ"," #{OCCASIONAL} ")
	icon.sub!("ÂçàÂæå„ÅØ"," #{THEN} ")
	icon.sub!("ÊòºÈ†É„Åã„Çâ"," #{THEN} ")
	icon.sub!("Â§ïÊñπ‰∏ÄÊôÇ"," #{ONCE} ")
	icon.sub!("Êó•‰∏≠ÊôÇ„ÄÖ"," #{OCCASIONAL} ")
	icon.sub!("ÊúùÂ§ï‰∏ÄÊôÇ"," #{ONCE} ")
	icon.sub!("ÊúùÊô©‰∏ÄÊôÇ"," #{ONCE} ")
	
	icon.sub!("Êõá",CLOUDY)
	icon.sub!("Èõ®",RAIN)
	icon.sub!("Èõ™",SNOW)
	icon.sub!("Èúß",FOG)
	icon.sub!("Èúô",ICE)
	
	icon.sub!("„Åã",'')
	return icon
end

def darkskyicon(text)
	case text
	when "clear-day"
		icon = "‚òÄÔ∏è"
	when "clear-night"
		# icon = "üåô"
		icon = moon($dt)
	when "rain"
		icon = "‚òîÔ∏è"
	when "snow"
		icon = "‚ùÑÔ∏è"
	when "sleet"
		icon = "üí¶"
	when "wind"
		icon = "üí®"
	when "fog"
		icon = "üå´"
	when "cloudy"
		icon = "‚òÅÔ∏è"
	when "partly-cloudy-day"
		icon = "‚õÖÔ∏è"
	when "partly-cloudy-night"
		icon = "‚õÖÔ∏è"
	end
end

def climacellicon(code)
	case code
	when 0 # Unknown
		icon = "#{UNKNOWN}"
	when 1000 # Clear
		isnight ? (icon = moon($dt)) : (icon = "#{FINE}")
	when 1001 # Cloudy
		icon = "#{CLOUDY}"
	when 1100 # Mostly Clear
		isnight ? (icon = moon($dt)) : (icon = "#{FINECLOUD}")
	when 1101 # Partly Cloudy
		icon = "#{CLOUDFINE}"
	when 1102 # Mostly Cloudy
		icon = "#{MOSTCLOUD}"
	when 2000 # Fog
		icon = "#{FOG}"
	when 2100 # Light Fog
		icon = "#{FOG}"
	when 3000 # Light Wind
		icon = "#{WIND}"
	when 3001 # Wind
		icon = "#{WIND}"
	when 3002 # Strong Wind
		icon = "#{WIND}"
	when 4000 # Drizzle
		icon = "#{RAIN}"
	when 4001 # Rain
		icon = "#{RAIN}"
	when 4200 # Light Rain
		icon = "#{RAIN}"
	when 4201 # Heavy Rain
		icon = "#{HEAVYRAIN}"
	when 5000 # Snow
		icon = "#{SNOW}"
	when 5001 # Flurries
		icon = "#{SNOW}"
	when 5100 # Light Snow
		icon = "#{SNOW}"
	when 5101 # Heavy Snow
		icon = "#{HEAVYSNOW}"
	when 6000 # Freezing Drizzle
		icon = "#{RAIN}"
	when 6001 # Freezing Rain
		icon = "#{HEAVYRAIN}"
	when 6200 # Light Freezing Rain
		icon = "#{ICE}"
	when 6201 # Heavy Freezing Rain
		icon = "#{ICE}"
	when 7000 # Ice Pellets
		icon = "#{ICE}"
	when 7101 # Heavy Ice Pellets
		icon = "#{ICE}"
	when 7102 # Light Ice Pellets
		icon = "#{ICE}"
	when 8000 # Thunderstorm
		icon = "#{LIGHTNING}"
	end
end

def formatnum(s)
	return NKF.nkf('-X -w', s).tr('Ôºê-ÔºôÔºé', '0-9.')
end

def formatdaysmenu(h)
	wind = h[:wind].split('„ÄÄ')[0].gsub('„É°„Éº„Éà„É´',' m/s')
	if h[:wind].split('„ÄÄ').length > 1
		wind += "\n" + h[:wind].split('„ÄÄ')[1..-1].join('„ÄÄ').gsub('„É°„Éº„Éà„É´',' m/s')
	end
	wave = h[:wave].gsub('„É°„Éº„Éà„É´',' m/s')
	text = "#{WEATHERCODE[h[:weather]]}\n#{wind}\nÊ≥¢„ÄÄ#{wave}"
	return formatnum(text)
end

def winddirconv(degree)
	cardinals = ['Âåó', 'ÂåóÂåóÊù±', 'ÂåóÊù±', 'Êù±ÂåóÊù±', 'Êù±', 'Êù±ÂçóÊù±', 'ÂçóÊù±', 'ÂçóÂçóÊù±', 'Âçó', 'ÂçóÂçóË•ø', 'ÂçóË•ø', 'Ë•øÂçóË•ø', 'Ë•ø', 'Ë•øÂåóË•ø', 'ÂåóË•ø', 'ÂåóÂåóË•ø']
	dir = ((degree * 16) / 360).round(0)
	cardinals[dir]
end

def hourcircle(i)
	i = (i.to_i + 9) % 24
	case i
	when 0
		return '‚ì™'
	when 1
		return '‚ë†'
	when 2
		return '‚ë°'
	when 3
		return '‚ë¢'
	when 4
		return '‚ë£'
	when 5
		return '‚ë§'
	when 6
		return '‚ë•'
	when 7
		return '‚ë¶'
	when 8
		return '‚ëß'
	when 9
		return '‚ë®'
	when 10
		return '‚ë©'
	when 11
		return '‚ë™'
	when 12
		return '‚ë´'
	when 13
		return '‚ë¨'
	when 14
		return '‚ë≠'
	when 15
		return '‚ëÆ'
	when 16
		return '‚ëØ'
	when 17
		return '‚ë∞'
	when 18
		return '‚ë±'
	when 19
		return '‚ë≤'
	when 20
		return '‚ë≥'
	when 21
		return '„âë'
	when 22
		return '„âí'
	when 23
		return '„âì'
	when 24
		return '„âî'
	else
		return '„Äá'
	end
end

def adjustpadding(string)
	unless string.nil?
		text = Magick::Draw.new
		text.font = "Menlo"
		text.text_antialias(true)
		text.font_style=Magick::NormalStyle
		text.font_weight=Magick::NormalWeight
		text.gravity=Magick::CenterGravity
		width = text.get_type_metrics(string).width
		if width < 7
			return 1
		elsif width > 18
			return -1
		else
			return 0
		end
	else
		return 0
	end
end

def adjustspacing(string, length)
	text = Magick::Draw.new
	text.font = "Menlo"
	text.text_antialias(true)
	text.font_style=Magick::NormalStyle
	text.font_weight=Magick::NormalWeight
	text.gravity=Magick::CenterGravity
	width = text.get_type_metrics(string).width
	if width < 7
		adjust = 1
	elsif width > 18
		adjust = 1
	else
		adjust = 0
	end
	padding = ''
	i = 0
	while i < (length + adjust)
		padding += ' '
		i += 1
	end
	return padding
end

begin
	radar = URI.open("https://www.jma.go.jp/jp/radnowc/imgs/radar/#{$region}/#{$dymd}#{$tr}-00.png").read
	r64 = "| refresh=true image=#{Base64.encode64(radar).gsub(/\n/, '')}"
rescue
	r64 = '‚ö†Ô∏è'
end

begin
	u = "http://www.jma.go.jp/jp/#{$satfreq}/imgs/0/#{$sattype}/1/#{$dymd}#{$ts}-00.png"
	if Faraday.head(u).status != 200
		u = "http://www.jma.go.jp/jp/#{$satfreq}/imgs/0/infrared/1/#{$dymd}#{$ts}-00.png"
	end
	satellite = URI.open(u).read
	s64 = "| refresh=true image=#{Base64.encode64(satellite).gsub(/\n/, '')}"
rescue
	s64 = '‚ö†Ô∏è'
end


if ifdarkmode
	$textcolor = 'lightgray'
	$advcolor = 'yellow'
	$wrncolor = 'orange'
	$textansi = '97'
	$rainansi = '36'
else
	$textcolor = 'darkslategray'
	$advcolor = 'orange red'
	$wrncolor = 'red'
	$textansi = '39' # 30 too dark, 39 too light
	$rainansi = '1;36'
end

###

# darksky = JSON.parse(URI.open("https://api.darksky.net/forecast/#{$darkskyapi}/#{$latlon}?units=si").read)
#
# temp = darksky['currently']['temperature'].to_f.round(1)
# apptemp = darksky['currently']['apparentTemperature'].to_f.round(1)
# dewpoint = darksky['currently']['dewPoint'].to_f.round(1)
# humidity = (darksky['currently']['humidity'].to_f * 100).round(0) # %
# pressure = darksky['currently']['pressure'] # hectopascal
# windspeed = darksky['currently']['windSpeed'].to_f.round(1) # m/s
# gust = darksky['currently']['windGust'].to_f.round(1) # m/s
# winddir = darksky['currently']['windBearing'].to_i # deg
# uv = darksky['currently']['uvIndex']
# precip = darksky['currently']['precipIntensity'].to_f.round(1) # mm/h
# precipprob = darksky['currently']['precipProbability'].to_f.round(1)
# clouds = (darksky['currently']['cloudCover'] * 100).round(0) # %
# visibility = darksky['currently']['visibility'].to_f.round(0) # km
# icon = darkskyicon(darksky['currently']['icon'])

# openweather =  JSON.parse(URI.open("https://api.openweathermap.org/data/2.5/weather?id=#{$location}&units=metric&lang=ja&appid=#{$openweatherapi}").read)
#
# temp = openweather['main']['temp'].to_f.round(1)
# apptemp = openweather['main']['feels_like'].to_f.round(1)
# # dewpoint =
# humidity = (openweather['main']['humidity'].to_f * 100).round(0) # %
# pressure = openweather['main']['pressure'] # hectopascal
# windspeed = openweather['wind']['speed'].to_f.round(1) # m/s
# # gust = openweather['wind']['gust'].to_f.round(1) # m/s
# winddir = openweather['wind']['deg'].to_i # deg
# # uv =
# precip = openweather['rain']['rain.1h'].to_f.round(1) # mm last hour
# precip = openweather['snow']['snow.1h'].to_f.round(1) # mm last hour
# # precipprob =
# clouds = (openweather['clouds']['all']).round(0) # %
# visibility = openweather['visibility'].to_f.round(0) # km
# icon = openweather['weather']['main']
# # TODO
# # icon, missing token

visualcrossing = JSON.parse(URI.open("https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/#{$latlon}?unitGroup=metric&key=#{$visualcrossingapi}&include=alerts%2Ccurrent").read)

# temp = visualcrossing['currentConditions']['temp'].to_f.round(1)
apptemp = visualcrossing['currentConditions']['feelslike'].to_f.round(1)
# dewpoint = visualcrossing['currentConditions']['dew'].to_f.round(1)
# humidity = visualcrossing['currentConditions']['humidity'].to_f.round(0) # %
# pressure = visualcrossing['currentConditions']['pressure'] # hectopascal
# windspeed = visualcrossing['currentConditions']['windspeed'].to_f.round(1) # m/s
# gust = visualcrossing['currentConditions']['windgust'].to_f.round(1) # m/s
# winddir = visualcrossing['currentConditions']['winddir'].to_i # deg
# if gust.nil?
# 	wind = "#{windspeed} m/s #{winddirconv(winddir)}"
# else
# 	wind = "#{windspeed} m/s (#{gust} m/s) #{winddirconv(winddir)}"
# end
# uv = nil
unless visualcrossing['currentConditions']['cloudcover'].nil?
	cloudcover = visualcrossing['currentConditions']['cloudcover'].round(0) # %
else
	cloudcover = 0
end
clouds = "#{cloudcover}%"
visibility = visualcrossing['currentConditions']['visibility'].to_f.round(0) # km
icon = darkskyicon(visualcrossing['currentConditions']['icon'])
# TODO ['alerts']
# if null = 0
# 2021/02/02 wind, pressure, precip null

# climacell = JSON.parse(URI.open("https://data.climacell.co/v4/timelines?location=#{$latlon}&timesteps=1m&timezone=Asia/Tokyo&fields=temperature,temperatureApparent,dewPoint,humidity,windSpeed,windDirection,windGust,pressureSurfaceLevel,precipitationIntensity,precipitationProbability,precipitationType,visibility,cloudCover,cloudBase,cloudCeiling,weatherCode,epaIndex,epaPrimaryPollutant,epaHealthConcern", 'content-type' => 'application/json', 'apikey' => $climacellapi).read)
#
# cccurrent = climacell['data']['timelines'][0]['intervals'][0]['values']
#
# temp = cccurrent['temperature'].to_f.round(1)
# apptemp = cccurrent['temperatureApparent'].to_f.round(1)
# dewpoint = cccurrent['dewPoint'].to_f.round(1)
# humidity = cccurrent['humidity'].to_f.round(0) # %
# pressure = cccurrent['pressureSurfaceLevel'] # hectopascal
# windspeed = cccurrent['windSpeed'].to_f.round(1) # m/s
# gust = cccurrent['windGust'].to_f.round(1) # m/s
# winddir = cccurrent['windDirection'].to_i # deg
# wind = "#{windspeed} m/s (#{gust} m/s) #{winddirconv(winddir)}"
# # uv = cccurrent['uvIndex']
# precip = cccurrent['precipitationIntensity'].to_f.round(1) # mm/h
# precipprob = cccurrent['precipitationProbability'].to_f.round(1)
# preciptype = cccurrent['precipitationType'].to_i
# # 0: N/A, 1: Rain, 2: Snow, 3: Freezing Rain, 4: Ice Pellets
# cloudcover = (cccurrent['cloudCover']).round(0) # %
# cloudbase = cccurrent['cloudBase'] # km
# cloudceiling = cccurrent['cloudCeiling'] # km
# clouds = "#{cloudcover}% (#{cloudbase}‚Üí#{cloudceiling} km)"
# visibility = cccurrent['visibility'].to_f.round(0) # km
# cccode = cccurrent['weatherCode'].to_i
# icon = climacellicon(cccode)
# epaindex = cccurrent['epaIndex'].to_i
# epapol = cccurrent['epaPrimaryPollutant'].to_i
# # 0: PM2.5, 1: PM10, 2: O3, 3: NO2, 4: CO, 5: SO2
# epaconcern = cccurrent['epaHealthConcern'].to_i
# # 0: Good (0-50), 1: Moderate (51-100), 2: Unhealthy for Sensitive Groups (101-150)
# # 3: Unhealthy (151-200), 4: Very Unhealthy (201-300), 5: Hazardous (>301)

jma = JSON.parse(URI.open("https://www.jma.go.jp/bosai/amedas/data/point/#{$amedas}/#{$dtame}.json").read)

temp = humidity = pressure = precip = 0
wind = gust = mintemp = maxtemp = ''

current = jma.map {|k,v| v}.last
update = Time.parse(jma.map {|k,v| k}.last).strftime("%H:%M")
temp = windspeed = humidity = pressure = snow = 0
winddir = ''

temp = current['temp'].first
wind = "#{winddirconv(current['windDirection'].first)} #{current['wind'].first} m/s"
gust = "#{winddirconv(current['gustDirection'].first)} #{current['gust'].first} m/s #{hourcircle(current['gustTime']['hour'])}"
humidity = current['humidity'].first
pressure = current['normalPressure'].first
precip = current['precipitation1h'].first
precipday = current['precipitation24h'].first
snow = current['snow1h'].first unless current['snow1h'].nil?
snowday = current['snow24h'].first unless current['snow24h'].nil?
mintemp = "#{current['minTemp'].first}¬∞ #{hourcircle(current['minTempTime']['hour'])}"
maxtemp = "#{current['maxTemp'].first}¬∞ #{hourcircle(current['maxTempTime']['hour'])}"

dewpoint = (temp - (100 - humidity)/5).round(1)
capptemp = (temp + 0.33 * (6.105 * humidity/100 * Math::E**((17.27*temp)/(237.7+temp))) - 0.7 * windspeed - 4).round(1)
# http://www.bom.gov.au/info/thermal_stress/#atapproximation

lastquake = earthquake

######

puts "#{icon} #{temp}¬∞"
puts "---"
puts "#{$place} | color=lightslategray"
puts "---"
# puts "Ê∏©  #{temp}¬∞ (#{apptemp}¬∞) | color=#{$textcolor}"
puts "\033[#{$textansi}mÊ∏©  #{temp}¬∞ (#{apptemp}/#{capptemp}¬∞)  \033[34m#{mintemp}  \033[31m#{maxtemp} | color=#{$textcolor} ansi=true"
puts "Êπø  #{humidity}% (#{dewpoint}¬∞) | color=#{$textcolor}"
puts "Âúß  #{pressure} hPa | color=#{$textcolor}" if defined?(pressure)
puts "È¢®  #{wind} (#{gust})| color=#{$textcolor}"
puts "Èõ®  #{precip} mm/h (#{precipday} mm/d) | color=#{$textcolor}" if precip > 0
puts "Èõ™  #{precip} mm/h (#{snowday} mm/d) | color=#{$textcolor}" if not snow.nil? and snow > 0
# puts "Èõ®  #{precip} mm/h (#{precipprob} mm/h) #{rainfall if rainfall > 0} #{'mm' if rainfall > 0} | color=#{$textcolor}" if precip > 0 or precipprob > 0
puts "Èõ≤  #{clouds} | color=#{$textcolor}"
puts "Ë¶ñ  #{visibility} km | color=#{$textcolor}" if defined?(visibility)
puts "Á¥´  #{uv} | color=#{$textcolor}" if defined?(uv)
puts "ÊôÇ  #{update} | color=lightslategray"
puts "Èúá  #{lastquake} | color=#{$textcolor}" unless lastquake.nil?

puts "---"

# forecastdays today & tomorrow

days = forecastdays
week = forecastweek

warnings = warning

for i in 0..1
	icon = ''
	case i
	when 0
		date = "‰ªäÊó•#{days[0][:date].strftime('%-d')}Êó•"
		istoday = true
	when 1
		date = "ÊòéÊó•#{days[1][:date].strftime('%-d')}Êó•"
		istoday = false
	end
	unless warnings[i].blank?
		if warnings[i].any? {|line| line.match("Ë≠¶Â†±")}
			puts "#{date} | color=#{$wrncolor}"
		else
			puts "#{date} | color=#{$advcolor}"
		end
		"#{formatdaysmenu(days[i])}".each_line do |line|
			puts "--#{line.strip} | color=#{$textcolor}"
		end
		warnings[i].each do |line|
			if line.match("Ë≠¶Â†±")
				puts "--#{line.strip} | color=#{$wrncolor}"
			else
				puts "--#{line.strip} | color=#{$advcolor}"
			end
		end
	else
		puts "#{date} | color=#{$textcolor}"
		"#{formatdaysmenu(days[i])}".each_line do |line|
			puts "--#{line.strip} | color=#{$textcolor}"
		end
	end
	
	icon = forecasticon(days[i][:weather],istoday)
	print "\033[#{$textansi}m"
	print "#{icon.center(ICONLENGTH+adjustpadding(icon))}"
	
	if days[i][:temp].empty?
		print " ".rjust(9)
	elsif days[i][:temp][0] == days[i][:temp][1]
		print "\033[31m#{days[i][:temp][1].rjust(9)}Àö"
	else
		print "\033[34m#{days[i][:temp][0].rjust(4)}Àö"
		print "\033[31m#{days[i][:temp][1].rjust(4)}Àö"
	end
	
	print "\033[#{$rainansi}m    "
	print days[i][:pop].map {|x| "#{x.rjust(2)}%"}.join(' ').rjust(16)
	print "| color=#{$textcolor} font=Menlo ansi=true\n"
end

# forecastweek

week[1][:date] - $dt < 24.hours ? (w = 2) : (w = 1)

for i in w..6
	date = "#{week[i][:date].strftime('%-d')}Êó•Ôºà#{WEEK[week[i][:date].strftime('%u')]}Ôºâ"
	puts "#{date} | color=#{$textcolor}"

	if i == 1 and not days[2].nil?
		"#{formatdaysmenu(days[2])}".each_line do |line|
			puts "--#{line.strip} | color=#{$textcolor}"
		end
	end
	
	icon = forecasticon(week[i][:weather],false)
	print "\033[#{$textansi}m"
	print "#{icon.center(ICONLENGTH+adjustpadding(icon))}"
	
	print "\033[34m#{week[i][:temp][:min].rjust(4)} "
	print "#{('('+week[i][:temp][:minlo]).rjust(3)}"
	print "„Äú#{week[i][:temp][:minup].rjust(2)})"
	
	print "\033[31m#{week[i][:temp][:max].rjust(4)} "
	print "#{('('+week[i][:temp][:maxlo]).rjust(3)}"
	print "„Äú#{week[i][:temp][:maxup].rjust(2)})"
	
	print "\033[#{$rainansi}m"
	print week[i][:pop].rjust(4)
	print "| color=#{$textcolor} font=Menlo ansi=true\n"
end


puts "---"
puts "Â§©Ê∞óÊ¶ÇÊ≥Å | ansi=false color=#{$textcolor}"
overviewdays.each_line do |line|
	puts "--#{line.strip} | color=#{$textcolor} ansi=false"
end
puts "‰∫åÈÄ±ÈñìÊ∞óÊ∏©‰∫àÂ†± | ansi=false color=#{$textcolor}"
overviewweek.each_line do |line|
	puts "--#{line.strip} | color=#{$textcolor} ansi=false"
end
puts "„É¨„Éº„ÉÄ„Éº | ansi=false color=#{$textcolor}"
puts "--#{r64}"
puts "Ë°õÊòü | color=#{$textcolor}"
puts "--#{s64}"

typhoontarget = JSON.parse(URI.open("https://www.jma.go.jp/bosai/typhoon/data/targetTc.json").read)

if typhoontarget.length > 0
	puts "Âè∞È¢®ÊÉÖÂ†± | ansi=false color=#{$textcolor} href=https://www.jma.go.jp/bosai/map.html#elem=root&typhoon=all&contents=typhoon"
	puts "--#{typhoonimg}"
	puts typhooninfo(typhoontarget.map {|x| x['tropicalCyclone']})
	# >= 44 color=#{$advcolor} >= 54 color=#{$wrncolor}
end

puts "---"
puts "Êõ¥Êñ∞ | refresh=true ansi=false color=green"
puts "Ê∞óË±°Â∫Å‚Ä¶|href=https://www.jma.go.jp/bosai/forecast/#area_type=offices&area_code=#{$subarea} ansi=false color=lightslategray"
